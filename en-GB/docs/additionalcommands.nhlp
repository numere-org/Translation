<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2017  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="additionalcommands">
	<title string="Additional commands" idxkey="about, hline, warn, close, assert, declare, clc, include" />
	<keywords>
		<keyword>about</keyword>
		<keyword>hline</keyword>
		<keyword>credits</keyword>
		<keyword>info</keyword>
		<keyword>single</keyword>
		<keyword>warn</keyword>
		<keyword>close</keyword>
		<keyword>assert</keyword>
		<keyword>declare</keyword>
		<keyword>clc</keyword>
		<keyword>include</keyword>
	</keywords>
	<contents>
		Beside of the more evaluation-oriented commands knows NumeRe some additional commands, which can be assigned to the pure user interface. These are for example the commands <a href="nhlp://help?frame=new"><code>help</code></a> and <a href="nhlp://find?frame=new"><code>find</code></a>, as well as the following ones:
		<list>
			<item node="about">This command (and its synonyms <code>credits</code> and <code>info</code>) display legal and versioning information about NumeRe.</item>
			<item node="hline">This command draws a horizontal double line in the console. If the parameter <code>-single</code> is appended, this command will draw a single line.</item>
			<item node="warn">This command will display the passed string as a warning in the console. This should only be used for actual warnings, because warnings have an effect on the runtime of the code.</item>
			<item node="close">This command closes previously opened windows, which are selected by parameters using <code>close -PAR</code>: <code>-graphs</code> closes all graphs, <code>-docs</code> all documentation windows, <code>-tables</code> all tables, <code>-images</code> all ImageViewers and <code>-all</code> all windows from this list.</item>
			<item node="assert">The command <code>assert EXPR</code> is intended to be used in software tests. It checks the expression <code>EXPR</code> for trueness and returns it. If the expression evaluates to false, an error is thrown. This can be used to represent a test condition easily. In combination with the procedure flag <code>test</code>, extensive software tests may be implemented.</item>
			<item node="declare">This command declares one or more file-specific constants for the current script or procedure file. The syntax is <code>declare CONST1 := VALUE1, CONST2 := VALUE2, ...</code>, where numeric values as well as strings or whole expressions can be used for the values. These replace the constants used at the time the file is read. In a procedure file this command can appear at any place (also outside procedures) and is valid from its occurrence for the following lines. Using constants can make code much more readable, as when using explicit literal constants.</item>
			<item node="clc">This command clears the content of the terminal and resets its content to the startup state.</item>
			<item node="include">This command can be used to include information from an external file into the current executable file: <code>include FILE</code><br />The file <code>FILE</code> will be searched relatively to the current file. Filenames containing spaces have to be enclosed with quotation marks. With this command, global expressions, definitions and declarations will be imported at this location (therefore it is reasonable for procedure files to use this command only within procedures). After an additional <code>::</code> the type of imported information may be selected, e.g. <code>include FILE :: declarations</code> to import only declarations. Using <code>globals</code> will include global expressions and <code>definitions</code> will import definitions. It is possible to use multiple arguments at the same time.</item>
		</list>
	</contents>
</article>