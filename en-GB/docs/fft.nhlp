<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2016  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="fft">
	<title string="Fourier transformation of data sets" idxkey="fft,fft2d" />
	<keywords>
		<keyword>fft</keyword>
		<keyword>fft2d</keyword>
		<keyword>fourier</keyword>
		<keyword>complex</keyword>
		<keyword>inverse</keyword>
		<keyword>axisshift</keyword>
	</keywords>
	<contents>
		NumeRe is equipped with a fast Fourier transformation algorithm (<em>fast fourier transformation; fft</em>) that can decompose data sets into their contained frequencies for analysis. This algorithm is started with the command <code>fft</code>, where the data series must also be specified:<codeblock>fft DATAOBJECT(I1:I2,J1:J2)</codeblock>.
		NumeRe expects at least two columns in a Fourier transform: Axis values (time or frequency) and amplitude (real or complex). If three columns are specified, they are interpreted as axis values, amplitude and phase, or - if the additional option <code>-complex</code> is passed - as axis values, real part and imaginary part of the amplitude.
		In case of a datagrid or an image, one can perform a 2D FFT with the command <code>fft2d</code>.
		<em>Note:</em> An FFT is particularly efficient for data sets with a length of a power of two (e.g. <expr>2^2, 2^3, 2^4, ...</expr> data points). However, if the length of the data sets can only be factorised by particularly large prime numbers, the calculation can take a very long time (i.e. several minutes). Above 1000 data points, NumeRe automatically adapts the length of the data points so that they are at least even.
		The result of the Fourier transform is stored in the form of several new data series in the <code>fftdata()</code> cache (generated automatically if necessary). However, the target of the transformation can also be customized using the <code>target=TARGETCACHE()</code> option. By default, three columns are generated: frequency [Hz], amplitude and phase [rad]. (<code>fft2d</code> will only store the amplitude as a datagrid.) With the additional <code>-complex</code> option, the real and imaginary parts of the amplitude are cached instead of its magnitude and phase.
		NumeRe can also perform an inverse transformation. For this, the additional <code>-inverse</code> option must be passed.
		<em>Note:</em> When computing the Fourier transform, a two-sided spectrum is computed that is symmetrically oriented around the Nyquist frequency <expr>f_(max)/2</expr>. However, for the interpretation of real-valued signals, the one-sided spectrum is sufficient. This is located in the first half of the calculated spectrum (<expr>f = [0, f_(max)/2]</expr>). With the <code>-axisshift</code> option, the second half of the calculated spectrum is shifted to the negative, so that the spectrum is now symmetric around <expr>f = 0</expr>, which simplifies interpretation. For inverse transformations, this shift can also be undone with <code>-axisshift</code>.
		<em>Note on normalization:</em> NumeRe normalizes the two-sided spectrum so that the amplitudes displayed correspond to the amplitudes of the original signal, to simplify interpretation. Compared to the mathematically correct normalization, all frequencies not equal to 0 are thus too large by a factor of 2. With the inverse transformation this normalization is compensated of course; however, for synthetic spectra this must be taken into account.
		<example desc="Fourier transformation of the columns 2 and 3 in <code>data()</code>, in which the time values are contained in column 3, and with the output as real and imaginary part:">
			fft data(:,3:2) -complex
		</example>
		<em>See also:</em> <a href="nhlp://fwt?frame=self">help fwt</a> and <a href="nhlp://stfa?frame=self">help stfa</a>
	</contents>
</article>