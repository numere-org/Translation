<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2016  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="define">
	<title string="Function definitions" idxkey="define,lclfunc" />
	<keywords>
		<keyword>def</keyword>
		<keyword>lclfunc</keyword>
		<keyword>ifndef</keyword>
		<keyword>redef</keyword>
		<keyword>undef</keyword>
		<keyword>recursive</keyword>
		<keyword>comment</keyword>
	</keywords>
	<contents>
		<syntax>
			define f() := EXPR
			define f(x, ...) := EXPR(x, ...) -set ...\n
			redefine f(x, ...) := NEWEXPR(x, ...) -set ...\n
			undefine f(), ...\n
			ifndefined f(x, ...) := EXPR(x, ...) -set ...\n
			lclfunc f(x, ...) := EXPR(x, ...)
		</syntax>
		The command <code>define</code> allows you, to define your own, custom function for repeated calls in the current NumeRe session.
		The definition has to begin with the function name, following the function arguments in parentheses. Currently, NumeRe supports up to ten arguments for each function or an arbitrary number of arguments with a special syntax, respectively. A function does not have to possess any arguments; empty argument parentheses are also possible. The function name must not contain any mathematical operators and its first character shall not be a number.
		The syntax <code>:=</code> initiates the actual declaration of the expression of the function, in which you may pass additional options after the parameter <code>-set</code>:<codeblock>define FUNCTION(ARGUMENTS) := EXPRESSION(ARGUMENTS) [-set OPTIONS]</codeblock>
		The following three options are available:
		<list>
			<item node="comment=COMMENT">Add a comment to your defined function. If your comment shall contain whitespaces, then surround it with quotation marks.</item>
			<item node="asval={VARS}">Pass a set of variables, which shall be replaced by their values during function definition</item>
			<item node="recursive">In combination with the command <code>redefine</code> a defined function may reference a to its previous version. The previous version will be replaced by this new version.</item>
		</list>	
		The defined function may be called after a successful definition with its name and (values for) its variables.
		If the last argument is passed via <code>...</code> while definition, then you may pass an arbitrary number of values for this argument. Note that at least the value <code>0.0</code> will be passed, although no value was actually entered. Note as well that your function must be capable of processing an arbitrary number of values. e.g.:<codeblock>define function(x,y,...) := abs(x)*sign(y)+num(...)</codeblock>
		For each function definition NumeRe will check, if this function will generate an endless loop through a recursive definition and will deny this definition, if applicable.
		Using the command <code>redefine</code> (and the same syntax) you may update your previous definition. Using this command for a function (passed without arguments) you may comment your function afterwards:<codeblock>redefine FUNCTION() -set comment=COMMENT</codeblock>
		If you want to check in advance, if a function is already defined, then you can use the command <code>ifndefined</code> (and the same syntax). The function will be defined only if it is not already present.
		The command <code>undefine</code> removes one or more previous defined functions from memory. Pass only the function name and empty argument parentheses to this command:<codeblock>undefine FUNCTION(), FUNCTION2(), ...</codeblock>
		Functions, which are predefined by NumeRe (e.g. <expr>sin(x)</expr>), cannot be redefined by the user.
		The command <code>lclfunc</code> defines the passed function for the current valid scopte. This may be either a <a href="nhlp://script?frame?new">script</a> or a <a href="nhlp://procedure?frame=new">procedure</a>. After NumeRe has left the current scope, the defined function is deleted automatically.
		<code>define</code> understands three additional parameters:
		<list>
			<item node="-save">Saves the defined functions to the function definitions file (<code>&lt;&gt;/functions.def</code>). Updated definitions will be overwritten while saving. Definitions, which are not present in the file, will be appended.</item>
			<item node="-load">Loads the functions from the function definitions file (<code>&lt;&gt;/functions.def</code>). The definitions in memory will be overwritten!</item>
			<item node="-set">Initiates additional options (e.g. <code>comment=KOMMENTAR</code>)</item>
		</list>
		<example desc="Definition of the function <expr>fnc(x) = sqrt(exp(-x))</expr> with a comment and call of this function with the value <expr>x = 2.5</expr>:" type="verbatim">
			|&lt;- define fnc(x) := sqrt(exp(-x)) -set comment="Model of the process"
			|-&gt; Function "fnc" was defined successfully.
			|
			|&lt;- fnc(2.5)
			|-&gt; ans = 0.2865048
		</example>
		<em>See also:</em> <a href="nhlp://list?frame=self">help list</a>
	</contents>
</article>