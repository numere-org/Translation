<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2021  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="window">
	<title string="Graphical user interfaces" idxkey="window, layout" />
	<keywords>
		<keyword>window</keyword>
		<keyword>layout</keyword>
		<keyword>endlayout</keyword>
		<keyword>group</keyword>
		<keyword>endgroup</keyword>
		<keyword>button</keyword>
		<keyword>radio</keyword>
		<keyword>statictext</keyword>
		<keyword>textfield</keyword>
		<keyword>treelist</keyword>
		<keyword>checkbox</keyword>
		<keyword>dropdown</keyword>
		<keyword>combobox</keyword>
		<keyword>spinbut</keyword>
		<keyword>slider</keyword>
		<keyword>gauge</keyword>
		<keyword>tablegrid</keyword>
		<keyword>bitmap</keyword>
		<keyword>grapher</keyword>
		<keyword>menu</keyword>
		<keyword>separator</keyword>
		<keyword>prop</keyword>
		<keyword>size</keyword>
		<keyword>color</keyword>
		<keyword>id</keyword>
		<keyword>item</keyword>
		<keyword>getitems</keyword>
		<keyword>value</keyword>
		<keyword>vertical</keyword>
		<keyword>horizontal</keyword>
		<keyword>markup</keyword>
		<keyword>multiline</keyword>
		<keyword>checkmark</keyword>
		<keyword>expand</keyword>
		<keyword>onactivate</keyword>
		<keyword>onclick</keyword>
		<keyword>onchange</keyword>
		<keyword>onopen</keyword>
		<keyword>label</keyword>
		<keyword>state</keyword>
		<keyword>style</keyword>
		<keyword>tabs</keyword>
		<keyword>align</keyword>
		<keyword>enabled</keyword>
		<keyword>disabled</keyword>
		<keyword>hidden</keyword>
		<keyword>selection</keyword>
		<keyword>focus</keyword>
		<keyword>display</keyword>
		<keyword>maximize</keyword>
		<keyword>iconize</keyword>
		<keyword>restore</keyword>
		<keyword>hide</keyword>
		<keyword>unhide</keyword>
		<keyword>lamp</keyword>
		<keyword>statustext</keyword>
		<keyword>datetimepicker</keyword>
		<keyword>timepicker</keyword>
		<keyword>datepicker</keyword>		
		<keyword>relscl</keyword>		
		<keyword>dialogresult</keyword>		
		<keyword>options</keyword>		
	</keywords>
	<contents>
		<syntax>
			VAL = window LAYOUTSCRIPT
			VAL = window WINID -set PROP=VAL ...
			VAL = window WINID -get PROP ...
		</syntax>
		NumeRe is capable of generating and interacting with graphical user interfaces, which can be used to develop even sophisticated applications (or prototypes) with comparatively little effort. The central command for this is <code>window</code> in the form<codeblock>RES = window EX [-PAR]</codeblock>Whereby the return values <code>RES</code> of the command differ depending on the used expression <code>EX</code> and the parameters <code>PAR</code>. To create a new window, the form<codeblock>ID = window LAYOUTSCIPT</codeblock>can be used. <code>LAYOUTSCRIPT</code> can either be referencing to a NLYT file (layout script file, see later section) or contain their contents as a string. In both cases, the command sequence returns the ID of the new window created from the layout script. This ID can later be used to interact with this window and programmatically change properties (the parameters are described in more detail in the following section):<codeblock>ITEMIDS = window ID -getitems=TYPE\nVAL = window ID -get PROP\nLOG = window ID -set PROP=VAL\nLOG = window ID -close</codeblock>
		<em>Note:</em> For large-scale applications, it may be helpful if the NumeRe main window is hidden during their individual execution. This can be achieved by executing <code>set windowshown=false</code>. If used together with <code>set appautoclose=true</code>, then NumeRe will automatically close itself, once the last open window has been closed. Otherwise, the main window will unhide automatically.
		<h>Parameters for this command</h>
		<list>
			<item node="set PROP=VAL">The <code>set</code> parameter is used to modify the properties <code>PROP</code> in an already open window. The properties <code>value</code>, <code>label</code>, <code>color</code>, <code>state</code>, <code>options</code>, <code>statustext</code>, <code>focus</code>, <code>display</code> and <code>selection</code> can be modified in the process. These will be defined in more detail in a later section. The return value of the command in this case is a logical <code>true</code> or <code>false</code>, which indexes whether the modification was successful</item>.
			<item node="get PROP">The <code>get</code> parameter is used to read the values of the properties <code>PROP</code> from an already open window. The properties <code>value</code>, <code>label</code>, <code>color</code>, <code>state</code>, <code>statustext</code>, <code>dialogresult</code> and <code>selection</code> can be read.</item>.
			<item node="item=ID">This option allows a single element of the window to be selected, otherwise the properties of the window itself are used. <em>Note:</em> Some elements may not have all properties</item>.
			<item node="getitems=TYPE">This parameter can be used to read the ITEMIDS of all elements in a window that match a specific type <code>TYPE</code>. For <code>TYPE</code>, the layout script commands can be used (except <code>layout</code> and <code>group</code>).</item>.
			<item node="close">This parameter closes the corresponding window. The return value is a logical value that indexes success. <em>Note:</em> the <a href="nhlp://close?frame=new">command expression</a> <code>close -all</code> will also close all windows created with <code>window</code>.</item>
		</list>
		<h>Layout scripts</h>
		A central element in the creation of a graphical user interface are layout scripts. These are files which use the <em>*.nlyt</em> file extension. They are expected by default in the <code>&lt;scriptpath&gt;</code>, but can also be loaded from another folder by explicitly specifying the path.
		Layout scripts can also be encoded into a long string so that no additional file is needed. This can be used to create a very responsive design or to create a layout based on multiple pre-built blocks. However, it should be noted that errors can easily creep in with this method.
		In a layout script, a <em>very restricted</em> NumeRe syntax can be used: Comments by <code>##</code> and <code>#* ... *#</code> are fully supported. Control flow elements such as <code>for ... endfor</code> and <code>if ... else ... endif</code> on the other hand are not supported. In addition, only code that is located in the first <code>layout ... endlayout</code> block of the file and only command expressions of the following list can be used. Expressions separate from this are not possible.
		A layout script is composed of the following command expressions:
		<list>
			<item node="layout [-PAR]<br/> ...<br/>endlayout">This block encloses all other GUI elements and defines the window itself. Parameters can be used to modify the background color (<code>color={R,G,B}</code>), window title (<code>title=TITLE</code>), window icon (<code>icon=PATH/TO/ICON.ico</code>), status bar text (<code>statustext=TEXT</code>) and window size (<code>size={x,y}</code>, use <code>size={-1,-1}</code> to maximize the window automatically).</item>
			<item node="group [-PAR]<br/> ...<br/>endgroup">These blocks can be used to group additional GUI elements (including additional <code>group ... endgroup</code> blocks) and to adjust the orientation of the element arrangement (<code>type=ORIENT</code>).<br/>If an additional <code>label=NAME</code> is used, the group is embedded in an additional box, labeled accordingly.<br/>If <code>style=tabs</code> is used together with <code>label=NAME</code>, the embedded GUI elements are displayed as part of a tab. All subsequent groups with <code>style=tabs label=TABLABEL</code> are automatically integrated as additional tabs. Tabs separate from this must be embedded in additional groups. It is possible to assign an ID and an <code>onchange</code> event handler to this group if this is done for the first group using <code>group -style=tabs label=LABEL id=ID onchange=EVENT</code> in the current context. Other accesses to the group are also possible via the ID (e.g. <code>-get selection</code>, see below).<br/>If <code>style=menu</code> is used together with <code>label=NAME</code>, the following GUI elements (a menu supports only <code>menuitem</code>, <code>separator</code> and <code>checkbox</code>) will be displayed as part of a menu. Embedded menu groups are realized as submenus and all following groups with <code>style=menu label=MENULABEL</code> are automatically realized as additional menus. However, there can be only one menu bar per window.<br/>Groups also affect the scaling behavior of the individual GUI elements for this purpose and restrict this to their alignment. The <code>expand</code> option can be used to disable this behavior, so that scaling is done in <expr>x</expr> and <expr>y</expr> direction.</item>
			<item node="button STR [-set PAR]">Creates a clickable button labeled with the string <code>STR</code>. Scales by default with <code>relscl=1</code>.</item>
			<item node="radio {STR} [-set PAR]">Creates a radio group whose values are taken from <code>{STR}</code> in the form of a list of strings.</item>
			<item node="statictext STR [-set PAR]">Represents the text from <code>STR</code> without any other GUI elements.</item>.
			<item node="textfield STR [-set PAR]">Generates a text input line with the default value <code>STR</code>. Can be set to the state <code>state=readonly</code>. May have multiple lines or support simplified markdown via <code>type=TYPE</code>. The markup sequences <code>#HL1 ##HL2 ###HL3 *ITLC* **BLD** ***BLD/ITLC*** - ITEM ==EMPH== `CODE`</code> are supported, but not during interactive user input mode. Scales by default with <code>relscl=0</code>.</item>
			<item node="treelist [-set PAR]">Generates a treelist which can additionally be equipped with checkboxes. The number of columns and elements can be specified by <code>size={row, col}</code> or directly by specifying values using <code>label={LABEL1, ...}</code> and <code>value={VAL1, ...}</code>. <code>value={VAL1, ...}</code> specifies the elements row by row, where the columns must be separated by tabs (<code>\t</code>) (e.g.: <code>value={"COL1\tCOL2\tCOL3\t...", "..."}</code>). If additional checkboxes are used, the first value (<code>1</code> or <code>0</code>) defines the status of these checkboxes (e.g.: <code>value={"1\tCOL1\t...", "0\t..."}</code>). Scales by default with <code>relscl=1</code>.</item>
			<item node="checkbox STR [-set PAR]">Generates a clickable checkbox labeled with <code>STR</code>.</item>
			<item node="dropdown {STR} [-set PAR]">Generates a dropdown list whose values are taken from <code>{STR}</code> in the form of a list of strings. Scales by default with <code>relscl=1</code>.</item>
			<item node="combobox {STR} [-set PAR]">Generates a combo box (a modifiable dropdown list) whose values are taken from <code>{STR}</code> in the form of a list of strings. Scales by default with <code>relscl=1</code>.</item>
			<item node="spinbut [-set PAR]">Generates a spin button that can be labeled with <code>label=LABEL</code>. Minimum (<code>min=VAL</code>) and maximum (<code>max=VAL</code>) are configurable.</item>
			<item node="slider [-set PAR]">Generates a slider. Minimum (<code>min=VAL</code>) and maximum (<code>max=VAL</code>) are configurable. Scales by default with <code>relscl=0</code>.</item>
			<item node="lamp [-set PAR]">Generates a small lamp. Label (<code>label=LABEL</code>) and colour (<code>color={R,G,B}</code>) are configurable. In addition, one can choose for <code>value=VAL</code> out of the pre-defined lamp colours: <code>"ok"</code>, <code>"warn"</code>, <code>"error"</code> and <code>"off"</code>. Scales by default with <code>relscl=0</code>.</item>
			<item node="datetimepicker [-set PAR]">Generates a date-and-time picker field including a calendar. Using <code>type=datepicker</code> only a date and using <code>type=timepicker</code> only a time value can be selected. <code>value=VAL</code> has to be a string encoded time value, numerical values won't be accepted. Scales by default with <code>relscl=1</code>.</item>
			<item node="gauge [-set PAR]">Creates a progress bar that can be oriented either horizontally or vertically. The bar can have values from 0 to 100 (<code>value=VAL</code>). The special value -1 switches to the pulsation mode of the progress bar. Scales by default with <code>relscl=0</code>.</item>
			<item node="tablegrid [-set PAR]">Creates a table grid with a defined number of rows and columns (<code>size={row, col}</code>), but at least one row and one column. Values of the table can be modified by <code>window ID -set value=TABLEDATA() item=ITEMID</code> and read by <code>window ID -get value item=ITEMID target=TARGETTABLE()</code>. In the absence of the <code>target=TARGETTABLE()</code> option, <code>valtable()</code> is used as default. Can be set to the state <code>state=readonly</code> and accepts additional properties via <code>options={KEY-VALUE-LIST}</code>. Scales by default with <code>relscl=1</code>.</item>
			<item node="bitmap NM [-set PAR]">Displays the image from the <code>NM</code> file.</item>
			<item node="grapher [-set PAR]">Generates a graph object with configurable size (<code>size={x,y}</code>, by default <expr>640times480</expr>). The graph object can only be populated by a plotting command using the <code>streamto={WINID,ITEMID}</code> option.</item>
			<item node="menuitem STR [-set PAR]">Defines an item in a menu labeled <code>STR</code>. <code>STR</code> may contain tab-delimited shortcuts which are registered automatically. The <code>type=checkmark</code> option embeds a checkbox in the menu item. The same can be achieved with <code>checkbox</code> when used as part of a menu.</item>.
			<item node="separator EX [-set PAR]">Inserts a separator object. This can be either a horizontal or vertical line (<code>type=horizontal</code> or <code>type=vertical</code> respectively) or a space of height and width EX (<code>type=space</code>).</item>
			<item node="prop P1, P2, ...">Generates one or more new internal variables <code>P1, P2, ...</code> for the current window layout, which can be filled with information. The variables are intrinsically <em>typeless</em> and can contain numeric values as well as strings. Default values can be assigned directly: <code>P1 = V1, P2 = V2, ...</code>. To read or modify these variables, <code>window ID -get value prop=sPROPNAME</code> or <code>window ID -set value=VALUE prop=sPROPNAME</code> (<code>sPROPNAME</code> is a string) must be used.</item>
		</list>
		Thus, a layout script has the following generic shape:
		<codeblock>
			layout [-PAR]
			\tGUI-ELEMENTS OR group ... endgroup
			endlayout
		</codeblock>
		<em>Note:</em> In case of embedding a window layout into a <a href="nhlp://package?frame=new">package</a> the target filename and path must be additionally specified between <code>layout</code> and its parameters, e.g. <code>layout "&lt;procpath&gt;/myapp/appmain.nlyt" -title="My App" ...</code> When using the package creator in the tools menu this will be inserted automatically.
		<em>Note:</em> If a layout script shall be encoded into a string, then all commands have to be separated using line break characters <code>"\n"</code> just like within the file itself, that is for example <code>window "layout -title=\"String window\"\n button \"Close this\" -set onclick=evt_close()\n endlayout"</code>
		<em>Note:</em> For documentation purposes, the <code>\layout LAYOUTNAME</code> keyword can be used in documentation comments to create a corresponding heading in the <a href="nhlp://latex?frame=new">PDF</a>.
		<h>Property options for the commands in layout scripts</h>
		The GUI elements in the upper list can be further modified by the following property options. However, not all commands support the same property options.
		<list>
			<item node="size={x,y}">Set the size of the window, the graph object, the text field (each in pixels), and the treelist and the table grid (each in rows and columns).</item>
			<item node="color={R,G,B}">Customize foreground (<code>button</code> and <code>statictext</code>) or background (all others except <code>grapher</code> and <code>tablegrid</code>) color of a GUI element. RGB values are to be specified per channel in the interval [0,255].</item>
			<item node="id=ID">Set a self-defined ITEMID of a GUI element. The ITEMID range [0,999] is reserved for the user. GUI elements without this option have an ITEMID greater than or equal to 1000, and these ITEMIDs do not have to be consecutive.</item>
			<item node="value=VAL">Defines the default value (when used in the layout script) or can be used to read or modify the current value of a GUI element. GUI elements requiring strings for <code>EX</code> generally require their values as strings.<br/>The <code>treelist</code> command can hold a list of values in the form of a vector in this case. A tree-like structure may be created using additional line breaks and curly braces (<code>...\n{...}...</code>) like so: <code>{"FIRST LEVEL\n{SECOND LEVEL, ...}", ...}</code>. Quotation marks are only necessary in the lower levels, if their text contains commas (masked in this case: <code>\"</code>). During runtime, a tree may also be created using embedded clusters, where child nodes together with their parent node form together suche an embedded cluster. The structure is as follows: <code>{{LVL1,LVL2},LVL1,{LVL1,{LVL2,...,{LVL2,{LVL3,...}},...},...},...}</code><br/><em>Note:</em> the value of the window itself is its size (when used in e.g. <code>window ID -get value</code> without <code>item=ITEMID</code>).</item>
			<item node="statustext=TEXT">Defines the default value (when used in the layout script) or can be used to read or modify the current value of the window status bar. <code>TEXT</code> may contain multiple values; those will be distributed along individual cells in the status bar. <em>Note:</em> this option may only be applied to the window as a whole, e.g. <code>window ID -get statustext</code> without <code>item=ITEMID</code>.</item>
			<item node="type=TYPE">Defines the orientation of the GUI element (<code>type=vertical</code> and <code>type=horizontal</code>) at <code>group ... endgroup</code>, <code>radio</code>, <code>separator</code> and <code>gauge</code>.<br/>Can also be used to make a <code>textfield</code> multiline via <code>type=multiline</code> or support simplified markdown via <code>type=markup</code>, or to enable additional checkboxes via <code>type=checkmark</code> at <code>treelist</code> and <code>menuitem</code>.<br/><code>type=space</code> defines that <code>separator</code> shall be realized as empty space.</item>
			<item node="align=ALIGNMENTSTRING">This option defines the alignment of a GUI element in the space specified by its surrounding group. <em>Example:</em> for <expr>n</expr> elements in a group, each element has a defined portion (for <expr>n</expr> equal elements, this is <expr>1/n</expr>) of the available space. In this space, the <code>align=ALIGNMENTSTRING</code> option can be used to determine the positioning of the element in question.<br/>The alignment string may be composed of up to two of the following five characters: <code>"LRTBC"</code> (Left, Right, Top, Bottom, Center). Default is <code>"LC"</code>.</item>
			<item node="relscl=FACTOR">This option can be used to modify the default relative scaling of GUI elements in the direction of the orientation of the current group. Only positive, integer factors can be used. If <code>FACTOR</code> is set to 0, the GUI element does not change its size when the window is resized. With a 1, the element scales the same as all other elements, with 2 it scales twice as much, and so on. Here, the actual possible scaling is calculated as <expr>relscl/sum(relscl)</expr> with the sum of all relative scalings. Many elements scale only if they are part of a group and some only in a particular orientation.</item>
			<item node="label=NAME">Many GUI elements can be additionally labeled with this option. For <code>button</code>, <code>value</code> and <code>label</code> are identical. For the <code>treelist</code> command, this option defines the names of the columns, for <code>dropdown</code> and <code>combobox</code>, it defines the possible selection values, for <code>group -style=tabs</code> it can be used to read and change the tab labels interactively, and can be passed multiple values in the form of a vector.</item>
			<item node="state=STATE">This option can be used to programmatically enable (<code>state=enabled</code>), disable (<code>state=disabled</code>), and hide (<code>state=hidden</code>) GUI elements; additionally, <code>tablegrid</code> and <code>textfield</code> may be set to read-only using <code>state=readonly</code>. Elements are enabled by default. Hidden elements will still need their space in the window.</item>
			<item node="options={KEY-VALUE-LIST}">Further properties can be assigned to GUI elements using this option, which is for now only supported by <code>tablegrid</code>. The key-valie-list can be constructed hierarchically and follows the general scheme <code>{KEY1, VALUE1, KEY2, VALUE2, ...}</code> Details are mentionen below in the directly following section. <em>This option can only be used interactively and only with <code>-set</code> and cannot be used in a layout script.</em></item>
			<item node="dialogresult">Activates the <em>dialog mode</em> for the current window, i.e., interactions are only allowed for this window. The code execution is interrupted similar to <code>dialog</code> as long as the dialog mode is terminated via the closing of the window or via an explicit <code>evt_enddialog(sReturnValue)</code> (see below). The return value is either an empty string (if the window is closed) or <code>sReturnValue</code>. Procedures may not be used as event handler in this mode. <em>This option can only be used interactively and cannot be used in a layout script.</em></item>
			<item node="focus">This option can be used to set the keyboard focus to a desired window element or a dedicated window. <em>This option can only be used interactively and cannot be used in a layout script.</em></item>
			<item node="display=DISPLAYTYPE">This option determines how the current window is displayed: <code>display=maximize</code> maximizes the window, <code>iconize</code> minimizes it, <code>restore</code> displays it as a normal window. With <code>display=hide</code> the window can be hidden completely and with <code>unhide</code> it can be uncovered again. <em>This option can only be used interactively and cannot be used in a layout script.</em></item>
			<item node="selection={POS}">This option can be used to read or change the selection in a window element or the tab of a tab group. For <code>textfield</code> this can be the position of the cursor (only a value) or the current selection (position and length). <code>tablegrid</code> always returns the position of the cursor as <code>{row,col}</code>. <em>This option can only be used interactively and cannot be used in a layout script.</em></item>
			<item node="onactivate=EVENT">Defines the event handler to be used when double-clicking a cell in a <code>tablegrid</code> or an element in <code>treelist</code> (see below for details).</item>
			<item node="onclick=EVENT">Defines the event handler to be used when clicking <code>button</code>, a cell in a <code>tablegrid</code>, an element in <code>treelist</code>, a menu entry, and an item in <code>grapher</code> (see below for details).</item>
			<item node="onchange=EVENT">Defines the event handler to use when changing a value in a GUI element (see below for details).</item>
			<item node="onopen=EVENT">Defines the event handler to use when opening the window (see below for details). This event handler <em>must</em> be appended to <code>layout</code>, must be a NumeRe procedure, and must <em>only</em> have <code>void</code> as a return value.</item>
		</list>
		<h>Modification of GUI element properties with options={KEY-VALUE}</h>
		Keys supported by <code>tablegrid</code> are <code>"min-cols"</code>, <code>"min-rows"</code> (specify the minimum number of cells in the corresponding dimension), <code>"fitsize"</code> (to resize all table cells to fit their contents, if the value is <code>true</code>), <code>"fitsize-cols"</code> (together with a list of columns, which shall be resized: <code>..., "fitsize-cols", {2,4,6}, ...</code>) and <code>"cond-format"</code> (defines conditional formatting for individual columns).
		The conditional formatting is defined by an embedded cluster, which in turn contains further embedded clusters according to the schema <code>..., "cond-format", {COLS, FORMATTING-DEF, COLS, ...}, ...</code>. Here, <code>COLS</code> can be a single column or a vector of columns and <code>FORMATTING-DEF</code> is another embedded cluster, starting with the type of formatting, followed by the corresponding comparison values and then the color values in HTML hex notation (<code>#RRGGBB</code>). The individual variants of the conditional formatting correspond to the functionalities offered by the table viewer formatting dialog:
		<list>
			<item node="&quot;if-true&quot;">The general syntax for this formatting is <code>{"if-true", "COND", VAL, "COLOR"}</code>. Here <code>"COLOR"</code> is a single HTML color value that is used if the condition <code>CELL "COND" VAL</code> is true. This condition can be a logical operator (e.g. <code>"!="</code> or <code>"&lt;="</code>) or the <code>strfnd()</code> function in the form of <code>"strfnd"</code> or <code>"!strfnd"</code>, if you want to check whether a character string is part of the cell value or not. <code>VAL</code> can be a single value or for <code>"=="</code>, <code>"!="</code>, <code>"strfnd"</code> or <code>"!strfnd"</code> a vector of different values. For the inequality operator, all values must fulfill the condition, for all others only one of the values must fulfill the condition</item>
			<item node="&quot;map&quot;">This formatting can be used if cells are to be formatted using a predefined list of values. The general syntax for this formatting is <code>{"map", {VALS}, {"COLOR"}}</code>. Here <code>{"COLOR"}</code> is a vector with HTML color values for each value in <code>{VALS}</code></item>
			<item node="&quot;cscale&quot;">This formatting colors cells using a color scale. It is defined by <code>{"cscale", {fMin, fMax}, {"COLOR"}}</code>. The vector <code>{"COLOR"}</code> contains either two or three HTML color values that form the color scale between <code>fMin</code> and <code>fMax</code> (which is continued for smaller or larger values with constant color values)</item>
			<item node="&quot;cscale-limited&quot;">Additional, separated outer areas are obtained using this formatting. It is defined by <code>{"cscale-limited", {fMin, fMax}, {"COLOR"}}</code>. The vector <code>{"COLOR"}</code> contains either four or five HTML color values, where the first and last ones represent values smaller or larger than <code>fMin</code> and <code>fMax</code> and the middle two or three form the corresponding color scale. If the first and the last two colors are identical, then the behavior of this formatting is identical to <code>"cscale"</code></item>
		</list>
		Examples of corresponding editing of the element properties:
		<codeblock>
			window ID -set item=ITEMID options={"min-cols", 5}
			window ID -set item=ITEMID options={"cond-format", {1, {"if-true", "==", 42, "#FFEB9B"}}}
			window ID -set item=ITEMID options={"min-cols", 5, "cond-format", { \\
			\t{1:3}, {"cscale-limited",{2,4},{"#202020","#FF0000","#00FF00","#EAEAEA"}}, \\
			\t4, {"map",{"a","b","c"},{"#C6EFCE","#00FF00","#0000FF"}}, \\
			\t5, {"if-true","strfnd","Hello","#FF00FF"}}}
		</codeblock>
		<h>Menus</h>
		There can be only one menu bar per window, to which each new menu is automatically appended. Menus are created by integrating a group defined for this purpose into the layout script. In this, the entries are then defined via <code>menuitem</code>:
		<codeblock>
			[...]
			group -style=menu label=MENUNAME
			\tmenuitem MENUENTRY -set onclick=EVENT
			\tgroup -style=menu label=SUBMENUNAME
			\t\t[...]
			\tendgroup
			\tmenuitem MENUENTRY_CHECKBOX -set type=checkmark onclick=EVENT
			\t[...]
			endgroup
			[...]
		</codeblock>
		In addition to the <code>menuitem</code> command, <code>separator</code> (creates a horizontal separator) and <code>checkbox</code> (as an alias for <code>menuitem EX -set type=checkmark</code>) can be used. All other commands are ignored in a menu definition.
		Shortcuts (keyboard combinations) can be automatically assigned to menus by appending them to the menu item name after a tab: <code>NAME\tSHORTCUT</code>. Shortcuts can be composed of a modifier (<code>CTRL</code>, <code>ALT</code>, <code>SHIFT</code>) a plus or minus and a key or function key (<code>F1</code>-<code>F10</code>). Directional keys (<code>UP</code>, <code>LEFT</code>, etc.) and spaces (<code>SPACE</code>) are also supported here: <code>"Select all\tCTRL-A", "Start block\tCTRL-SHIFT-B", "New definition\tF8", "Move right\tSHIFT-RIGHT"</code>.
		<em>Note:</em> The command sequence <code>window ID -get value item=MENUID</code> returns only the name of the entry (or the state of the checkbox, if any) without any shortcut. The full entry is obtained via <code>window ID -get label item=MENUID</code>.
		<h>Events and event handling</h>
		Unlike the simple <a href="nhlp://dialog?frame=new">dialogs</a> that can be generated with <code>dialog</code>, which wait for a user interaction before allowing new input to the NumeRe console, the graphical user interfaces generated by <code>window</code> are event-based, if they are not currently in dialog mode. This means that the console can still be used even if a window is open. As soon as the user interacts with it, it generates events that can be processed.
		To do this, event handlers can be assigned to GUI elements via the <code>onactivate=EVENT</code>, <code>onclick=EVENT</code> and <code>onchange=EVENT</code> options. These are called as soon as the corresponding event occurs and can process the event. The simplest event handler is <code>evt_close()</code>, which simply closes the window, for example in this form:<codeblock>button "End" -set onclick=evt_close()</codeblock>Additional event handlers are these functions:
		<list>
			<item node="evt_copyvalues(nFromId,nToId1,...)">Copies the values of <code>nFromId</code> into the elements with IDs <code>nToId1, ...</code></item>
			<item node="evt_changestate(nId,sState)">Changes the state of the <code>nId</code> element to the new <code>sState</code> state</item>
			<item node="evt_enddialog(sReturnValue)">Terminates the dialog mode with <code>sReturnValue</code> as return value. If the current window is not in dialog mode, it is closed instead</item>
			<item node="evt_sendvaltoitem(nToId1,...)">Copies the values of the event-triggering element into the elements with IDs <code>nToId1, ...</code></item>
		</list>
		<em>Note:</em> GUI event handlers can only be used directly in a layout script and the arguments must be literals (i.e. not variables) (<code>onchange=evt_sendvaltoitem(5, 7)</code> or <code>onclick=evt_changestate(1, "hidden")</code>).
		If the current window is <em>not</em> in dialog mode, then using <a href="nhlp://procedure?frame=new">NumeRe procedures</a> is an alternative. These must have the following signature<codeblock>procedure $PROC(WINID, ITEMID, EVENT{}) :: event</codeblock>where <code>WINID</code> is the ID of the window, <code>ITEMID</code> is the ID of the GUI element, and <code>EVENT{}</code> is a key-value list (the <code>getkeyval()</code> function simplifies the interaction) containing at least the following information: <codeblock>EVENT{} = {"event", "EVENTTYPE", "object", "TYPE", "value", VALUE, "state", "STATE"}</codeblock>This list might be extended by optional values like <code>"position", POSITION</code> for some UI elements. A procedure can be used as an event handler for <em>any</em> events and also for completely different windows (if that makes sense in the current context).
		In the previous example with <code>button "End" -set onclick=$PROC()</code> (argument list is unnecessary), the following values would be included:<codeblock>EVENT{} = {"event", "onclick", "object", "button", "value", "End", "state", "enabled"}</codeblock>
		<em>Note:</em> If an event handler has a longer computation time, it will not negatively affect the graphical user interface. It is still usable. However, it should be noted that the user naturally expects a response in a reasonable time frame; at least once the information that computation is in progress.
		<h>Internal variables</h>
		In addition to the displayed GUI elements, it is often necessary to assign internal variables to a window in order to be able to uniquely assign further information to that window. <code>prop</code> can be used for this purpose: <code>prop VAR1 = VAL1, VAR2, ...</code> This command generates one or more internal variables which have no specific type, i.e. they can contain both a numeric value or a string.
		Internal variables can be read with the command sequence <code>window ID -get value prop=sPROPNAME</code> and written with <code>window ID -set value=VAL prop=sPROPNAME</code>  (<code>sPROPNAME</code> is a string).
		<example desc="A window layout, which will display an interactive preview of the result of <code>smooth</code> with a custom selectable level:" type="codeblock">
			## Window layout: A wide grapher object at the top, a row of controls below
			layout -title="Smooth Preview" size={700, 300}
			\tgrapher -set id=0 size={600, 200}
			\tgroup -type=horizontal
			\t\ttextfield #&lt;loadpath&gt; -set id=1
			\t\tbutton "Select" -set onclick=$smoothevent()
			\t\tspinbut -set min=1 max=10 value=3 label="Smoothing level" id=2
			\t\tbutton "Smooth!" -set onclick=$smoothevent()
			\tendgroup
			endlayout
			\n
			## Procedure, which would be found at '&PROCPATH&/smoothevent.nprc'
			procedure $smoothevent(_nWinID, _nItemID, _event{}) :: event
			\tstr sPath
			\ttab dat()
			\tvar nOrder = 1
			\t
			\tsPath = window _nWinID -get value item=1;
			\tclear data() -ignore
			\t
			\tif (getkeyval(_event{}, "value") == "Select")
			\t\t## Select a new file using a dialog and plot its contents
			\t\tsPath = dialog sPath -set type=filedialog title="Select file";
			\t\twindow _nWinID -set value=sPath item=1;
			\t\tload sPath;
			\t\tplot data(:, 1:2) "" -set box streamto={_nWinID, 0} reset aspect=3 connect
			\telse
			\t\t## Smooth the available file and plot it together with the original data
			\t\tnOrder = window _nWinID -get value item=2;
			\t\tload sPath;
			\t\tcopy data(:, 1:2) -target=dat();
			\t\tsmooth dat(:, 2) -order=nOrder
			\t\tplot data(:, 1:2) "", dat() "" -set box streamto={_nWinID, 0} reset aspect=3 connect
			\tendif
			\t
			\treturn void;
			endprocedure
		</example>
		<img src="<>/docs/window.png" />
		<em>See also:</em> <a href="nhlp://plot?frame=self">help plot</a>, <a href="nhlp://dialog?frame=self">help dialog</a> and <a href="nhlp://procedure?frame=self">help procedure</a>
	</contents>
</article>
