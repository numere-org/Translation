<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2016  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="matop">
	<title string="Matrix operations" idxkey="matop" />
	<keywords>
		<keyword>matop</keyword>
		<keyword>mtrxop</keyword>
		<keyword>matri</keyword>
		<keyword>determ</keyword>
		<keyword>invert</keyword>
	</keywords>
	<contents>
		<syntax>
			matop EXPR(TABLE(), CLUSTER{})
			matop TABLE() = EXPR(TABLE(), CLUSTER{})
			matop CLUSTER{} = EXPR(TABLE(), CLUSTER{})
		</syntax>
		NumeRe may apply operations to <em>whole matrices</em>, if the command <code>matop</code> is used:<codeblock>matop EXPRESSION(data(),TABLE())</codeblock>The command <code>mtrxop</code> is a synonym to this command.
		All calculations will be applied elementwise, though. You may achieve matrix-matrix and matrix-vector multiplications with the special <code>**</code> operator:<codeblock>matop MATRIX1() ** MATRIX2()</codeblock>The <code>**</code> operator has the highest priority of all operators. Therefore, it is mandatory to use parentheses, if applicable. In addition, the <code>**</code> operator will check if the dimensions of the two matrices are matching in the means of matrix-matrix multiplication.
		The target table of the matrix operation can be specified in the expression. If it was <em>not</em> specified, the table <code>matrix()</code> will be used as automatic target. If the target table doesn't exist, it will be created during the evaluation of this command. If the target table is passed with <em>empty</em> argument parentheses, it will be overwritten <em>completely</em>.
		<em>Important:</em> <code>matop</code> knows a large set of additional and special matrix functions. These are listet at <a href="nhlp://matfunc?frame=new">help matfunc</a>.
		<example desc="Multiplying the elements in <code>data()</code> to the elements in <code>table()</code>:">
			matop table() *= data()
		</example>
	</contents>
</article>

<article id="matop_functions">
	<title string="Matrix functions" idxkey="matfunc" />
	<keywords>
		<keyword>determ</keyword>
		<keyword>invert</keyword>
		<keyword>diagona</keyword>
		<keyword>eigenval</keyword>
		<keyword>eigenvec</keyword>
		<keyword>transpos</keyword>
		<keyword>matfunc</keyword>
		<keyword>matfunk</keyword>
	</keywords>
	<contents>
		Inside of the <code>matop</code> command, you may use the following additional functions:
		<list>
			<item node="and(MAT)">Applies the operator && to the elements of the matrix MAT</item>
			<item node="covar(MAT,MAT)">Calculates the covariance of the both arguments. The arguments must have equal dimensions</item>
			<item node="correl(MAT,MAT)">Calculates the correlation matrix of the both arguments. If the arguments do not have equal dimensions, their rows and columns are padded with zeros. If both arguments are equal, the auto-correlation matrix is calculated. The resulting matrix does have the dimensions <expr>(2n-1, 2m-1)</expr>, whereas the element <code>MAT(n,m)</code> corresponds to the zero-shift correlation</item>
			<item node="cross(MAT)">Calculates the <expr>n</expr> dimensional cross product (vector product) of the vectors, which form the <expr>n-1</expr> columns of the matrix MAT.</item>
			<item node="det(MAT)">Calculates the determinant of the matrix MAT, if MAT is a square matrix.</item>
			<item node="diag(x,y,z,...)">Creates a diagonal matrix with the elements <code>x,y,z,...</code> as main diagonal.</item>
			<item node="diagonalize(MAT)">Diagonalizes the square matrix MAT. The eigenvalues might be complex even if the matrix is pure real</item>
			<item node="eigenvals(MAT)">Calculates the eigenvalues of the square matrix MAT and returns them in the shape of a vector. The eigenvalues might be complex even if the matrix is pure real</item>
			<item node="eigenvects(MAT)">Calculates the eigenvectors of the square matrix MAT and returns them in the shape of a matrix, where each column is one eigenvector. The eigenvectors might be complex even if the matrix is pure real</item>
			<item node="identity(n)">Creates a <expr>n</expr> dimensional identity matrix.</item>
			<item node="idxtolog(MAT)">Transforms indices in to logical values. If a matrix is passed, then the function will return a vector with true in those lines, to which the indices are pointing. If a matrix with two columns is passed, then the function will return a matrix with those elements equal to true, to which the line indices of the first and the column indices of the second column are pointing.</item>
			<item node="invert(MAT)">Inverts the matrix MAT, if an inverse matrix exists. <code>invert()</code> checks in advance, if MAT is a square matrix.</item>
			<item node="logtoidx(MAT)">Transforms logical values to indices. If a vector is passed, then the function will return a vector with the indices to the elements, which were true. If a matrix is passed, then the function returns a two-column matrix, with the line indices in the first and the column indices in the second column.</item>
			<item node="matfc(X,Y,Z,...)">Creates a matrix out of the columns <code>X,Y,Z,...</code> If the number of elements is not sufficient for the maximal dimension, the missing ones will be replaced by 0.</item>
			<item node="matfcf(X,Y,Z,...)">Creates a matrix out of the columns <code>X,Y,Z,...</code> If the number of elements is not sufficient for the maximal dimension, the missing ones will be <em>logically</em> generated out of the already present ones.</item>
			<item node="matfl(X,Y,Z,...)">Creates a matrix out of the lines <code>X,Y,Z,...</code> If the number of elements is not sufficient for the maximal dimension, the missing ones will be replaced by 0.</item>
			<item node="matflf(X,Y,Z,...)">Creates a matrix out of the lines <code>X,Y,Z,...</code> If the number of elements is not sufficient for the maximal dimension, the missing ones will be <em>logically</em> generated out of the already present ones.</item>
			<item node="normalize(MAT)">Normalizes the values in the matrix MAT to the range <expr>[-1,1]</expr> (the values in the matrix are divided through their absolute maximal value).</item>
			<item node="one(n,m)">Creates a <expr>(n, m)</expr> matrix, which is filled with ones. If only one argument was passed, then a square matrix will be created.</item>
			<item node="or(MAT)">Applies the operator || to the elements of the matrix MAT</item>
			<item node="repmat(MAT,n,m)">Repeats the matrix MAT <expr>(n, m)</expr> times</item>
			<item node="reshape(MAT,n,m)">Changes the shape of the matrix MAT to a <expr>(n, m)</expr> matrix. The number of elements in the old and the new matrix must match for this function. Reshaping is done linewise</item>
			<item node="resize(MAT,n,m)">Changes the size of the matrix MAT to <expr>(n, m)</expr>. Missing lines and rows are appended using zeros</item>
			<item node="shuffle(sel,val)">Returns <expr>sel</expr> randomly selected and unique values out of a <expr>1:val</expr> array. <expr>val</expr> is an optional value, which defaults to <expr>sel</expr></item>
			<item node="size(MAT)">Returns the number of lines and columns of the matrix MAT as a vector</item>
			<item node="solve(MAT)">Solves the linear system of equations, which is described by the matrix MAT, with the Gaussian algorithm.</item>
			<item node="trace(MAT)">Calculates the trace of the square matrix MAT.</item>
			<item node="transpose(MAT)">Transposes the matrix MAT (column and line indices will be exchanged)</item>
			<item node="unique(MAT,n)">Sorts and returns only unique elements. If MAT is a vector, then the function will return a vector. If MAT is a matrix, then MAT will be rolled out and a vector is returned. <expr>n</expr> is an optional value, will only be used, if MAT is a matrix, and is 0 as default. If <expr>n = 1</expr>, then the function will return a matrix with unique elements along its rows. If <expr>n = 2</expr>, then the unique elements are determined along the columns</item>
			<item node="zero(n,m)">Creates a <expr>(n, m)</expr> matrix, which is filled with zeroes. If only one argument was passed, then a square matrix will be created.</item>
		</list>
	</contents>
</article>