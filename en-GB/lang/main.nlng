#
# NumeRe: Framework für Numerische Rechnungen
# Copyright (C) 2016  Erik Haenel et al.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ========================================================================
# LANGUAGE FILE: main.nlng
# LANGUAGE: en-GB
#
# COMMON:
# =================================
COMMON_CANCEL=CANCEL
COMMON_YES_NO=y/n
COMMON_WITH=with
COMMON_WITHOUT=without
COMMON_ACTIVE=active
COMMON_INACTIVE=inactive
COMMON_LINES=line(s)
COMMON_LINE=line
COMMON_COLS=column(s)
COMMON_COL=column
COMMON_SUCCESS=Success
COMMON_FAILURE=Failure
COMMON_DONE=Done
COMMON_EVALUATING=Evaluating
COMMON_FREQUENCY=Frequency
COMMON_AMPLITUDE=Amplitude
COMMON_PHASE=Phase
COMMON_TIME=Time
COMMON_SIGNAL=Signal
COMMON_PROCEDURE=Procedure
COMMON_FILENAME=File name
COMMON_FILETYPE_NOEXT=File
COMMON_FILETYPE_DAT=Data file
COMMON_FILETYPE_NSCR=NumeRe script
COMMON_FILETYPE_NHLP=NumeRe help file
COMMON_FILETYPE_NLNG=NumeRe language file
COMMON_FILETYPE_HLPIDX=Documentation index
COMMON_FILETYPE_LABX=CASSYLab file
COMMON_FILETYPE_JDX=JCAMP-DX Spectrum
COMMON_FILETYPE_IBW=IGOR Binary Waves
COMMON_FILETYPE_PNG=PNG bitmap
COMMON_FILETYPE_TEX=TeX source
COMMON_FILETYPE_EPS=EPS vector graphic
COMMON_FILETYPE_GIF=GIF bitmap
COMMON_FILETYPE_SVG=SVG vector graphic
COMMON_FILETYPE_ZIP=ZIP-Archiv
COMMON_FILETYPE_DLL=Program library
COMMON_FILETYPE_EXE=Program
COMMON_FILETYPE_INI=Configuration file
COMMON_FILETYPE_TXT=Text file
COMMON_FILETYPE_DEF=Definition file
COMMON_FILETYPE_CSV=Comma Separated Values
COMMON_FILETYPE_BACK=Config backup
COMMON_FILETYPE_CACHE=NumeRe cache
COMMON_FILETYPE_NDAT=NumeRe data file
COMMON_FILETYPE_NPRC=NumeRe procedure
COMMON_FILETYPE_NDB=NumeRe data base
COMMON_FILETYPE_LOG=Log file
COMMON_FILETYPE_VFM=Font file
COMMON_FILETYPE_PLUGINS=Plugin information
COMMON_FILETYPE_ODS=OpenDoc spreadsheet
COMMON_FILETYPE_XLS=Excel (97-2003) sheet
COMMON_FILETYPE_XLSX=Excel workbook
COMMON_FILETYPE_WAV=WAVE audio file
# MAIN:
# =================================
MAIN_LOADING_CMDLINE=Processing command line parameters
MAIN_LOADING_PARSER_SELFTEST=Initializing parser selftest
MAIN_LOADING_IOSTREAM=Starting I/O stream
MAIN_LOADING_PLUGINS=Loading plugin information
MAIN_LOADING_FONT=Loading font face "%%1%%" for graph
MAIN_LOADING_AUTOSAVE_SEARCH=Searching for automatic backups
MAIN_LOADING_AUTOSAVE_FOUND=Backup found.
MAIN_LOADING_AUTOSAVE_NOT_FOUND=No backup found.
MAIN_LOADING_AUTOSAVE=Loading automatic backup
MAIN_LOADING_AUTOSAVE_ERROR_LOADING=ERROR: Could not load the automatic backup.
MAIN_LOADING_AUTOSAVE_ERROR_SAVING=ERROR: Could not save the automatic backup.
MAIN_LOADING_AUTOSAVE_TRANSLATING=Parsing to new file format
MAIN_LOADING_USER_INTERFACE=Starting NumeRe user interface
MAIN_LOADING_COLORTHEME=Activating color theme
MAIN_LOADING_COLORTHEME_ERROR=ERROR: Could not load the color theme.
MAIN_ABOUT_NBR=About: see "about"
MAIN_BYE_NBR=See you later!
MAIN_UNSAVED_CACHE=There are unsaved elements in the cache. Shall they be saved? (%%COMMON_YES_NO%%)
MAIN_CACHE_SAVED=Cache was saved successfully.
MAIN_QUIT=NumeRe v %%1%% was terminated successfully.
# BUILTIN:
# =================================
BUILTIN_LOADDATA_ENTER_NAME=Please enter a file name of the data file. If no file path is supplied, the file will be searched in the directory "%%1%%".$(0 for aborting)
BUILTIN_LOADDATA_ASK_APPEND=ERROR: The memory is already blocked with the data of the file "%%1%%". Shall the new data be appended to the existing datas table? (%%COMMON_YES_NO%%)$(0 for aborting)
BUILTIN_LOADDATA_ASK_OVERRIDE=The data won't be appended. Shall the existing table be overwritten? (%%COMMON_YES_NO%%)
BUILTIN_LOADDATA_SUCCESS=The data from "%%1%%" was loaded successfully to memory: the data set consists %%2%% %%COMMON_LINES%% and %%3%% %%COMMON_COLS%%.
BUILTIN_APPENDDATA_ALL_SUCCESS=All data of the %%1%% files "%%2%%" was merged successfully in memory: the data set now consists %%3%% %%COMMON_LINES%% and %%4%% %%COMMON_COLS%%.
BUILTIN_APPENDDATA_SUCCESS=The data from "%%1%%" was merged successfully with the data in memory: the data set now consists %%2%% %%COMMON_LINES%% and %%3%% %%COMMON_COLS%%.
BUILTIN_REMOVEDATA_CONFIRM=The saved data will removed from memory.$Are you sure? (%%COMMON_YES_NO%%)
BUILTIN_REMOVEDATA_SUCCESS=The memory was freed successfully.
BUILTIN_REMOVEDATA_NO_DATA=The memory is already empty.
BUILTIN_CLEARCACHE_CONFIRM_NOTSAFED=All caches and the automatic backup will be deleted, although they were not saved.$Are you sure? (%%COMMON_YES_NO%%)
BUILTIN_CLEARCACHE_CONFIRM=All caches and the automatic backup will be deleted.$Are you sure? (%%COMMON_YES_NO%%)
BUILTIN_CLEARCACHE_SUCCESS=All caches were removed and the memory was freed successfully.
BUILTIN_CLEARCACHE_EMPTY=The cache is already empty.
BUILTIN_CREDITS_BUILD=Build date
#BUILTIN_CREDITS_VERSIONINFO=Felix BLOCH (1905-1983) war ein schweizerisch-US-amerikanischer Physiker, der 1952 den Nobelpreis für Physik für die Entdeckung der Kernspinresonanz erhielt. Er ist Namensgeber vieler quantenmechanischer Modelle der Festkörperphysik.
BUILTIN_CREDITS_VERSIONINFO=RELEASE CANDIDATE: a Release Candidate doesn't carry a version name. It is not guaranteed that the total current functionality from this Release Candidate will be available in the final stable release. You may influence the further process of the development through writing an e-mail to the upper address. If you find some bugs or a functionality does not possess the desired extent, do not hesitate and notify the developer.
BUILTIN_CREDITS_LICENCE_1=This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
BUILTIN_CREDITS_LICENCE_2=This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
BUILTIN_CREDITS_LICENCE_3=You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
BUILTIN_CREDITS_MEMBERS=Concept/UI: Erik HÄNEL; Mathematical parser: Ingo BERG; Plotting: Alexey BALAKIN; numerical algorithms: GNU Scientific Library; Tokenizer: Boost-Library; Matrix-Algorithmen: Eigen Library; BasicExcel: YAP Chun Wei; TinyXML-2: Lee THOMASON; Testing: D. BAMMERT, J. HÄNEL, R. HUTT, K. KILGUS, E. KLOSTER, K. KURZ, M. LÖCHNER, L. SAHINOVIC, D. SCHMID, V. SEHRA, G. STADELMANN, R. WANNER, F. WUNDER, J. ZINßER
BUILTIN_CREDITS_BUGS_REQUESTS=Bugs and feature requests are welcome at
BUILTIN_CHECKKEYWORD_FIND_CANNOT_READ=Cannot identify the search term.
BUILTIN_CHECKKEYWORD_PLOTPARAMS=Plotting parameters updated.
BUILTIN_CHECKKEYWORD_UNDEF_FAIL=This function does not exist or was not named correctly. See "help define" for further information.
BUILTIN_CHECKKEYWORD_UNDEF_SUCCESS=The function was removed successfully from memory.
BUILTIN_CHECKKEYOWRD_LOAD_ALL_SUCCESS=All data of the %%1%% files "%%2%%" was loaded successfully to memory: the data set consists %%3%% %%COMMON_LINES%% and %%4%% %%COMMON_COLS%%.
BUILTIN_CHECKKEYOWRD_LOAD_ALL_CACHES_SUCCESS=All data of the %%1%% files "%%2%%" was loaded successfully to the corresponding caches in memory.
BUILTIN_CHECKKEYWORD_PASTE_SUCCESS=The data was pasted successfully: the data set now consists %%1%% %%COMMON_LINES%% and %%2%% %%COMMON_COLS%%.
BUILTIN_CHECKKEYWORD_RELOAD_FILE_SUCCESS=The data from "%%1%%" was updated successfully.
BUILTIN_CHECKKEYWORD_RELOAD_SUCCESS=The data was updated successfully.
BUILTIN_CHECKKEYWORD_SAVEDATA_SUCCESS=The data set was saved successfully to "%%1%%".
BUILTIN_CHECKKEYOWRD_STFA_SUCCESS=The STFA data set was created successfully in "%%1%%()".
BUILTIN_CHECKKEYWORD_SORT_SUCCESS=%%COMMON_COLS%% were sorted successfully.
BUILTIN_CHECKKEYWORD_RENAME_CACHE=The cache was renamed successfully to "%%1%%".
BUILTIN_CHECKKEYWORD_SWAP_CACHE=The contents of "%%1%%" and "%%2%%" were swapped successfully.
BUILTIN_CHECKKEYWORD_CLEARSTRINGS_SUCCESS=All strings in the "string()" object were removed and the "string()" object was resetted successfully.
BUILTIN_CHECKKEYWORD_CLEARSTRINGS_EMPTY=No strings were found.
BUILTIN_CHECKKEYWORD_COPYDATA_SUCCESS=The data set was copied successfully.
BUILTIN_CHECKKEYWORD_COPYFILE_SUCCESS=The file "%%1%%" was copied successfully.
BUILTIN_CHECKKEYWORD_COPYFILE_ALL_SUCCESS=The files "%%1%%" were copied successfully.
BUILTIN_CHECKKEYWORD_AUDIO_SUCCESS=The audio file was generated successfully.
BUILTIN_CHECKKEYWORD_SET_GIVEPATH=Enter a path
BUILTIN_CHECKKEYWORD_SET_PATH=File path updated successfully.
BUILTIN_CHECKKEYWORD_SET_PROGRAM=%%1%% declared successfully.
BUILTIN_CHECKKEYWORD_SET_CHANGE_VALUE=%%1%% was adopted successfully.
BUILTIN_CHECKKEYWORD_SET_ENTER_VALUE=Enter %%1%%:
BUILTIN_CHECKKEYWORD_SET_PARSERTEST=In the future, NumeRe will start %%1%% a parser selftest.
BUILTIN_CHECKKEYWORD_SET_MODE=%%1%% is now %%2%%.
BUILTIN_CHECKKEYWORD_DEFAULTFONT=Default font
BUILTIN_CHECKKEYWORD_PRECISION=Precision
BUILTIN_CHECKKEYWORD_DRAFTMODE=Draft mode
BUILTIN_CHECKKEYWORD_EXTENDEDINFO=Extended file information
BUILTIN_CHECKKEYWORD_LOADEMPTYCOLS=Loading of empty columns
BUILTIN_CHECKKEYWORD_LOGFILE=Logging
BUILTIN_CHECKKEYWORD_DEBUGGER=Debugger
BUILTIN_CHECKKEYWORD_COMPACT=Compact table view
BUILTIN_CHECKKEYWORD_GREETING=Greeting
BUILTIN_CHECKKEYWORD_HINTS=Tips and Tricks
BUILTIN_CHECKKEYWORD_ESC_IN_SCRIPTS=ESC key in scripts
BUILTIN_CHECKKEYWORD_CUSTOM_LANG=Custom language
BUILTIN_CHECKKEYWORD_DEFCONTROL=Automatic define control
BUILTIN_CHECKKEYWORD_AUTOSAVE=Interval for automatic backup
BUILTIN_CHECKKEYWORD_BUFFERSIZE=Buffersize
BUILTIN_CHECKKEYWORD_WINDOWSIZE=Windowsize
BUILTIN_CHECKKEYWORD_SCRIPTNAME=Script file name
BUILTIN_CHECKKEYWORD_SET_RESTART_REQUIRED=Setting will be activated after a restart.
BUILTIN_CHECKKEYWORD_SET_DEVMODE_ACTIVE=DEVELOPER MODE will be activated. This mode lists intermediated results to make internal debugging easier. This mode is not recommended for productive usage. A password is required for activating:$(0 for aborting)
BUILTIN_CHECKKEYWORD_SET_DEVMODE_SUCCESS=DEVELOPER MODE activated successfully.
BUILTIN_CHECKKEYWORD_SET_DEVMODE_INACTIVE=DEVELOPER MODE will be deactivated.
BUILTIN_CHECKKEYWORD_START_ERRORTOKEN=Already loaded script
BUILTIN_CHECKKEYWORD_SCRIPTLOAD_SUCCESS=The script "%%1%%" was loaded successfully.
BUILTIN_CHECKKEYWORD_SMOOTH=%%1%% were smoothed successfully.
BUILTIN_CHECKKEYWORD_RETOQUE=%%1%% were retouched successfully.
BUILTIN_CHECKKEYWORD_REGULARIZE=The desired cache was regularized successfully.
BUILTIN_CHECKKEYWORD_REMOVECACHE=Cache(s) %%1%% were removed successfully.
BUILTIN_CHECKKEYWORD_DELETESTRINGS_SUCCESS=The strings in "string(%%1%%)" were removed successfully.
BUILTIN_CHECKKEYWORD_DELETESTRINGS_EMPTY=No strings were found in "string(%%1%%)".
BUILTIN_CHECKKEYWORD_REMOVE_ALL_FILE=The files were removed successfully.
BUILTIN_CHECKKEYWORD_REMOVE_FILE=The file was removed successfully.
BUILTIN_CHECKKEYWORD_RESAMPLE=%%1%% was resampled successfully.
BUILTIN_CHECKKEYWORD_HELP_DEF=See "help define" for further information.
BUILTIN_CHECKKEYWORD_DEF_EMPTY=No functions were defined yet.
BUILTIN_CHECKKEYWORD_DELETE_SUCCESS=Element(s) were deleted successfully.
BUILTIN_CHECKKEYWORD_DELETE_CONFIRM=One or more elements will be deleted irreversibly.$Are you sure? (%%COMMON_YES_NO%%)
BUILTIN_CHECKKEYWORD_DATAGRID_SUCCESS=The datagrid was generated successfully in "%%1%%()".
BUILTIN_AUTOSAVE=Automatic backup
BUILTIN_REMOVEFILE_CONFIRM=The file "%%1%%" will be deleted irreversibly - this cannot be undone.$Are you sure? (%%COMMON_YES_NO%%)
# Layout des Settings-Dialoges
BUILTIN_LISTOPT_SETTINGS=Settings
BUILTIN_LISTOPT_1=NumeRe was configurated with the following parameters:
# Dateipfade
BUILTIN_LISTOPT_2=File paths:
BUILTIN_LISTOPT_3=Save path:           "%%1%%"
BUILTIN_LISTOPT_4=Load path:           "%%1%%"
BUILTIN_LISTOPT_5=Script path:         "%%1%%"
BUILTIN_LISTOPT_6=Procedure path:      "%%1%%"
BUILTIN_LISTOPT_7=Plot path:           "%%1%%"
BUILTIN_LISTOPT_8=Image viewer:        %%1%%
BUILTIN_LISTOPT_9=Text editor:         %%1%%
# Eigentliche Konfiguration
BUILTIN_LISTOPT_10=Program configuration:
BUILTIN_LISTOPT_11=Autosave-Interval:         %%1%% [sec]
BUILTIN_LISTOPT_12=Greeting:                  %%1%%
BUILTIN_LISTOPT_13=Buffersize:                %%1%% %%COMMON_LINES%%
BUILTIN_LISTOPT_14=Color theme:               %%1%%
BUILTIN_LISTOPT_15=Draft mode:                %%1%%
BUILTIN_LISTOPT_16=Extended file information: %%1%%
BUILTIN_LISTOPT_17=ESC in scripts:            %%1%%
BUILTIN_LISTOPT_18=Windowsize:                x=%%1%%, y=%%2%%
BUILTIN_LISTOPT_19=Definition control:        %%1%%
BUILTIN_LISTOPT_20=Compact table view:        %%1%%
BUILTIN_LISTOPT_21=Loading of empty columns:  %%1%%
BUILTIN_LISTOPT_22=Precision:                 %%1%% numbers
BUILTIN_LISTOPT_23=Logging:                   %%1%%
BUILTIN_LISTOPT_24=Fast start:                %%1%%
BUILTIN_LISTOPT_25=Default plot font:         "%%1%%"
BUILTIN_LISTOPT_26=Tips and tricks:           %%1%%
BUILTIN_LISTOPT_27=Custom language:           %%1%%
BUILTIN_LISTOPT_FOOTNOTE=All settings can be changed with the use of "set -OPTION". You may find further information at "help set".
BUILTIN_LISTOPT_NOVIEWER=No viewer declared
# ===================================
BUILTIN_LISTFILES_EXPLORER=File explorer
BUILTIN_LISTFILES_FILTEREDFOR=[filtered for: %%1%%]
BUILTIN_LISTFILES_LOADPATH=Load path
BUILTIN_LISTFILES_SAVEPATH=Save path
BUILTIN_LISTFILES_SCRIPTPATH=Script path
BUILTIN_LISTFILES_PROCPATH=Procedure path
BUILTIN_LISTFILES_PLOTPATH=Plot path
BUILTIN_LISTFILES_WORKPATH=Work path
BUILTIN_LISTFILES_ROOTPATH=Root path
BUILTIN_LISTFILES_CUSTOMPATH=Directory
BUILTIN_LISTFILES_NOFILES=NumeRe could not find any files/directories
BUILTIN_LISTFILES_NODIRS=NumeRe could not find any directories
BUILTIN_LISTFILES_SUMMARY=%%1%% file(s) and %%2%% directories
BUILTIN_LISTFILES_DIR_SUMMARY=%%1%% directories
BUILTIN_NEW_FOLDERCREATED=The folder "%%1%%" was generated successfully.
BUILTIN_NEW_SCRIPTCREATED=The script "%%1%%" was generated successfully.
BUILTIN_NEW_FILECREATED=The file "%%1%%" was generated successfully.
BUILTIN_NEW_ENTERYOURCODE=Enter your commands and expressions here
BUILTIN_NEW_PROCCREATED=The procedure "%%1%%" was generated successfully.
BUILTIN_NEW_PLUGINCREATED=A template for the plugin "%%1%%" was generated successfully in "%%2%%".
# PARSER:
#=====================================
PARSER_FIRSTSTART_INTRO=These were all information you'll need for the first time. Now it's your turn, to get a look into everything. Don't hesitate and try a commando or an expression for yourself!$If there's something going wrong: you'll find help at "help TOPIC" or "find TERMS". And if I don't understand at all, what you want me to do, then I will try to find the matching article in the documentation by myself ...$(Type "quit" to close me)
PARSER_INTRO=Enter an expression or a command ...$(See "help" or "help expression" for further information)
PARSER_STARTINGSCRIPT=Starting script "%%1%%" ...
PARSER_SCRIPT_FINISHED=The execution of the script "%%1%%" was finished successfully.
PARSER_ABORTED=Declaration aborted.
PARSER_PLUGINDELETED=The plugin was removed successfully.
PARSER_PLUGINNOTFOUND=The plugin was not found.
PARSER_CANNOTCREATEPROC=ERROR: Could not write the procedure to a file.
PARSER_RESULTSLOCATEDAT=Results are written in column %%1%% starting with element %%2%%.
# Willkommensdialog:
PARSER_HELP_HEAD=Welcome
PARSER_HELP_INTRO=To operate with NumeRe, you'll have to use textual commands. The following are central commands and very important:
PARSER_HELP_ITEM_1=find TERMS      - Search for TERMS
PARSER_HELP_ITEM_2=help            - Shows the documentation overview
PARSER_HELP_ITEM_3=help TOPIC      - Shows the documentation for the TOPIC. The documentation doesn't care about lower- and uppercase letters
PARSER_HELP_ITEM_4=list -OBJECT    - Lists OBJECT. OBJECT may be written with lower- or uppercase letters
PARSER_HELP_ITEM_5=quit            - Exits NumeRe
PARSER_ADD_VAR_1=New variable "%%1%%" [double]
PARSER_ADD_VAR_2=(Free memory: %%1%% variables)
PARSER_ADD_VAR_ERROR=There is no more free space for variables available.
# PARSERFUNCS:
#======================================
PARSERFUNCS_INTEGRATE_BOUNDARYDEPENDENCE=ERROR: The boundaries must not depend on %%1%%.
PARSERFUNCS_INTEGRATE_BOUNDARYINVALID=ERROR: The boundaries are invalid.
PARSERFUNCS_INTEGRATE_PRECISIONGREATERZERO=ERROR: Precision must not be identical 0.
PARSERFUNCS_INTEGRATE_PRECISIONGREATERINTERVAL=ERROR: The precision must not be larger than the integration interval.
PARSERFUNCS_INTEGRATE_ANALYTICAL=Analytical solution
PARSERFUNCS_INTEGRATE_CONSTANT=Constant function. Calculating integral
PARSERFUNCS_INTEGRATE2_BOUNDARYDEPENDENCE="ERROR: %%1%%-Boundaries must not depend on %%1%% or %%2%%.
PARSERFUNCS_INTEGRATE2_BOUNDARYSELFDEPENDENCE="ERROR: %%1%%-Boundaries must not depend on %%1%% itself.
PARSERFUNCS_INTEGRATE2_SWAPVARS=Swapping %%1%%- and %%2%%-Integration for performance reasons
PARSERFUNCS_LISTFUNC_HEADLINE=Predefined functions
PARSERFUNCS_LISTFUNC_NUM=numerical
PARSERFUNCS_LISTFUNC_STRING=string
PARSERFUNCS_LISTFUNC_TRIGONOMETRIC=trigonometric
PARSERFUNCS_LISTFUNC_HYPERBOLIC=hyperbolic
PARSERFUNCS_LISTFUNC_TIME=time
PARSERFUNCS_LISTFUNC_STATS=statistical
PARSERFUNCS_LISTFUNC_RANDOM=random
PARSERFUNCS_LISTFUNC_PHYSICS=physics
PARSERFUNCS_LISTFUNC_ANGULAR=angular
PARSERFUNCS_LISTFUNC_DISTRIB=distribution
PARSERFUNCS_LISTFUNC_LOGARITHMIC=logarithmic
PARSERFUNCS_LISTFUNC_LOGIC=logical
PARSERFUNCS_LISTFUNC_COORDS=coordinates
PARSERFUNCS_LISTFUNC_POLYNOMIAL=polynomial
# Funktionentabelle
PARSERFUNCS_LISTFUNC_TABLEHEAD=								Function:              Type:  Result:
PARSERFUNCS_LISTFUNC_FUNC_ABS_[NUM]=						abs(x)                 VAL    - Absolute value of x
PARSERFUNCS_LISTFUNC_FUNC_ACOS_[NUM_TRIGONOMETRIC]=			acos(x)                VAL    - Inverse cosine of x. Defined in the range [-1,1] (Synonym: "arccos(x)")
PARSERFUNCS_LISTFUNC_FUNC_ACOSH_[NUM_HYPERBOLIC]=			acosh(x)               VAL    - Inverse hyperbolic cosine of x. Defined in the range [1,inf) (Synonym: "arcosh(x)")
PARSERFUNCS_LISTFUNC_FUNC_AI_[NUM_PHYSICS]=					Ai(x)                  VAL    - Airy function Ai(x). Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_ASIN_[NUM_TRIGONOMETRIC]=			asin(x)                VAL    - Inverse sine of x. Defined in the range [-1,1] (Synonym: "arcsin(x)")
PARSERFUNCS_LISTFUNC_FUNC_ASINH_[NUM_HYPERBOLIC]=			asinh(x)               VAL    - Inverse hyperbolic sine of x. Defined everywhere in R (Synonym: "arsinh(x)")
PARSERFUNCS_LISTFUNC_FUNC_ASCII_[STRING]=					ascii(STRING)          VAL    - Returns the ASCII-Values of the characters in STRING
PARSERFUNCS_LISTFUNC_FUNC_ATAN_[NUM_TRIGONOMETRIC]=			atan(x)                VAL    - Inverse tangent of x. Defined everywhere in R (Synonym: "arctan(x)")
PARSERFUNCS_LISTFUNC_FUNC_ATANH_[NUM_HYPERBOLIC]=			atanh(x)               VAL    - Inverse hyperbolic tangent of x. Defined in the range (-1,1) (Synonym: "artanh(x)")
PARSERFUNCS_LISTFUNC_FUNC_AVG_[NUM_STATS]=					avg(x,y,z,...)         VAL    - Returns the average of x,y,z,...
PARSERFUNCS_LISTFUNC_FUNC_BESSEL_[NUM_PHYSICS]=				bessel(n,x)            VAL    - Bessel function of the first kind with the order n at the point x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_BETHEWEIZSAECKER_[PHYSICS]=		betheweizsaecker(N,Z)  VAL    - Nuclear binding energy of the nuclid (N,Z) in MeV calculated with the Bethe-Weizsäcker mass formula. Defined for N, Z > 0
PARSERFUNCS_LISTFUNC_FUNC_BI_[NUM_PHYSICS]=					Bi(x)                  VAL    - Airy function Bi(x). Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_BINOM_[NUM]=						binom(n,k)             VAL    - Binomial coefficient of n and k. Defined for integral numbers >= 0
PARSERFUNCS_LISTFUNC_FUNC_CHAR_[STRING]=					char(STRING,POS)       STR    - Return the character at the Position POS in STRING
PARSERFUNCS_LISTFUNC_FUNC_CMP_[NUM_STATS]=					cmp(x,y,z,...,CMP,T)   VAL    - Compares the values x,y,z,... with CMP and returns a value corresponding to T = {-2,-1,0,1,2}: T = 0 returns the index of the element, which is equal to CMP. T = -1 returns the index of the largest element, which is smaller than or equal to CMP, T = 1 returns the index of smallest one being larger than or equal to CMP. T = -2 and 2 returns the corresponding values instead of the indices. If no element is found, the function returns "nan". Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_CNT_[NUM_STATS_STRING]=			cnt(x,y,z,...)         VAL    - Returns the number of the elements in its argument (even the invalid ones). May be applied to strings, but returns at least 1 in this case.
PARSERFUNCS_LISTFUNC_FUNC_COS_[NUM_TRIGONOMETRIC]=			cos(x)                 VAL    - Cosine of x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_COSH_[NUM_HYPERBOLIC]=			cosh(x)                VAL    - Hyperbolic cosine of x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_COT_[NUM_TRIGONOMETRIC]=			cot(x)                 VAL    - Cotangent of x. Defined in R \ {n*PI}. n is an integral value.
PARSERFUNCS_LISTFUNC_FUNC_DATE_[TIME]=						date(TIME,TYPE)        VAL    - Formats TIME corresponding to TYPE: TYPE = 0 returns YYYYMMDDhhmmss, TYPE = 1...6 returns YYYY ... ss, TYPE = -1 returns YYYYMMDD and TYPE = -2 returns only hhmmss
PARSERFUNCS_LISTFUNC_FUNC_DBLFACUL_[NUM]=					dblfacul(n)            VAL    - Double faculty of the integral number n [n!! = n*(n-2)*(n-4)*...]. Defined for integral numbers >= 0
PARSERFUNCS_LISTFUNC_FUNC_DEGREE_[NUM_ANGULAR]=				degree(x)              VAL    - Degree value of x [rad]. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_ERF_[NUM_DISTRIB]=				erf(x)                 VAL    - Value of the gaussian error function at the position x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_ERFC_[NUM_DISTRIB]=				erfc(x)                VAL    - Value of the complementary gaussian error function (erfc(x) := 1-erf(x)) at the position x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_EXP_[NUM_LOGARITHMIC]=			exp(x)                 VAL    - Exponential function of x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_FACULTY_[NUM]=					faculty(n)             VAL    - Faculty of the integral number n [n! = n*(n-1)*(n-2)*...*1]. Defined for integral numbers >= 0
PARSERFUNCS_LISTFUNC_FUNC_FINDFILE_[STRING_LOGIC]=			findfile(STRING)       LOG    - Returns true, if the file STRING exists, false otherwise. The file must be passed as a string
PARSERFUNCS_LISTFUNC_FUNC_FINDPARAM_[STRING]=				findparam(PAR,STR,C)   VAL    - Returns the position, where the parameter PAR in the string STR was found, and 0, if PAR was not found. If PAR shall be followed by a special character (e.g. '='), you may pass this character with C, leave it away otherwise. If C is passed, the position will be shifted right corresponding to the number of whitespaces between PAR and C.
PARSERFUNCS_LISTFUNC_FUNC_FLOOR_[NUM]=						floor(x)               VAL    - Rounds x to the nearest lower integral value
PARSERFUNCS_LISTFUNC_FUNC_GAMMA_[NUM_DISTRIB]=				gamma(x)               VAL    - Value of the gamma function at the position x. Defined in R \ {-n, 0}, whereas n is an integral number > 0.
PARSERFUNCS_LISTFUNC_FUNC_GAUSS_[NUM_RANDOM_DISTRIB]=		gauss(x0,x1)           VAL    - Generates a (real and normal distributed) random number, with the distribution parameters average x0 and FWHM x1
PARSERFUNCS_LISTFUNC_FUNC_GCD_[NUM]=						gcd(n,k)               VAL    - Calculates the greatest common divisor of the integral numbers n and k
PARSERFUNCS_LISTFUNC_FUNC_GETFILELIST_[STRING]=				getfilelist(STRIJG,T)  STR    - Returns a list of strings containing all files matching to the naming scheme STRING. STRING may contain additional placeholders or with "|" linked "choose tokens" ("<CHOOSE|TOKEN>"). The function only returns the file names and the extensions of the files without their paths. T is a optional parameter and returns with T = 1 the corresponding paths.
PARSERFUNCS_LISTFUNC_FUNC_GETFOLDERLIST_[STRING]=			getfolderlist(STR,T)   STR    - Returns a list of strings containing all directories matching to the naming scheme STR. STR may contain additional placeholders or with "|" linked "choose tokens" ("<CHOOSE|TOKEN>"). The function only returns the directory names without their paths. T is a optional parameter and returns with T = 1 the corresponding paths.
PARSERFUNCS_LISTFUNC_FUNC_GETINDICES_[STRING]=				getindices(STRING,T)   VAL    - Returns the indices of the as a string passed data object access in the format I1,I2,J1,J2. T is an optional parameter and determines, how the access shall be interpreted: matrix-like (T=0), column- (T=1) or linewise (T=2). Passing T=-1 returns uninterpreted indices: 0 for non-existing and -1 for open interval boundaries. E.g.: getindices("data(5:,3)",-1) = 5,-1,3,0
PARSERFUNCS_LISTFUNC_FUNC_GETMATCHINGPARENTHESIS_[STRING]=	getmatchingparens(STR) VAL    - Returns the position of the closing parenthesis corresponding to the first open parenthesis in the string STR. Note that this applies to brackets and braces as well.
PARSERFUNCS_LISTFUNC_FUNC_GETOPT_[STRING]=					getopt(STRING,POS)     STR    - Returns the value of a parameter in the string STRING, with the first character of the value at position POS (e.g. after "=") as a string. Note that all whitespaces between POS and the actualposition of the value will be ignored.
PARSERFUNCS_LISTFUNC_FUNC_HEAVISIDE_[NUM_DISTRIB]=			heaviside(x)           VAL    - Heaviside (or Theta) function. 0 for x < 0, 1 otherwise. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_HERMITE_[NUM_POLYNOMIAL]=			hermite(n,x)           VAL    - Numerical value of the Hermite polynomial with the order n >= 0 at the position x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_IS_DATA_[STRING_LOGIC]=			is_data(STRING)        LOG    - Returns true, if STRING is a data object, false otherwise
PARSERFUNCS_LISTFUNC_FUNC_IS_NAN_[NUM_LOGIC]=				is_nan(x)              LOG    - Returns true, if x has the value nan, false otherwise
PARSERFUNCS_LISTFUNC_FUNC_IS_STRING_[STRING_LOGIC]=			is_string(EXPR)        LOG    - Returns true, if EXPR contains strings, false otherwise
PARSERFUNCS_LISTFUNC_FUNC_LAGUERRE_[NUM_POLYNOMIAL]=		laguerre(n,x)          VAL    - Numerical value of the Laguerre polynomial with the order n >= 0 at the position x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_LAGUERRE_A_[NUM_POLYNOMIAL]=		laguerre_a(n,k,x)      VAL    - Numerical value of the associate Laguerre polynomial with the orders n >= 0 and k = [0,n] at the position x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_LCM_[NUM]=						lcm(n,k)               VAL    - Calculates the least common multiple of the integral numbers n and k
PARSERFUNCS_LISTFUNC_FUNC_LEGENDRE_[NUM_POLYNOMIAL]=		legendre(n,x)          VAL    - Numerical value of the Legendre polynomial with the order n >= 0 at the position x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_LEGENDRE_A_[NUM_POLYNOMIAL]=		legendre_a(l,m,x)      VAL    - Numerical value of the Legendre polynomial with the orders l >= 0 and m = [-l,l] at the position x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_LN_[NUM_LOGARITHMIC]=				ln(x)                  VAL    - Natural logarithm of x. Defined in the range (0,inf)
PARSERFUNCS_LISTFUNC_FUNC_LOG10_[NUM_LOGARITHMIC]=			log10(x)               VAL    - Logarithm with base 10 of x. Can be passed as 'log(x)'. Defined in the range (0,inf)
PARSERFUNCS_LISTFUNC_FUNC_LOG2_[NUM_LOGARITHMIC]=			log2(x)                VAL    - Logarithm with base 2 of x. Defined in the range (0,inf)
PARSERFUNCS_LISTFUNC_FUNC_MAX_[NUM_STATS_STRING]=			max(x,y,z,...)         ARG    - Returns the maximal value of x,y,z,... Can be applied to strings and uses then string logic
PARSERFUNCS_LISTFUNC_FUNC_MED_[NUM_STATS]=					med(x,y,z,...)         VAL    - Returns the median of x,y,z,...
PARSERFUNCS_LISTFUNC_FUNC_MIN_[NUM_STATS_STRING]=			min(x,y,z,...)         ARG    - Returns the minimal value of x,y,z,... Can be applied to strings and uses then string logic
PARSERFUNCS_LISTFUNC_FUNC_NEUMANN_[NUM_PHYSICS]=			neumann(n,x)           VAL    - Neumann function (Bessel function of the second kind) with the order n at the position x. Defined in R \ {0}
PARSERFUNCS_LISTFUNC_FUNC_NORM_[NUM_STATS_COORDS]=			norm(x,y,z,...)        VAL    - Calculates the euklidian vector norm: ||(x,y,z,...)|| := sqrt(x^2+y^2+z^2+...). Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_NUM_[NUM_STATS]=					num(x,y,z,...)         VAL    - returns the number of valid arguments x,y,z,... Can be applied to strings and counts every non-empty string
PARSERFUNCS_LISTFUNC_FUNC_PCT_[NUM_STATS]=					pct(x,y,z,...,p)       VAL    - p-th percentile of x,y,z,...
PARSERFUNCS_LISTFUNC_FUNC_PHI_[NUM_ANGULAR_COORDS]=			phi(x,y)               VAL    - Calculates the angle between the x axis and the vector (x,y). Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_PRD_[NUM_STATS]=					prd(x,y,z,...)         VAL    - Returns the product of the arguments x,y,z,...
PARSERFUNCS_LISTFUNC_FUNC_RADIAN_[NUM_ANGULAR]=				radian(alpha)          VAL    - Calculates the radians of the angle alpha [Degree]. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_RAND_[NUM_RANDOM_DISTRIB]=		rand(x0,x1)            VAL    - Generates a (real and uniform distributed) random number in the interval [x0,x1)
PARSERFUNCS_LISTFUNC_FUNC_RANGE_[NUM]=						range(VAR,LFT,RGHT)    VAL    - Restricts VAR to the interval [LFT,RGHT]
PARSERFUNCS_LISTFUNC_FUNC_RECT_[NUM_DISTRIB]=				rect(x,x0,x1)          VAL    - Rectangular function: 1 for x in [x0,x1]; 0 otherwise
PARSERFUNCS_LISTFUNC_FUNC_REPEAT_[STRING]=					repeat(STRING,n)       STR    - Returns n copies of STRING
PARSERFUNCS_LISTFUNC_FUNC_REPLACE_[STRING]=					replace(S,P,L,T)       STR    - Replaces L letters starting with the position P in string S with the string T
PARSERFUNCS_LISTFUNC_FUNC_REPLACEALL_[STRING]=				replaceall(S,T,U,P,Q)  STR    - Replaces all occurrences of the second string T in the first string S with the third string U. The variables P and Q are optional values limiting the action to start (P) and end position (Q) in S
PARSERFUNCS_LISTFUNC_FUNC_RINT_[NUM]=						rint(x)                VAL    - Rounds x to the nearest integral value
PARSERFUNCS_LISTFUNC_FUNC_ROOF_[NUM]=						roof(x)                VAL    - Rounds x to the nearest and larger integral number
PARSERFUNCS_LISTFUNC_FUNC_ROUND_[NUM]=						round(x,n)             VAL    - Rounds x to n decimals
PARSERFUNCS_LISTFUNC_FUNC_SBESSEL_[NUM_POLYNOMIAL_PHYSICS]=	sbessel(n,x)           VAL    - Spherical Bessel function of the order n. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_SIGN_[NUM]=						sign(x)                VAL    - Returns the sign of x
PARSERFUNCS_LISTFUNC_FUNC_SIN_[NUM_TRIGONOMETRIC]=			sin(x)                 VAL    - Sine of x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_SINC_[NUM_TRIGONOMETRIC]=			sinc(x)                VAL    - Cardinal sine of x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_SINH_[NUM_HYPERBOLIC]=			sinh(x)                VAL    - Hyperbolic sine of x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_SNEUMANN_[NUM_POLYNOMIAL_PHYSICS]=sneumann(n,x)          VAL    - Spherical Neumann function of the order n. Defined in R \ {0}
PARSERFUNCS_LISTFUNC_FUNC_SPLIT_[STRING]=					split(STRING,CHAR)     STR    - Splits the string STRING at the characters CHAR in separate strings
PARSERFUNCS_LISTFUNC_FUNC_SQRT_[NUM]=						sqrt(x)                VAL    - Square root of x. Defined in the range [0, inf)
PARSERFUNCS_LISTFUNC_FUNC_STD_[NUM_STATS]=					std(x,y,z,...)         VAL    - Returns the standard deviation of x,y,z,...
PARSERFUNCS_LISTFUNC_FUNC_STRFND_[STRING]=					strfnd(STR1,STR2,P)    VAL    - Returns the position of the first occurrence of STR1 in STR2, with the search starting from the position P. P is an optional value with the default value 1. The function returns false, if STR1 is not found.
PARSERFUNCS_LISTFUNC_FUNC_STRING_CAST_[STRING]=				string_cast(EXPR)      STR    - Transforms EXPR directly to a string and ignores possible string expressions (#(EXPR) would calculate the numerical value of EXPR first)
PARSERFUNCS_LISTFUNC_FUNC_STRLEN_[STRING]=					strlen(STRING)         VAL    - Returns the length of the string STRING
PARSERFUNCS_LISTFUNC_FUNC_STRRFND_[STRING]=					strrfnd(STR1,STR2,P)   VAL    - Returns the position of the last occurrence of STR1 in STR2, with the search starting from the position P. P is an optional value with the default value P = strlen(STR2). The function returns false, if STR1 is not found.
PARSERFUNCS_LISTFUNC_FUNC_STUDENT_T_[NUM_DISTRIB_STATS]=	student_t(n,c)         VAL    - Calculates the twosided Student factor t for n measurements and the confidence interval 0 < c < 1
PARSERFUNCS_LISTFUNC_FUNC_SUBSTR_[STRING]=					substr(STRING,n,l)     STR    - Returns l characters starting with the n-th letter from STRING as a new string
PARSERFUNCS_LISTFUNC_FUNC_SUM_[NUM_STATS_STRING]=			sum(x,y,z,...)         ARG    - Sums x,y,z,... Can be applied to strings and will concatenate them
PARSERFUNCS_LISTFUNC_FUNC_TAN_[NUM_TRIGONOMETRIC]=			tan(x)                 VAL    - Tangent of x. Defined in R \ {-n*PI/2, n*PI/2}. n is an integral number > 0.
PARSERFUNCS_LISTFUNC_FUNC_TANH_[NUM_HYPERBOLIC]=			tanh(x)                VAL    - Hyperbolic Tangent of x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_THETA_[NUM_ANGULAR_COORDS]=		theta(x,y,z)           VAL    - Calculates the angle between the z axis and the vector (x,y,z). Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_TIME_[TIME]=						time()                 VAL    - Returns the number of seconds since 1.1.1970
PARSERFUNCS_LISTFUNC_FUNC_TO_CHAR_[STRING]=					to_char(x,y,z,...)     STR    - Interprets x,y,z,... as ASCII-Values and returns their corresponding characters as one string
PARSERFUNCS_LISTFUNC_FUNC_TO_CMD_[STRING]=					to_cmd(STRING)         CMD    - Transforms the passed string STRING to a command expression
PARSERFUNCS_LISTFUNC_FUNC_TO_LOWERCASE_[STRING]=			to_lowercase(STRING)   STR    - Transforms the uppercase letters in STRING to lowercase
PARSERFUNCS_LISTFUNC_FUNC_TO_STRING_[STRING]=				to_string(EXPR)        STR    - Transforms EXPR to a string, if it is not already one (#(EXPR) would calculate the numerical value of EXPR first)
PARSERFUNCS_LISTFUNC_FUNC_TO_UPPERCASE_[STRING]=			to_uppercase(STRING)   STR    - Transforms the lowercase letters in STRING to uppercase
PARSERFUNCS_LISTFUNC_FUNC_TO_VALUE_[STRING]=				to_value(STRING)       VAL    - Evaluates the string STRING and transforms it to a numerical value afterwards
PARSERFUNCS_LISTFUNC_FUNC_VALTOSTR_[STRING]=				valtostr(x,C,n)        VAL    - Evaluates x and transforms it to a string. C is an optional character, inserted before x, to fill it to n characters
PARSERFUNCS_LISTFUNC_FUNC_VERSION_[TIME]=					version()              VAL    - Returns the version number of NumeRe as an integral number: v1.0.8 will be returned as 108
PARSERFUNCS_LISTFUNC_FUNC_Y_[NUM_POLYNOMIAL]=				Y(l,m,theta,phi)       VAL    - Real part of the spherical harmonics with the orders l >= 0 and m = [-l,l] at the angles theta in the interval [0,PI] and phi in the interval [0,2*PI)
# Ende Funktionentabelle
PARSERFUNCS_LISTFUNC_FOOTNOTE1=The type of the return value is indicated schematically via VAL = numerical value, STR = string, LOG = logical value (true or false) and ARG = type of the argument(s).
PARSERFUNCS_LISTFUNC_FOOTNOTE2=Further information concerning the predefined mathematical functions can be found in the NumeRe-Help at "help function".
PARSERFUNCS_LISTDEFINE_HEADLINE=Custom defined functions
PARSERFUNCS_LISTDEFINE_EMPTY=No custom defined functions.
PARSERFUNCS_LISTDEFINE_DESCRIPTION=	Description:     %%1%%
PARSERFUNCS_LISTDEFINE_DEFINITION=	Definition:      %%1%% := %%2%%
PARSERFUNCS_LISTDEFINE_FUNCTIONS=Functions
PARSERFUNCS_LISTLOGICAL_HEADLINE=Logical expressions
PARSERFUNCS_LISTLOGICAL_TABLEHEAD=	Expression:  Result:
PARSERFUNCS_LISTLOGICAL_ITEM01=		A            - TRUE, if A is TRUE, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM02=		!A           - TRUE, if A is FALSE, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM03=		A && B       - TRUE, if A and B are TRUE, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM04=		A || B       - TRUE, if A or B is TRUE, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM05=		A ||| B      - TRUE, if either A or B is TRUE, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM06=		A ? x : y    - if A is TRUE, then x, y otherwise
PARSERFUNCS_LISTLOGICAL_ITEM07=		x & y        - Binary AND
PARSERFUNCS_LISTLOGICAL_ITEM08=		x | y        - Binary OR
PARSERFUNCS_LISTLOGICAL_ITEM09=		x < y        - TRUE, if x is smaller than y, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM10=		x > y        - TRUE, if x is larger than y, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM11=		x <= y       - TRUE, if x is smaller than or equal to y, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM12=		x >= y       - TRUE, if x is larger than or equal to y, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM13=		x == y       - TRUE, if x is equal to y, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM14=		x != y       - TRUE, if x is not equal to y, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_FOOTNOTE1=TRUE corresponds to the value 1, FALSE to 0. Logical expressions can be applied to strings, see "help string". Binary operators compare the bit values directly and may return values not equal to {1,0}.
PARSERFUNCS_LISTLOGICAL_FOOTNOTE2=A concatenation of multiple logical expression should be done with AND and OR operators. Otherwise the result of the previous expression (1 or 0) will be used for evaluating the current one. For example: if you like to check, if the value of the variable x lies in the interval [a,b], you have to check, if the expression "x >= a && x <= b" is TRUE. Of course, this can be achieved easier via "!is_nan(range(x,a,b))"
PARSERFUNCS_LISTVAR_HEADLINE=Defined variables
PARSERFUNCS_LISTVAR_EMPTY=No variables are defined.
PARSERFUNCS_LISTVAR_VARS_AND=Variable(s) and
PARSERFUNCS_LISTVAR_DATATABLES=Data table(s)
PARSERFUNCS_LISTCONST_HEADLINE=Defined constants
PARSERFUNCS_LISTCONST_EMPTY=No constants defined.
PARSERFUNCS_LISTCONST_FOOTNOTE1=The constants are - if applicable - stored in SI units:$[kg, J, K, m, s, A, mol, T]
PARSERFUNCS_LISTCONST_FOOTNOTE2=Special constants/values are "nan" (no real value), "inf" (infinity), "true" (TRUE), "false" (FALSE) and "void" (empty/no value).
PARSERFUNCS_LISTEXPRVAR_HEADLINE=Variables in expression
PARSERFUNCS_LISTEXPRVAR_EMPTY=No expression passed.
PARSERFUNCS_LISTEXPRVAR_EXPR=Expression: %%1%%
PARSERFUNCS_LISTEXPRVAR_NOVARS=Expression doesn't contain any variables.
PARSERFUNCS_LISTEXPRVAR_FOOTNOTE=%%1%% variable(s)
PARSERFUNCS_LISTCMD_HEADLINE=command set
# Kommandotabelle
PARSERFUNCS_LISTCMD_TABLEHEAD=			Befehl:      Syntax:        Funktion:
PARSERFUNCS_LISTCMD_CMD_ABORT=			abort                       - Aborts the declaration of the current loop, clause or plot composition
PARSERFUNCS_LISTCMD_CMD_ABOUT=			about                       - Legal information about NumeRe
PARSERFUNCS_LISTCMD_CMD_APPEND=			append       NM [-PAR]      - Append data files to data already loaded to memory
PARSERFUNCS_LISTCMD_CMD_AUDIO=			audio        OB [-PAR]      - Generates a WAVE audio file from a given data set
PARSERFUNCS_LISTCMD_CMD_BREAK=			break                       - Aborts the execution of a loop
PARSERFUNCS_LISTCMD_CMD_CACHE=			cache        -PAR           - Options applied to the elements in a cache
PARSERFUNCS_LISTCMD_CMD_COMPOSE=		compose                     - Starts the composition of multiple plotting styles
PARSERFUNCS_LISTCMD_CMD_CONT=			cont         EX [-set PAR]  - Generates a contour line plot
PARSERFUNCS_LISTCMD_CMD_CONT3D=			cont3d       EX [-set PAR]  - Generates a 3D contour line plot
PARSERFUNCS_LISTCMD_CMD_CONTINUE=		continue                    - Jumps over the following commands of the current loop execution and starts the next execution
PARSERFUNCS_LISTCMD_CMD_COPY=			copy         OB [-PAR]      - Copies (depending on the actual expression) entries/columns/subtables between data objects or complete files.
PARSERFUNCS_LISTCMD_CMD_DATA=			data         -PAR           - Options applied to the elements of the loaded data file
PARSERFUNCS_LISTCMD_CMD_DATAGRID=		datagrid     EX -PAR        - Generates a data grid
PARSERFUNCS_LISTCMD_CMD_DEFINE=			define       EX [-set PAR]  - Defines custom functions
PARSERFUNCS_LISTCMD_CMD_DELETE=			delete       OB [-PAR]      - Removes elements from a cache
PARSERFUNCS_LISTCMD_CMD_DENS=			dens         EX [-set PAR]  - Generates a density plot
PARSERFUNCS_LISTCMD_CMD_DENS3D=			dens3d       EX [-set PAR]  - Generates a 3D density plot
PARSERFUNCS_LISTCMD_CMD_DIFF=			diff         EX -set PAR    - Calls the function for numerical differentation of a function or a data set
PARSERFUNCS_LISTCMD_CMD_DRAW=			draw         EX [-set PAR]  - Drawing mode.
PARSERFUNCS_LISTCMD_CMD_DRAW3D=			draw3d       EX [-set PAR]  - 3D drawing mode.
PARSERFUNCS_LISTCMD_CMD_EDIT=			edit         OB             - Opens a file or a directory for editing its contents
PARSERFUNCS_LISTCMD_CMD_ELSE=			else                        - Starts the definition of expressions and commands, which shall be executed, if all "if" and "elseif" clauses fail.
PARSERFUNCS_LISTCMD_CMD_ELSEIF=			elseif       EX             - Starts the definition of expressions and commands, which shall be executed, if the previous "if" and "elseif" clauses fail.
PARSERFUNCS_LISTCMD_CMD_ENDCOMPOSE=		endcompose                  - Ends the definition of the previous initiated plot composition
PARSERFUNCS_LISTCMD_CMD_ENDFOR=			endfor       [-PAR]         - Ends the definition of a previous initiated FOR loop
PARSERFUNCS_LISTCMD_CMD_ENDIF=			endif                       - Ends the definition of a previous initiated IF clause
PARSERFUNCS_LISTCMD_CMD_ENDPROCEDURE=	endprocedure                - Ends the definition of a previous initiated NumeRe-Procedure
PARSERFUNCS_LISTCMD_CMD_ENDWHILE=		endwhile     [-PAR]         - Ends the definition of a previous initiated WHILE loop
PARSERFUNCS_LISTCMD_CMD_EVAL=			eval         EX -set PAR    - Calculates function values of the passend Expression at distinct points (samples)
PARSERFUNCS_LISTCMD_CMD_EXPLICIT=		explicit     CMD            - Deactivates all plugins for the current command
PARSERFUNCS_LISTCMD_CMD_EXPORT=			export       OB [-PAR]      - Textual export of the passed data set
PARSERFUNCS_LISTCMD_CMD_EXTREMA=		extrema      EX -set PAR    - Calls the function for the numerical determination of the extrema of the passend expression or data set.
PARSERFUNCS_LISTCMD_CMD_FFT=			fft          OB [-PAR]      - Fourier transform of the passed data set
PARSERFUNCS_LISTCMD_CMD_FIND=			find         NM             - NumeRe keyword search
PARSERFUNCS_LISTCMD_CMD_FIT=			fit          OB -PAR        - Fit functions to data sets via parameters
PARSERFUNCS_LISTCMD_CMD_FITW=			fitw         OB -PAR        - Fit functions to data sets via parameters and concern the additional error values of the data set
PARSERFUNCS_LISTCMD_CMD_FOR=			for          EX             - Starts the definition of a FOR loop.
PARSERFUNCS_LISTCMD_CMD_GET=			get          -PAR           - Returns the current settings of NumeRe
PARSERFUNCS_LISTCMD_CMD_GLOBAL=			global       EX/CMD         - Declares the current expression as global
PARSERFUNCS_LISTCMD_CMD_GRAD=			grad         EX [-set PAR]  - Generates a gradient plot
PARSERFUNCS_LISTCMD_CMD_GRAD3D=			grad3d       EX [-set PAR]  - Generates a 3D gradient plot
PARSERFUNCS_LISTCMD_CMD_HELP=			help         [NM]           - NumeRe documentation
PARSERFUNCS_LISTCMD_CMD_HIST=			hist         OB [-PAR]      - Generates a histogram
PARSERFUNCS_LISTCMD_CMD_HIST2D=			hist2d       OB [-PAR]      - Generates a 2D histogram of a (x,y,z) data set. Expects either a data grid or (x,y,z) tupels
PARSERFUNCS_LISTCMD_CMD_HLINE=			hline        [-PAR]         - Draws a double horizontal line. Using the parameter "-single", this command will only draw one single line
PARSERFUNCS_LISTCMD_CMD_IF=				if           EX             - Starts the definition of an IF clause
PARSERFUNCS_LISTCMD_CMD_IFNDEFINED=		ifndefined   EX [-set PAR]  - Checks before the actual definition, if the current function is not already defined.
PARSERFUNCS_LISTCMD_CMD_INTEGRATE=		integrate    EX -set PAR    - Calls the function for the numerical integration of a function f(x) or f(x,y).
PARSERFUNCS_LISTCMD_CMD_LIST=			list         -PAR           - Lists objects
PARSERFUNCS_LISTCMD_CMD_LOAD=			load         NM [-PAR]      - Loads the data of a file
PARSERFUNCS_LISTCMD_CMD_MATOP=			matop        EX             - Matrix based evaluation of the expression EX. ("mtrxop" is a synonym)
PARSERFUNCS_LISTCMD_CMD_MESH=			mesh         EX [-set PAR]  - Generates a meshgrid plot
PARSERFUNCS_LISTCMD_CMD_MESH3D=			mesh3d       EX [-set PAR]  - Generates a 3D meshgrid plot
PARSERFUNCS_LISTCMD_CMD_MOVE=			move         OB -PAR        - Moves (depending on the actual expression) entries/columns/subtables in caches or complete files.
PARSERFUNCS_LISTCMD_CMD_NAMESPACE=		namespace    [NM]           - Changes the current namespace in procedures
PARSERFUNCS_LISTCMD_CMD_NEW=			new          -PAR           - Generates new directories, scripts, procedures, files and caches
PARSERFUNCS_LISTCMD_CMD_ODESOLVE=		odesolve     EX -set PAR    - Solves the as expression passed differential equations numerical
PARSERFUNCS_LISTCMD_CMD_PLOT=			plot         EX [-set PAR]  - Graphical plotting of functions and data sets
PARSERFUNCS_LISTCMD_CMD_PLOT3D=			plot3d       EX [-set PAR]  - Graphical plotting of three dimensional data sets and trajectories.
PARSERFUNCS_LISTCMD_CMD_PROCEDURE=		procedure    NM             - Defines a NumeRe-Procedure
PARSERFUNCS_LISTCMD_CMD_PROGRESS=		progress     EX [-set PAR]  - Shows a the state of a progress. Only suitable for scripts and procedures
PARSERFUNCS_LISTCMD_CMD_PULSE=			pulse        OB             - Determines the pulse properties of the passed data set.
PARSERFUNCS_LISTCMD_CMD_QUIT=			quit         [-PAR]         - Exits NumeRe
PARSERFUNCS_LISTCMD_CMD_RANDOM=			random       -PAR           - Random number generator with freely choosable distributions
PARSERFUNCS_LISTCMD_CMD_READ=			read         -PAR           - Reads the content of a file and returns it through strings
PARSERFUNCS_LISTCMD_CMD_READLINE=		readline     [-PAR]         - Formatted prompt
PARSERFUNCS_LISTCMD_CMD_REDEFINE=		redefine     EX [-set PAR]  - Redefines an already existing, custom defined function.
PARSERFUNCS_LISTCMD_CMD_REGULARIZE=		regularize   OB [-PAR]      - Regularizes data rows with arbitrary distributed x values.
PARSERFUNCS_LISTCMD_CMD_REMOVE=			remove       OB [-PAR]      - Removes caches or the passed files from this computer irreversibly.
PARSERFUNCS_LISTCMD_CMD_RENAME=			rename       -OB            - Renames an already available cache.
PARSERFUNCS_LISTCMD_CMD_REPLACELINE=	replaceline  STR [-PAR]     - Simple corrections of loops and clauses
PARSERFUNCS_LISTCMD_CMD_RESAMPLE=		resample     OB -PAR        - Resamples data sets (changes the sampling frequency)
PARSERFUNCS_LISTCMD_CMD_RETOQUE=		retoque      OB [-PAR]      - Removes invalid values from data sets
PARSERFUNCS_LISTCMD_CMD_RETURN=			return       [EX]           - Declares the return value of procedures
PARSERFUNCS_LISTCMD_CMD_SAVE=			save         -OB            - Saves the passed object
PARSERFUNCS_LISTCMD_CMD_SCRIPT=			script       -PAR           - Loads and starts scripts
PARSERFUNCS_LISTCMD_CMD_SET=			set          -PAR           - Change the current program setting
PARSERFUNCS_LISTCMD_CMD_SHOW=			show         OB             - Shows the content of the passend data object
PARSERFUNCS_LISTCMD_CMD_SMOOTH=			smooth       OB -PAR        - Smoothes the passed data set by linearizing depending on the requested order.
PARSERFUNCS_LISTCMD_CMD_SORT=			sort         -OB PAR        - Sorts a data set
PARSERFUNCS_LISTCMD_CMD_STATS=			stats        OB [-PAR]      - Calculates the statistics of the passed data set
PARSERFUNCS_LISTCMD_CMD_STFA=			stfa         OB [-PAR]      - Calculates a short-time Fourier analysis of the passed data set
PARSERFUNCS_LISTCMD_CMD_STR=			str                         - Defines the local string variables in the current procedure
PARSERFUNCS_LISTCMD_CMD_SURF=			surf         EX [-set PAR]  - Generates surface plots
PARSERFUNCS_LISTCMD_CMD_SURF3D=			surf3d       EX [-set PAR]  - Generates 3D surface plots
PARSERFUNCS_LISTCMD_CMD_SWAP=			swap         -OB            - Swaps the contents of two caches
PARSERFUNCS_LISTCMD_CMD_TAYLOR=			taylor       EX -set PAR    - Expands the passed expression in a taylor polynomial of the order n.
PARSERFUNCS_LISTCMD_CMD_THROW=			throw        [STR]          - Aborts the procedure definition in case of an error
PARSERFUNCS_LISTCMD_CMD_UNDEFINE=		undefine     EX             - Removes a custom function definition
PARSERFUNCS_LISTCMD_CMD_VAR=			var                         - Defines the local numerical variables in the current procedure
PARSERFUNCS_LISTCMD_CMD_VECT=			vect         EX [-set PAR]  - Generates a vector plot
PARSERFUNCS_LISTCMD_CMD_VECT3D=			vect3d       EX [-set PAR]  - Generates a 3D vector plot
PARSERFUNCS_LISTCMD_CMD_WHILE=			while        EX             - Starts the definition of a WHILE loop
PARSERFUNCS_LISTCMD_CMD_WORKPATH=		workpath     NM             - Changes the current working directory for this session
PARSERFUNCS_LISTCMD_CMD_WRITE=			write        STR -set PAR   - Writes the passed strings to a file
PARSERFUNCS_LISTCMD_CMD_ZEROES=			zeroes       EX -set PAR    - Calls the function for numerical calculation of the intersection with of functions and data sets.
# Ende der Kommandotabelle
PARSERFUNCS_LISTCMD_FOOTNOTE1=The syntax is given in schematic manner: EX = expression, PAR = parameter, OB = (data) object, STR = string, CMD = command und NM = name. Syntax elements in brackets are optional.
PARSERFUNCS_LISTCMD_FOOTNOTE2=SEE ALSO: There exists an entry in the documentation for each of the listed commands. It can be accessed via "help COMMAND".
PARSERFUNCS_LISTUNITS_HEADLINE=Unit conversion
PARSERFUNCS_LISTUNITS_SYMBOL=Symbol
PARSERFUNCS_LISTUNITS_DESCRIPTION=Description
PARSERFUNCS_LISTUNITS_DIMENSION=Dimension
PARSERFUNCS_LISTUNITS_UNIT=Conversion     Unit
PARSERFUNCS_LISTUNITS_UNIT_ANGSTROEM=(Angstroem)
PARSERFUNCS_LISTUNITS_UNIT_ASTRO_UNIT=(Astronom. Unit)
PARSERFUNCS_LISTUNITS_UNIT_BARN=(barn)
PARSERFUNCS_LISTUNITS_UNIT_CALORY=(Calory)
PARSERFUNCS_LISTUNITS_UNIT_CURIE=(Curie)
PARSERFUNCS_LISTUNITS_UNIT_ELECTRONVOLT=(Elektronvolts)
PARSERFUNCS_LISTUNITS_UNIT_FERMI=(Fermi)
PARSERFUNCS_LISTUNITS_UNIT_FOOT=(Foot)
PARSERFUNCS_LISTUNITS_UNIT_GAUSS=(Gauss)
PARSERFUNCS_LISTUNITS_UNIT_INCH=(inch)
PARSERFUNCS_LISTUNITS_UNIT_VELOCITY=(Velocity)
PARSERFUNCS_LISTUNITS_UNIT_KNOTS=(Knots)
PARSERFUNCS_LISTUNITS_UNIT_LITERS=(Litres)
PARSERFUNCS_LISTUNITS_UNIT_LIGHTYEAR=(Lightyear)
PARSERFUNCS_LISTUNITS_UNIT_MILE=(Mile)
PARSERFUNCS_LISTUNITS_UNIT_MOL=(mol. quantity)
PARSERFUNCS_LISTUNITS_UNIT_POISE=(Poise)
PARSERFUNCS_LISTUNITS_UNIT_PARSEC=(Parsec)
PARSERFUNCS_LISTUNITS_UNIT_PSI=(Pounds/inch^2)
PARSERFUNCS_LISTUNITS_UNIT_CELSIUS=(Celsius)
PARSERFUNCS_LISTUNITS_UNIT_FAHRENHEIT=(Fahrenheit)
PARSERFUNCS_LISTUNITS_UNIT_TORR=(mmHg)
PARSERFUNCS_LISTUNITS_UNIT_YARD=(Yard)
PARSERFUNCS_LISTUNITS_FOOTNOTE=The dimensions of the units are given with the abbreviations L, M, T, ... The symbol L corresponds to "length", M to "mass", T to "time", N to "quantity" and Theta to "temperature".
PARSERFUNCS_LISTPLUGINS_HEADLINE=Installed Plugins
PARSERFUNCS_LISTPLUGINS_EMPTY=No Plugins were installed.
PARSERFUNCS_LISTPLUGINS_TABLEHEAD=Command:           Description:
PARSERFUNCS_TAYLOR_MISSINGPARAMS=ERROR: Not all necessary parameters were passed.$See "help taylor" for further information.
PARSERFUNCS_TAYLOR_CONSTEXPR=ERROR: The expression is constant in terms of the variable "%%1%%". It cannot be expanded into a Taylor polynomial.
PARSERFUNCS_TAYLOR_DEFINESTRING=-set comment="Taylor expansion of the expression '%%1%%' at the position %%2%%=%%3%% with the order %%4%%"
PARSERFUNCS_FIT_FITTING=Fitting "%%1%%" ...
PARSERFUNCS_FIT_DEFINECOMMENT=-set comment="Fitted function"
PARSERFUNCS_FIT_CHIMAPLOCATION=The chi^2 map was generated successfully in %%1%%().
PARSERFUNCS_FIT_HEADLINE=Fitting result
PARSERFUNCS_FIT_FUNCTION=Function: %%1%%
PARSERFUNCS_FIT_FITTED_FUNC=Fitted: %%1%%
PARSERFUNCS_FIT_DATASET=Data set: Column(s)
PARSERFUNCS_FIT_FROM=from
PARSERFUNCS_FIT_POINTS_W_ERR=			Data points:                            %%1%% with weighting factors
PARSERFUNCS_FIT_POINTS_WO_ERR=			Data points:                            %%1%% without weighting factors
PARSERFUNCS_FIT_COORD_RESTRICTS=	%%1%% values restricted to:                 [%%2%%,%%3%%]
PARSERFUNCS_FIT_PARAM_RESTRICTS=		Parameter restrictions:                 [%%1%%]
PARSERFUNCS_FIT_FREEDOMS=				Degrees of freedom:                     %%1%%
PARSERFUNCS_FIT_ALGORITHM_SETTINGS=		Parameter for algorithm:                TOL=%%1%%, MAXITER=%%2%%
PARSERFUNCS_FIT_ITERATIONS=				Iterations:                             %%1%%
PARSERFUNCS_FIT_CHI2=					Weighted Sum of the residuals (chi^2):  %%1%%
PARSERFUNCS_FIT_RED_CHI2=				Variance of the residuals (red. chi^2): %%1%%
PARSERFUNCS_FIT_STD_DEV=				Standard deviation of the residuals:    %%1%%
PARSERFUNCS_FIT_LOG_TABLEHEAD1=Parameter      Initial value         Fitted    Calculated standard deviation
PARSERFUNCS_FIT_LOG_TABLEHEAD2=Parameter      Initial value         Fitted        Asymptotic standard error
PARSERFUNCS_FIT_PARAM=Parameter
PARSERFUNCS_FIT_FITTED=Fitted
PARSERFUNCS_FIT_INITIAL=Initial value
PARSERFUNCS_FIT_PARAM_DEV=Calculated standard deviation
PARSERFUNCS_FIT_ASYMPTOTIC_ERROR=Asymptotic standard error
PARSERFUNCS_FIT_CORRELMAT_HEAD=Correlation matrix of the fitted parameters
PARSERFUNCS_FIT_ANALYSIS=Fitting result analysis
PARSERFUNCS_FIT_MAXITER_REACHED=The maximal number of iterations was reached. Most likely, the algorithm returned an incorrect result.
PARSERFUNCS_FIT_GOOD_W_ERROR=The fitted function seems to describe the trend of the data points quite well. The passed weighting factors were appropriately guessed.
PARSERFUNCS_FIT_BETTER_W_ERROR=The fitted function describes the trend of the data points more exact than expected. Either the guesses of the weighting factors are too large or the fitting function was chosen too general (too many fitting parameters/over-fitting).
PARSERFUNCS_FIT_NOT_GOOD_W_ERROR=The fitted function could describe the trend of the data points, but maybe there is some improvement possible. The guesses of the weighting factors are probably too small or strong outliers distort the result.
PARSERFUNCS_FIT_BAD_W_ERROR=The function cannot describe the data points or the fit was quite bad. The chosen model is possibly not suitable for this data set or you used too many parameters or the weighting factors were guessed more than a magnitude too small.
PARSERFUNCS_FIT_GOOD_WO_ERROR=The fitted function seems to describe the trend of the data points quite well.
PARSERFUNCS_FIT_IMPROVABLE_WO_ERROR=The fitted function could describe the trend of the data points, but there is some room for optimisations.
PARSERFUNCS_FIT_NOT_GOOD_WO_ERROR=The fitted function could describe the trend of the data points, but maybe there is some improvement possible. The result gets probably better, if additional guesses for weighting factors are passed to the algorithm.
PARSERFUNCS_FIT_BAD_WO_ERROR=The function cannot describe the data points or the fit was quite bad. The chosen model is possibly not suitable for this data set, strong outliers are distorting the result, or the model may describe the data points only with the usage of large guesses for weighting factors.
PARSERFUNCS_FIT_OVERFITTING=The amount of data points is exactly equal to the number of parameters. Most likely, the fitted function describes the dataset exactly. If this function is a reasonable model, is subject to further discussions.
PARSERFUNCS_FFT_FOURIERTRANSFORMING=Fourier transforming columns %%1%% and %%2%%:$Nyquist boundary frequency is %%3%% Hz ...
PARSERFUNCS_FFT_INVERSE_FOURIERTRANSFORMING=Inverse Fourier transforming columns %%1%% and %%2%%:$Resulting time interval is %%3%% s ...
PARSERFUNCS_PULSE_HEADLINE=Pulse analysis
PARSERFUNCS_PULSE_TABLE_1_MAXAMP=		Maximal amplitude:               %%1%%
PARSERFUNCS_PULSE_TABLE_2_POSMAX=		Position of maximum:             %%1%%
PARSERFUNCS_PULSE_TABLE_3_FWHM=			Full width at half of maximum:   %%1%%
PARSERFUNCS_PULSE_TABLE_4_WIDTHNEARMAX=	Width of the actual pulse:       %%1%%
PARSERFUNCS_PULSE_TABLE_5_ENERGY=		Energy in first pulse:           %%1%%
# MATOP
# =============================
MATOP_SOLVELGSSYMBOLIC_DEFINECOMMENT=-set comment="Solution of the system of linear equations"
# PLOT
# =============================
PLOT_CALCULATING_DATA_FOR=Calculating data for
PLOT_ANIMATION=Animation: Please wait
PLOT_DRAWING=drawing
PLOT_MESHGRID=meshgrid
PLOT_SURFACE=surface
PLOT_CONTOUR=contour
PLOT_GRADIENT=gradient
PLOT_DENSITY=density
PLOT_VECTOR=vector field
PLOT_LOADING_BACKGROUND=Loading background
PLOT_RENDERING_BACKGROUND=Rendering background
PLOT_RENDERING_FRAME=Rendering frame %%1%% out of %%2%%
PLOT_SAVING=Saving
PLOT_SAVE_LOCATION=Saved at: "%%1%%"
# LOOP
# =============================
LOOP_SETCOMMAND_ABORT=Declaration aborted.
LOOP_SUPPLY_BORDERS_AND_VAR=Please supply borders and the corresponding counting variable
LOOP_SUPPLY_FULFILLABLE_CONDITION=Please enter a realizable condition
LOOP_MISSING_COMMAND=No new command was entered.
LOOP_LINE_NOT_EXISTENT=This line does not exist.
# SCRIPT
# =============================
SCRIPT_START_INSTALL=Starting installation
SCRIPT_INSTALL_SUCCESS=Installation was terminated successfully.
SCRIPT_INSTALLING_PROC=Installing "%%1%%" ...
# DEFINE
# =============================
DEFINE_FUNCTION_COMMENTED=The function "%%1%%" was commented successfully.
DEFINE_FUNCTION_NOT_EXISTING=The function "%%1%%" does not exist.
DEFINE_NEW_FUNCTION=This function does not exist. A new function will be defined
DEFINE_NO_SPACE=No more free space for function definitions available. Remove definitions, you're not needing any more, to gain free space.
DEFINE_UNDOING_REDEFINE=The redefinition will be reverted
DEFINE_REDEFINE_SUCCESS=Function "%%1%%" was updated successfully.
DEFINE_NEW_FUNCTION_SUCCESS=Function "%%1%%" was defined successfully.
DEFINE_FREE_SPACE=free memory: %%1%% functions
DEFINE_SAVING_FUNCTIONS=Saving function definitions
DEFINE_ASK_OVERRIDE=All defined functions currently in memory will be overwritten.$Are you sure? (%%COMMON_YES_NO%%)
DEFINE_LOADING_FUNCTIONS=Loading function definitions
DEFINE_DONE_AUTOLOADING=%%COMMON_DONE%% [%%1%% functions].
DEFINE_DONE_LOADING=The definitions for %%1%% function(s) were loaded successfully.
# DOC
# ============================
DOC_HELP_NO_ENTRY_FOUND=No entry was found for the topic "%%1%%". The topic was probably misspelled or the topic does not exist (yet). A synonym or a keyword search with "find %%1%%" may lead to the requested information as well.
DOC_HELP_HTMLEXPORT=A copy of the article "%%1%%" was saved to "%%2%%".
DOC_HELP_HEADLINE=NumeRe Documentation: %%1%%
DOC_HELP_EXAMPLE=EXAMPLE: %%1%%
DOC_SEARCHFCT_DB_ERROR=The keyword search database is damaged. Reinstall NumeRe, to solve this problem. If this doesn't help, address your issue to the developer.
DOC_SEARCHFCT_TABLEHEAD=Relevance:  Search result:
DOC_SEARCHFCT_RESULT=The NumeRe keyword search returned %%1%% hits.
DOC_SEARCHFCT_NO_RESULTS=There was no result for your query "%%1%%". Maybe a synonym can helb you out, or it was simply a typographic error distorting the search algorithm.
DOC_TIPOFTHEDAY_HEADLINE=NUMERE: DID YOU KNOW?  [No. %%1%%/%%2%%]
DOC_FIRSTSTART_HEADLINE_PREFIX=NumeRe: First Start [%%1%% -- Page %%2%%/%%3%%]
DOC_FIRSTSTART_NEXTPAGE=PRESS ENTER TO RESUME / 0+ENTER TO ABORT
# Firststart-DB
DOC_FIRSTSTART_PAGE_1_HEAD=Prelude
DOC_FIRSTSTART_PAGE_1_LINE_1=HELLO AND WELCOME!$I am NumeRe v %%1%%, Framework für Numerische Rechnungen (meaning: framework for numerical calculations), and I'm joyful that I can greet you for the first time!
DOC_FIRSTSTART_PAGE_1_LINE_2=I was designed as a table calculation based purely on the console, but I was optimized for the scientific work. I'm featuring the possibilities to automate predefined processes, generate graphical plots in many different styles and many other things.
DOC_FIRSTSTART_PAGE_1_LINE_3=I will show this introduction only once. If you like to look into it in the future, you can invoke the command "firststart". Apart from this, there is another way to get help: simply enter "help TOPIC", to open my internal documentation about the TOPIC. Leave TOPIC away and you'll get the overview. (Example: "help data")
DOC_FIRSTSTART_PAGE_1_LINE_4=If you cannot find a command or a function, you can use my keyword search: "find TERMS". You may enter multiple terms at once, if you separate them with whitespaces. (Example: "find define function")
DOC_FIRSTSTART_PAGE_1_LINE_5=NOTE: This is only a brief introduction and there is no room for all the subtleties of my syntax. Just look into the documentation articles, which I will name in the following, if you got stuck somewhere, or look into the online reference: <https://sites.google.com/site/numereframework/onlinereferenz>
DOC_FIRSTSTART_PAGE_1_LINE_6=HINT: It seems that this my first start onto your system. Therefore you may have noticed that I passed an extensive selftest. If you don't like this, enter "set -faststart" after this introduction (or at any later time).
# ------------------------
DOC_FIRSTSTART_PAGE_2_HEAD=Input & output
DOC_FIRSTSTART_PAGE_2_LINE_1=Because I'm a framework for numerical calculations, I'm especially good at the evaluation of numerical expressions. You can enter the expression, which I shall evaluate, exactly the way you would enter them into a pocket calculator. The only difference is that I'm capable of using variables and that whitespaces are not of great interest. (Example: "5*23*x + 2*x^2 - 15*cos(2)")
DOC_FIRSTSTART_PAGE_2_LINE_2=You don't need to declare these variables in advance. I'll recognize variables just in the moment, in which they are passed, and will store them in my memory. Although you don't need to care about this, you should keep in mind that new variables always contain the value 0.
DOC_FIRSTSTART_PAGE_2_LINE_3=Your variable names may contain letters, underscores and numbers, but they must not begin with a number. (E.g.: "x", "x0", "_var_value", ...)
DOC_FIRSTSTART_PAGE_2_LINE_4=The numerical value, which I calculate, will printed in the next line as "ans = VALUE". This value will be stored in the special variable "ans" as well so that you can directly resume your calculations with this value.
DOC_FIRSTSTART_PAGE_2_LINE_5=I'm capable of numerical differentation and integration, as well as searching for extrema or intersections with 0. You'll find the necessary commands at "list -cmd".
DOC_FIRSTSTART_PAGE_2_LINE_6=HINT: You'll find further information at "help expression", "help var", "help integrate", "help diff", "help extrema" and "help zeroes"
# ------------------------
DOC_FIRSTSTART_PAGE_3_HEAD=Customize & improve NumeRe
DOC_FIRSTSTART_PAGE_3_LINE_1=My default settings were of course chosen quite reasonable, but you may have some other work flow and therefore you would like to change my settings. You can use the command "set":$set -SETTING=VALUE$to customize my settings. (Some settings only have the values 1 or 0, others have explicit values and the last group contains strings. You'll find the names of the settings in the corresponding documentation article.)
DOC_FIRSTSTART_PAGE_3_LINE_2=To read my settings, you can invoke the command "get" (get -SETTING) and, to list all settings at once, just enter "list -settings".
DOC_FIRSTSTART_PAGE_3_LINE_3=Probably you may think that I have some issue or that I'm missing some great feature. If this is the case, then don't hesitate. My developer is always thankful for detected bugs, change requests and other ideas. Either write him an email at <numere.developer@gmail.com> or enter your request in the ticket system: <https://sourceforge.net/p/numere/tickets/>
DOC_FIRSTSTART_PAGE_3_LINE_4=HINT: You'll find further information at "help set", "help get" and "about"
# ------------------------
DOC_FIRSTSTART_PAGE_4_HEAD=Data files
DOC_FIRSTSTART_PAGE_4_LINE_1=Previously I mentioned some features, which I'd like to present in the following lines. We'll begin with the actions that can be applied to data files:
DOC_FIRSTSTART_PAGE_4_LINE_2=Every data set, which I will process, will be interpreted as a table. Tables in textual files, such as *.dat or*.txt files, can be loaded to memory with the command "load FILE", in which FILE is the file name of the data set. If there are some comments in the file, these must be escaped with an "#" at the beginning of their lines. Either dots or commas can be used as decimal separators (even both in the same file) and the columns have to be separated by either at least a whitespaces or a tabulator sign. (Example: "load samples/data")
DOC_FIRSTSTART_PAGE_4_LINE_3=Additionally I can extract the table from a CASSY(R)-LABX file, evaluate its data and export it into a *.dat file. I understand also Comma Separated Value files (*.csv), JCAMP-DX files (*.dx), IGOR Binary Waves (*.ibw) and OpenDocument Spreadsheets (*.ods). I use the additional "NumeRe data file" file format (*.ndat) as the default saving file type, although this file is a binary file type and can only be read by me. If you like to, then I can export the data to a text file, too.
DOC_FIRSTSTART_PAGE_4_LINE_4=I can apply a straightforward and fast analysis of the loaded data set. If you type "stats data()", then I'll calculate the statistics of the data, and if you enter "hist data()", then I'll calculate a histogram of the data, each based on the columns of the table. Custom or more extensive evaluations can be done, if you enter the equations directly. The data points can be accessed by the syntax "data(LINE,COLUMN)". (Example: "7*exp(data(12,3)^2)")
DOC_FIRSTSTART_PAGE_4_LINE_5=HINT: You'll find further information at "help data", "help load", "help stats" and "help hist"
# ------------------------
DOC_FIRSTSTART_PAGE_5_HEAD=Plotting
DOC_FIRSTSTART_PAGE_5_LINE_1=I have a versatile plotting algorithm, which allows to generate a graphical representation of functions and datasets in many different variants.
DOC_FIRSTSTART_PAGE_5_LINE_2=I can generate simple 1D plots (e.g. of f(x) = sin(x)), if you enter "plot FUNCTION -set OPTIONS". Herein you have to replace FUNCTION with the function expression and OPTIONS with the desired plot options. Instead of a function expression you may pass a data set. (Example: "plot sin(x) -set [-_pi:_pi]" or "plot data(:,1:3) -set yerrorbars")
DOC_FIRSTSTART_PAGE_5_LINE_3=You can obtain 2D plots of functions according z = f(x,y) or data grids through the commands "mesh", "surf", "dens" or "cont". (E.g. "surf exp(-norm(x,y)^2/5) -set [-5:5,-5:5] light")
DOC_FIRSTSTART_PAGE_5_LINE_4=I can generate 3D plots of trajectories or scalar fields (Phi = Phi(x,y,z)), if you append "3d" to the current command (e.g. "surf3d").
DOC_FIRSTSTART_PAGE_5_LINE_5=Vector fields can be obtained with "vect" and "vect3d", respectively. (Example: "vect -y, x -set [-5:5,-5:5]")
DOC_FIRSTSTART_PAGE_5_LINE_6=The plots I generate can have differents levels of quality: as default I choose the middle level, which is an good compromise between speed and quality. If you like to have high quality, then pass the option "hires". The lower level (called "draft mode") has to be activated via settings. Enter "set -draftmode=1", if you want to use it.
DOC_FIRSTSTART_PAGE_5_LINE_7=HINT: You'll find further information at "help plot", "help plotoptions", "help plot3d", "help mesh", "help mesh3d", "help vect" and "help vect3d"
# ------------------------
DOC_FIRSTSTART_PAGE_6_HEAD=Automating, scripts & procedures
DOC_FIRSTSTART_PAGE_6_LINE_1=As I mentioned before, I can automate predefined sequences of commands and expressions. To achieve this, I grant you simple programming functions, which you may use at running time or you can outsource them in a so-called "NumeRe script" (*.nscr).
DOC_FIRSTSTART_PAGE_6_LINE_2=This functions (flow controls) are the counting (FOR) loop, the conditioned (WHILE) loop and the conditioned fork (IF clause). These controls own similar features like their pendants in usual programming languages such as C/C++.
DOC_FIRSTSTART_PAGE_6_LINE_3=Scripts can be startet by invoking the command "start SCRIPT", in which SCRIPT has to be replaced by the file name of the corresponding script. If a script is startet, I'll execute every line that I find in this file separately. You should find some example scripts in my subdirectory "samples", if you have chosen this option during installation. If you like, you may test "start samples/sample" afterwards.
DOC_FIRSTSTART_PAGE_6_LINE_4=You can obtain the greatest possible flexibility by using my integrated interpreter, which is capable of executing complex automatisms, so-called "NumeRe procedures" (*.nprc). You can use these procedures, to develop a whole subprogram  running in my framework. Although the varity of the executable functions in these procedures may appear quite limited, they will be constantly extended.
DOC_FIRSTSTART_PAGE_6_LINE_5=HINT: You'll find further information at "help for", "help while", "help if", "help script" and "help procedure"
# ------------------------
DOC_FIRSTSTART_PAGE_7_HEAD=Functions
DOC_FIRSTSTART_PAGE_7_LINE_1=In addition, I own a great number of predefined functions, constants and unit coversions. I can list them for you, if you enter "list -func" for the functions, "list -const" for the constants and "list -units" for unit conversions.
DOC_FIRSTSTART_PAGE_7_LINE_2=You may define your own functions, which you may use just like the predefined functions. In advance you have to declare, what your functions shall do. The necessary function definition is done by invoking "define FUNCTIONNAME(ARGUMENTS) := FUNCTIONEXPRESSION(ARGUMENTS)", e.g. through "define f(x,y) := cos(x)+sin(y)"
DOC_FIRSTSTART_PAGE_7_LINE_3=HINT: You'll find further information at "help func" and "help define"
# DOCHELPER
# =================================
DOCHELPER_KEYWORDS_AND_ARTICLES=Keywords and linked articles in this documentation
DOCHELPER_KEYWORDS_AND_ARTICLES_NUMBERS=%%1%% Keywords and %%2%% articles
# ODESOLVER
# =================================
ODESOLVER_SOLVE_SYSTEM=Solving ODE system
# OUTPUT
# =================================
OUTPUT_PRINT_INACCESSIBLE1=ATTENTION: IRRECOVERABLE ERROR
OUTPUT_PRINT_INACCESSIBLE2=In the file
OUTPUT_PRINT_INACCESSIBLE3=cannot be written.
OUTPUT_PRINT_INACCESSIBLE4=The output is redirected to the console.
OUTPUT_FORMAT_SUMMARY=%%1%% %%COMMON_COLS%% and %%2%% %%COMMON_LINES%% [%%3%% elements]
OUTPUT_FORMAT_SUMMARY_FILE=A table with %%1%% elements was written successfully to the file "%%2%%".
OUTPUT_FORMAT_ASK_FILEOUT=Shall a copy be saved to a file? (%%COMMON_YES_NO%%)
OUTPUT_FORMAT_ASK_FILENAME=A copy will be generated.$Choose a file name, enter 0 for the default.
OUTPUT_FORMAT_CONFIRMDEFAULT=Default %%COMMON_FILENAME%% was chosen.
OUTPUT_FORMAT_NOFILECREATED=No copy has been generated.
OUTPUT_FORMAT_TEX_HEAD=Table generated with: %%1%%
OUTPUT_FORMAT_TEXLONG_CAPTION=Continuation
OUTPUT_FORMAT_TEXLONG_FOOT=Continued on the next page
OUTPUT_FORMAT_COMMENTLINE=Generated with: %%1%%
OUTPUT_PRINTLEGAL_LINE1=This dataset was generated with
OUTPUT_PRINTLEGAL_LINE2=Version: %%1%%, Build: %%2%%
OUTPUT_PRINTLEGAL_LINE3=Sourcecode and program: (c) %%1%%, Erik Hänel et al., licenced through GNU GPL v3.0
OUTPUT_PRINTLEGAL_LINE4=This file was created on %%1%%
OUTPUT_PRINTLEGAL_TEX=(Commenting style and formatting are optimized for TeX. The booktabs, the longtable and the multirow package are prerequisites, if applicable.)
OUTPUT_PRINTLEGAL_STD=(Commenting style and formatting are optimized for Gnuplot.)
# HIST
# ================================
HIST_HEADLINE=Histogram
HIST_ONLY_CACHE=Only the cache contains data points. These will be used.
HIST_ASK_DATASET=There is data in the cache as well as in the data object. Which shall be used? (c/d)$(0 to abort)
HIST_CONFIRM_DATASET=The loaded data out of %%COMMON_FILETYPE_DAT%% "%%1%%" will be used.
HIST_GENERATING_DATASETS=%%1%% histogram data sets will be generated.
HIST_ASK_BINWIDTH=How wide shall the bins be?
HIST_OUT_COMMENTLINE=The bins name always the middle of their interval. The allover minimal value is %%1%%, the maximal is %%2%%. The width of each interval is %%3%%.
HIST_OUT_COMMENTLINE2D=The bins name always the middle of their interval. The allover minimal x value is %%1%%, the maximal is %%2%%. The width of each x interval is %%3%%. The minimal y value is %%4%%, the maximal is %%5%%. The width of each y interval is %%6%%.
HIST_OUT_PLGNINFO=Histogram (v %%1%%) using the data rows %%2%%-%%3%% out of %%4%%
HIST_GENERATING_PLOT=Generating graphical representation
HIST_SAVED_AT=Saved at "%%1%%"
# RANDOM
# ================================
RANDOM_RESERVING_MEM=Reserving memory
RANDOM_SUCCESS=%%1%% %%2%% random numbers have been written successfully to the cache.
RANDOM_DISTRIB_TYPE_GAUSS=normal distributed
RANDOM_DISTRIB_TYPE_POISSON=poisson distributed
RANDOM_DISTRIB_TYPE_GAMMA=gamma distributed
RANDOM_DISTRIB_TYPE_UNIFORM=uniform distributed
RANDOM_DISTRIB_TYPE_BINOMIAL=binomial distributed
RANDOM_DISTRIB_TYPE_STUDENT=student-t distributed
# STATS_OUT_COMMENTLINE
# ================================
STATS_HEADLINE=Statistics
STATS_TYPE_AVG=Avg
STATS_TYPE_STD=+/-
STATS_TYPE_CONFINT=CnfInt
STATS_TYPE_STDERR=StdErr
STATS_TYPE_MED=Med
STATS_TYPE_RMS=RMS
STATS_TYPE_SKEW=Skew
STATS_TYPE_EXCESS=Exc
STATS_OUT_PLGNINFO=Statistics (v %%1%%) using the data out of %%2%%
STATS_OUT_COMMENTLINE=Legend: %%STATS_TYPE_AVG%% = average, %%STATS_TYPE_STD%% = standard deviation, %%STATS_TYPE_CONFINT%% = percentage in confidence interval, %%STATS_TYPE_STDERR%% = standard error, %%STATS_TYPE_MED%% = Median, Q1 = lower quartile, Q3 = upper quartile, %%STATS_TYPE_RMS%% = root mean square, %%STATS_TYPE_SKEW%% = Skewness, %%STATS_TYPE_EXCESS%% = Excess, min = Minimum, max = Maximum, num = number of elements, cnt = number of lines, s_t = Student factor
# SETTINGS
# ===============================
SETTINGS_SAVE_SUCCESS=Configuration was saved successfully.
# TOOLS
# ===============================
TOOLS_TIMESTAMP_AT=at
# PROC
# ===============================
PROC_NAMESPACE_THISFILE_MESSAGE=Following procedures are implicit 'private'.
PROC_ADDED_DATE=Added
PROC_END_OF_PROCEDURE=End of procedure
PROC_FOOTER=NumeRe: Framework für Numerische Rechnungen | Free numerical software licenced under GNU GPL v3
# CACHE
# ===============================
CACHE_WARNING_CMD_OVERLAP=WARNING: "%%1%%" matches with a built-in command. "%%1%%" may be used in numerical expressions, but not as a command expression.$(Many commands on data sets exist in a inverted writing)
CACHE_WARNING_PLUGIN_OVERLAP=WARNING: "%%1%%" matches with a plugin command. "%%1%%" may be used in numerical expressions, but not as a command expression.$(Many commands on data sets exist in a inverted writing)
# DATA
# ===============================
DATA_PASTE_HEADLINE=Paste data
DATA_PASTE_DESCRIPTION=Paste you data here (Either directly with the "paste" option of the context menue, or by linewise entering of the values. This mode will be closed, if you enter "endpaste".):
DATA_COULD_NOT_IDENTIFY_PASTED_CONTENT=The pasted content could not be identified as a table containing numerical values.
DATA_OPENCSV_COLUMNSEPARATOR_NOTFOUND=The column separator of this CSV file could not be identified. Please choose and enter the separator from the following exemplary lines:
DATA_OPENCSV_SEPARATOR=Separator: "%%1%%"
DATA_OPENCSV_SEPARATOR_WHITESPACE=Separator: Whitespace
DATA_OPENFILE_TABLEHEADINGS=NOTE: There were comment lines found. Do they contain table headings? (%%COMMON_YES_NO%%)
DATA_OPENFILE_LISTING_COMMENTS=Listing the found comment lines
DATA_OPENFILE_ENTERNUMBER=Please enter the number of the line with the desired headings or enter 0 to abort:
DATA_OPENFILE_LINEDOESNTEXIST=NOTE: This line doesn't exist. Please make a new choice:$(There were %%1%% comment lines found)
DATA_OPENFILE_REPLACING_HEADS=NOTE: The headings could not be identified correctly. Automatic headings will be created.
DATA_OPENFILE_AUTOMATIC_HEADS=Automatic headings will be created. They may be modified afterwards.
DATA_OPENFILE_ENTER_HEADINGS=Do you want to enter table headings? (%%COMMON_YES_NO%%)
DATA_OPENFILE_ENTERYOURHEADS=Please enter the headings. Whitespaces will be replaced automatically with "_".
DATA_OPENFILE_HEADFORCOLUMN=Table heading for column %%1%%:
DATA_OPENFILE_OVERWRITE_DATA=The memory is already blocked with the data of the file "%%1%%". Shall the exisiting data be overwritten? (%%COMMON_YES_NO%%)
