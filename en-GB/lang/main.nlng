#
# NumeRe: Framework für Numerische Rechnungen
# Copyright (C) 2018  Erik Haenel et al.
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ========================================================================
# LANGUAGE FILE: main.nlng
# LANGUAGE: en-GB
#
# COMMON:
# =================================
COMMON_CANCEL=CANCEL
COMMON_YES_NO=y/n
COMMON_WITH=with
COMMON_WITHOUT=without
COMMON_ACTIVE=active
COMMON_INACTIVE=inactive
COMMON_LINES=line(s)
COMMON_LINE=line
COMMON_COLS=column(s)
COMMON_COL=column
COMMON_WARNING=Warning
COMMON_SUCCESS=Success
COMMON_FAILURE=Failure
COMMON_DONE=Done
COMMON_EVALUATING=Evaluating
COMMON_COEFFICIENT=Coefficient
COMMON_LEVEL=Level
COMMON_FREQUENCY=Frequency
COMMON_AMPLITUDE=Amplitude
COMMON_PHASE=Phase
COMMON_TIME=Time
COMMON_SIGNAL=Signal
COMMON_PROCEDURE=Procedure
COMMON_FILENAME=Filename
COMMON_FILETYPE_NOEXT=File
COMMON_FILETYPE_DAT=Data file
COMMON_FILETYPE_NSCR=NumeRe script
COMMON_FILETYPE_NHLP=NumeRe help file
COMMON_FILETYPE_NLYT=NumeRe layout file
COMMON_FILETYPE_NLNG=NumeRe language file
COMMON_FILETYPE_HLPIDX=Documentation index
COMMON_FILETYPE_LABX=CASSYLab file
COMMON_FILETYPE_JDX=JCAMP-DX spectrum
COMMON_FILETYPE_IBW=IGOR Binary Waves
COMMON_FILETYPE_PNG=PNG bitmap
COMMON_FILETYPE_PDF=PDF document
COMMON_FILETYPE_TEX=TeX source
COMMON_FILETYPE_EPS=EPS vector graphic
COMMON_FILETYPE_GIF=GIF bitmap
COMMON_FILETYPE_SVG=SVG vector graphic
COMMON_FILETYPE_TIF=Tagged Image File Format
COMMON_FILETYPE_TIFF=%%COMMON_FILETYPE_TIF%%
COMMON_FILETYPE_JPG=JPEG image
COMMON_FILETYPE_JPEG=%%COMMON_FILETYPE_JPG%%
COMMON_FILETYPE_ZIP=ZIP archive
COMMON_FILETYPE_DLL=Application library
COMMON_FILETYPE_EXE=Application
COMMON_FILETYPE_INI=Configuration file
COMMON_FILETYPE_TXT=Text file
COMMON_FILETYPE_DEF=Definition file
COMMON_FILETYPE_CSV=Comma Separated Values
COMMON_FILETYPE_BACK=Config backup
COMMON_FILETYPE_CACHE=NumeRe cache
COMMON_FILETYPE_NDAT=NumeRe data file
COMMON_FILETYPE_NPRC=NumeRe procedure
COMMON_FILETYPE_NDB=NumeRe database
COMMON_FILETYPE_LOG=Log file
COMMON_FILETYPE_VFM=Font file
COMMON_FILETYPE_PLUGINS=Plugin information
COMMON_FILETYPE_ODS=OpenDoc spreadsheet
COMMON_FILETYPE_XLS=Excel (97-2003) sheet
COMMON_FILETYPE_XLSX=Excel workbook
COMMON_FILETYPE_WAV=WAVE audio file
COMMON_FILETYPE_M=MATLAB file
COMMON_FILETYPE_CPP=C++ source file
COMMON_FILETYPE_CXX=%%COMMON_FILETYPE_CPP%%
COMMON_FILETYPE_C=C source file
COMMON_FILETYPE_HPP=C++ header file
COMMON_FILETYPE_HXX=%%COMMON_FILETYPE_HPP%%
COMMON_FILETYPE_H=C header file
COMMON_FILETYPE_DOT=Graphviz DOT file
COMMON_FUNCTION_DEPRECATED=This function is deprecated and will be removed in the future.
COMMON_COMMAND_DEPRECATED=This command is deprecated and will be removed in the future.
COMMON_SYNTAX_DEPRECATED=This syntax is deprecated and will not be supported in the future.
# MAIN:
# =================================
MAIN_LOADING_CMDLINE=Processing command line parameters
MAIN_LOADING_PARSER_SELFTEST=Initializing parser selftest
MAIN_LOADING_IOSTREAM=Starting I/O stream
MAIN_LOADING_PLUGINS=Loading plugin information
MAIN_LOADING_FONT=Loading font face "%%1%%" for graph
MAIN_LOADING_AUTOSAVE_SEARCH=Searching for automatic backups
MAIN_LOADING_AUTOSAVE_FOUND=Backup found.
MAIN_LOADING_AUTOSAVE_NOT_FOUND=No backup found.
MAIN_LOADING_AUTOSAVE=Loading automatic backup
MAIN_LOADING_AUTOSAVE_ERROR_LOADING=ERROR: Could not load the automatic backup.
MAIN_LOADING_AUTOSAVE_ERROR_SAVING=ERROR: Could not save the automatic backup.
MAIN_LOADING_AUTOSAVE_TRANSLATING=Parsing to new file format
MAIN_LOADING_USER_INTERFACE=Starting NumeRe user interface
MAIN_LOADING_COLORTHEME=Activating color theme
MAIN_LOADING_COLORTHEME_ERROR=ERROR: Could not load the color theme.
MAIN_ABOUT_NBR=About: see "about"
MAIN_BYE_NBR=See you later!
MAIN_UNSAVED_CACHE=There are unsaved elements in memory. Shall they be saved? (%%COMMON_YES_NO%%)
MAIN_CACHE_SAVED=Memory was saved successfully.
MAIN_QUIT=NumeRe v %%1%% was terminated successfully.
# BUILTIN:
# =================================
BUILTIN_LOADDATA_ENTER_NAME=Please enter a filename of the data file. If no file path is supplied, the file will be searched in the directory "%%1%%".$(0 for aborting)
BUILTIN_LOADDATA_ASK_APPEND=ERROR: The memory is already blocked with the data of the file "%%1%%". Shall the new data be appended to the existing data table? (%%COMMON_YES_NO%%)$(0 for aborting)
BUILTIN_LOADDATA_ASK_OVERRIDE=The data won't be appended. Shall the existing table be overwritten? (%%COMMON_YES_NO%%)
BUILTIN_LOADDATA_SUCCESS=The data from "%%1%%" was successfully loaded into memory: the data set consists %%2%% %%COMMON_LINES%% and %%3%% %%COMMON_COLS%%.
BUILTIN_APPENDDATA_ALL_SUCCESS=All data of the %%1%% files "%%2%%" was successfully merged in memory: the data set now consists %%3%% %%COMMON_LINES%% and %%4%% %%COMMON_COLS%%.
BUILTIN_APPENDDATA_SUCCESS=The data from "%%1%%" was successfully merged with the data in memory: the data set now consists %%2%% %%COMMON_LINES%% and %%3%% %%COMMON_COLS%%.
BUILTIN_REMOVEDATA_CONFIRM=The saved data will be removed from memory.$Are you sure? (%%COMMON_YES_NO%%)
BUILTIN_REMOVEDATA_SUCCESS=The memory was freed successfully.
BUILTIN_REMOVEDATA_NO_DATA=The memory is already empty.
BUILTIN_CLEARCACHE_CONFIRM_NOTSAFED=All tables and the automatic backup will be deleted, although they were not saved.$Are you sure? (%%COMMON_YES_NO%%)
BUILTIN_CLEARCACHE_CONFIRM=All tables and the automatic backup will be deleted.$Are you sure? (%%COMMON_YES_NO%%)
BUILTIN_CLEARCACHE_SUCCESS=All tables were removed and the memory was freed successfully.
BUILTIN_CLEARCACHE_EMPTY=There are no tables available, which may by deleted.
BUILTIN_CREDITS_BUILD=Build date
# BUILTIN_CREDITS_VERSIONINFO=PIERRE CURIE (1859-1906) was a French physicist and Nobel Prize winner. His achievements are the discovery of piezoelectricity and the temperature dependence of ferromagnets. Together with his wife Maria Sklodowska Curie and Henri Becquerel he received the Nobel Prize for their work on radioactivity.
BUILTIN_CREDITS_VERSIONINFO=RELEASE CANDIDATE: a Release Candidate doesn't carry a version name. It is not guaranteed that the total current functionality from this Release Candidate will be available in the final stable release. You may influence the further process of the development through writing an e-mail to the upper address. If you find some bugs or a functionality does not possess the desired extent, do not hesitate and notify the developer.
BUILTIN_CREDITS_LICENCE_1=This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
BUILTIN_CREDITS_LICENCE_2=This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
BUILTIN_CREDITS_LICENCE_3=You should have received a copy of the GNU General Public License along with this program.  If not, see http://www.gnu.org/licenses/
BUILTIN_CREDITS_MEMBERS=Concept/UI: Erik HÄNEL; Mathematical parser: Ingo BERG; Plotting: Alexey BALAKIN; numerical algorithms: GNU Scientific Library; Tokenizer: Boost-Library; Matrix-Algorithmen: Eigen Library; BasicExcel: YAP Chun Wei; TinyXML-2: Lee THOMASON; Splines: Tino KLUGE; Testing: D. BAMMERT, J. HÄNEL, R. HUTT, K. KILGUS, E. KLOSTER, K. KURZ, M. LÖCHNER, A. RAVEENDRAN, L. SAHINOVIC, D. SCHMID, V. SEHRA, G. STADELMANN, R. WANNER, F. WUNDER, J. ZINßER
BUILTIN_CREDITS_BUGS_REQUESTS=Bugs and feature requests are welcome at
BUILTIN_CHECKKEYWORD_FIND_CANNOT_READ=Cannot identify the search term.
BUILTIN_CHECKKEYWORD_PLOTPARAMS=Plotting parameters updated.
BUILTIN_CHECKKEYWORD_UNDEF_FAIL=The function "%%1%%" does not exist or was not named correctly. See "help define" for further information.
BUILTIN_CHECKKEYWORD_UNDEF_SUCCESS=The function(s) "%%1%%" was/were successfully removed from memory.
BUILTIN_CHECKKEYOWRD_LOAD_ALL_SUCCESS=All data of the %%1%% files "%%2%%" was successfully loaded into memory: the data set consists %%3%% %%COMMON_LINES%% and %%4%% %%COMMON_COLS%%.
BUILTIN_CHECKKEYOWRD_LOAD_ALL_CACHES_SUCCESS=All data of the %%1%% files "%%2%%" was successfully loaded to the corresponding tables in memory.
BUILTIN_CHECKKEYWORD_PASTE_SUCCESS=The data was pasted successfully: the data set now consists %%1%% %%COMMON_LINES%% and %%2%% %%COMMON_COLS%%.
BUILTIN_CHECKKEYWORD_RELOAD_FILE_SUCCESS=The data from "%%1%%" was updated successfully.
BUILTIN_CHECKKEYWORD_RELOAD_SUCCESS=The data was updated successfully.
BUILTIN_CHECKKEYWORD_SAVEDATA_SUCCESS=The data set was successfully saved to "%%1%%".
BUILTIN_CHECKKEYOWRD_STFA_SUCCESS=The STFA data set was successfully created in "%%1%%()".
BUILTIN_CHECKKEYWORD_SORT_SUCCESS=%%COMMON_COLS%% were sorted successfully.
BUILTIN_CHECKKEYWORD_RENAME_CACHE=The table was successfully renamed to "%%1%%".
BUILTIN_CHECKKEYWORD_SWAP_CACHE=The contents of "%%1%%" and "%%2%%" were swapped successfully.
BUILTIN_CHECKKEYWORD_CLEARSTRINGS_SUCCESS=All strings in the "string()" object were removed and the "string()" object was resetted successfully.
BUILTIN_CHECKKEYWORD_CLEARSTRINGS_EMPTY=No strings were found.
BUILTIN_CHECKKEYWORD_COPYDATA_SUCCESS=The data set was copied successfully.
BUILTIN_CHECKKEYWORD_COPYFILE_SUCCESS=The file "%%1%%" was copied successfully.
BUILTIN_CHECKKEYWORD_COPYFILE_ALL_SUCCESS=The files "%%1%%" were copied successfully.
BUILTIN_CHECKKEYWORD_MOVEDATA_SUCCESS=The data set was moved successfully.
BUILTIN_CHECKKEYWORD_MOVEFILE_SUCCESS=The file "%%1%%" was moved successfully.
BUILTIN_CHECKKEYWORD_MOVEFILE_ALL_SUCCESS=The files "%%1%%" were moved successfully.
BUILTIN_CHECKKEYWORD_AUDIO_SUCCESS=The audio file was created successfully.
BUILTIN_CHECKKEYWORD_SET_GIVEPATH=Enter a path
BUILTIN_CHECKKEYWORD_SET_PATH=File path updated successfully.
BUILTIN_CHECKKEYWORD_SET_PROGRAM=%%1%% declared successfully.
BUILTIN_CHECKKEYWORD_SET_CHANGE_VALUE=%%1%% was adopted successfully.
BUILTIN_CHECKKEYWORD_SET_ENTER_VALUE=Enter %%1%%:
BUILTIN_CHECKKEYWORD_SET_PARSERTEST=In the future, NumeRe will start %%1%% a parser selftest.
BUILTIN_CHECKKEYWORD_SET_MODE=%%1%% is now %%2%%.
BUILTIN_CHECKKEYWORD_DEFAULTFONT=Default font
BUILTIN_CHECKKEYWORD_PRECISION=Precision
BUILTIN_CHECKKEYWORD_DRAFTMODE=Draft mode
BUILTIN_CHECKKEYWORD_EXTENDEDINFO=Extended file information
BUILTIN_CHECKKEYWORD_LOADEMPTYCOLS=Loading of empty columns
BUILTIN_CHECKKEYWORD_LOGFILE=Logging
BUILTIN_CHECKKEYWORD_DEBUGGER=Debugger
BUILTIN_CHECKKEYWORD_COMPACT=Compact table view
BUILTIN_CHECKKEYWORD_GREETING=Greeting
BUILTIN_CHECKKEYWORD_HINTS=Tips and Tricks
BUILTIN_CHECKKEYWORD_ESC_IN_SCRIPTS=ESC key in scripts
BUILTIN_CHECKKEYWORD_CUSTOM_LANG=Custom language
BUILTIN_CHECKKEYWORD_DOC_VIEWER=Documentation in external window
BUILTIN_CHECKKEYWORD_DEFCONTROL=Automatic define control
BUILTIN_CHECKKEYWORD_AUTOSAVE=Interval for automatic backup
BUILTIN_CHECKKEYWORD_BUFFERSIZE=Buffersize
BUILTIN_CHECKKEYWORD_WINDOWSIZE=Windowsize
BUILTIN_CHECKKEYWORD_SCRIPTNAME=Script filename
BUILTIN_CHECKKEYWORD_SET_RESTART_REQUIRED=Setting will be activated after a restart.
BUILTIN_CHECKKEYWORD_SET_DEVMODE_ACTIVE=DEVELOPER MODE will be activated. This mode lists intermediated results to make internal debugging easier. This mode is not recommended for productive usage. A password is required for activating:$(0 for aborting)
BUILTIN_CHECKKEYWORD_SET_DEVMODE_SUCCESS=DEVELOPER MODE was activated successfully.
BUILTIN_CHECKKEYWORD_SET_DEVMODE_INACTIVE=DEVELOPER MODE will be deactivated.
BUILTIN_CHECKKEYWORD_START_ERRORTOKEN=Already loaded script
BUILTIN_CHECKKEYWORD_SCRIPTLOAD_SUCCESS=The script "%%1%%" was loaded successfully.
BUILTIN_CHECKKEYWORD_SMOOTH=%%1%% was smoothed successfully.
BUILTIN_CHECKKEYWORD_RETOQUE=%%1%% were retouched successfully.
BUILTIN_CHECKKEYWORD_REGULARIZE=The data in the table was regularized successfully.
BUILTIN_CHECKKEYWORD_REMOVECACHE=Table(s) %%1%% were removed successfully.
BUILTIN_CHECKKEYWORD_DELETESTRINGS_SUCCESS=The strings in "string(%%1%%)" were removed successfully.
BUILTIN_CHECKKEYWORD_DELETESTRINGS_EMPTY=No strings were found in "string(%%1%%)".
BUILTIN_CHECKKEYWORD_REMOVE_ALL_FILE=The files were removed successfully.
BUILTIN_CHECKKEYWORD_REMOVE_FILE=The file was removed successfully.
BUILTIN_CHECKKEYWORD_RESAMPLE=%%1%% was resampled successfully.
BUILTIN_CHECKKEYWORD_HELP_DEF=See "help define" for further information.
BUILTIN_CHECKKEYWORD_DEF_EMPTY=No functions were defined yet.
BUILTIN_CHECKKEYWORD_DELETE_SUCCESS=Element(s) were deleted successfully.
BUILTIN_CHECKKEYWORD_DELETE_CONFIRM=One or more elements will be deleted irreversibly.$Are you sure? (%%COMMON_YES_NO%%)
BUILTIN_CHECKKEYWORD_DATAGRID_SUCCESS=The datagrid was successfully created in "%%1%%()".
BUILTIN_CHECKKEYWORD_DETECT_SUCCESS=The detected structures were stored in "%%1%%()".
BUILTIN_CHECKKEYWORD_ROTATETABLE_WARN_AXES_NOT_PRESERVED=The ratio of the axes to that of their respective intervals does not match. It is possible that the axes are not preserved or calculated erroneously during rotation.
BUILTIN_CHECKKEYWORD_ROTATETABLE_SUCCESS=The rotated data was stored in "%%1%%()".
BUILTIN_AUTOSAVE=Automatic backup
BUILTIN_REMOVEFILE_CONFIRM=The file "%%1%%" will be deleted irreversibly - this cannot be undone.$Are you sure? (%%COMMON_YES_NO%%)
# Layout des Settings-Dialoges
BUILTIN_LISTOPT_SETTINGS=Settings
BUILTIN_LISTOPT_1=NumeRe was configured with the following parameters:
# Dateipfade
BUILTIN_LISTOPT_2=File paths:
BUILTIN_LISTOPT_3=Save path:           "%%1%%"
BUILTIN_LISTOPT_4=Load path:           "%%1%%"
BUILTIN_LISTOPT_5=Script path:         "%%1%%"
BUILTIN_LISTOPT_6=Procedure path:      "%%1%%"
BUILTIN_LISTOPT_7=Plot path:           "%%1%%"
BUILTIN_LISTOPT_8=Image viewer:        %%1%%
BUILTIN_LISTOPT_9=Text editor:         %%1%%
# Eigentliche Konfiguration
BUILTIN_LISTOPT_10=Program configuration:
BUILTIN_LISTOPT_11=Autosave-Interval:         %%1%% [sec]
BUILTIN_LISTOPT_12=Greeting:                  %%1%%
BUILTIN_LISTOPT_13=Buffersize:                %%1%% %%COMMON_LINES%%
BUILTIN_LISTOPT_14=Color theme:               %%1%%
BUILTIN_LISTOPT_15=Draft mode:                %%1%%
BUILTIN_LISTOPT_16=Extended file information: %%1%%
BUILTIN_LISTOPT_17=ESC in scripts:            %%1%%
BUILTIN_LISTOPT_18=Windowsize:                x=%%1%%, y=%%2%%
BUILTIN_LISTOPT_19=Definition control:        %%1%%
BUILTIN_LISTOPT_20=Compact table view:        %%1%%
BUILTIN_LISTOPT_21=Loading of empty columns:  %%1%%
BUILTIN_LISTOPT_22=Precision:                 %%1%% numbers
BUILTIN_LISTOPT_23=Logging:                   %%1%%
BUILTIN_LISTOPT_24=Fast start:                %%1%%
BUILTIN_LISTOPT_25=Default plot font:         "%%1%%"
BUILTIN_LISTOPT_26=Tips and tricks:           %%1%%
BUILTIN_LISTOPT_27=Custom language:           %%1%%
BUILTIN_LISTOPT_28=External windows:          %%1%%
BUILTIN_LISTOPT_FOOTNOTE=All settings can be changed with the use of "set -OPTION". You may find further information at "help set".
BUILTIN_LISTOPT_NOVIEWER=No viewer declared
# ===================================
BUILTIN_LISTFILES_EXPLORER=File explorer
BUILTIN_LISTFILES_FILTEREDFOR=[filtered for: %%1%%]
BUILTIN_LISTFILES_LOADPATH=Load path
BUILTIN_LISTFILES_SAVEPATH=Save path
BUILTIN_LISTFILES_SCRIPTPATH=Script path
BUILTIN_LISTFILES_PROCPATH=Procedure path
BUILTIN_LISTFILES_PLOTPATH=Plot path
BUILTIN_LISTFILES_WORKPATH=Work path
BUILTIN_LISTFILES_ROOTPATH=Root path
BUILTIN_LISTFILES_CUSTOMPATH=Directory
BUILTIN_LISTFILES_NOFILES=NumeRe could not find any files/directories
BUILTIN_LISTFILES_NODIRS=NumeRe could not find any directories
BUILTIN_LISTFILES_SUMMARY=%%1%% file(s) and %%2%% directory(ies)
BUILTIN_LISTFILES_DIR_SUMMARY=%%1%% directory(ies)
BUILTIN_NEW_FOLDERCREATED=The folder "%%1%%" was created successfully.
BUILTIN_NEW_SCRIPTCREATED=The script "%%1%%" was created successfully.
BUILTIN_NEW_FILECREATED=The file "%%1%%" was created successfully.
BUILTIN_NEW_ENTERYOURCODE=Enter your commands and expressions here
BUILTIN_NEW_PROCCREATED=The procedure "%%1%%" was created successfully.
BUILTIN_NEW_PLUGINCREATED=A template for the plugin "%%1%%" was successfully created in "%%2%%".
BUILTIN_NEW_CACHES=%%1%% was/were successfully created as table(s).
BUILTIN_NEW_FREE_CACHES=%%1%% was/were successfully created as free table(s).
BUILTIN_WAITINGFOREDIT=Waiting for edit
# PARSER:
#=====================================
PARSER_FIRSTSTART_INTRO=This is enough information, which you'll need for the first time. Now it's your turn, to get a look into everything. Don't hesitate and try a commando or an expression for yourself!$If there's something going wrong: you'll find help at "help TOPIC" or "find TERMS". And if I don't understand at all, what you want me to do, then I will try to find the matching article in the documentation by myself ...$(Type "quit" to close me)
PARSER_INTRO=Enter an expression or a command ...$(See "help" or "help expression" for further information)
PARSER_STARTINGSCRIPT=Starting script "%%1%%" ...
PARSER_SCRIPT_FINISHED=The execution of the script "%%1%%" was finished successfully.
PARSER_ABORTED=Declaration aborted.
PARSER_PLUGINDELETED=The plugin was removed successfully.
PARSER_PLUGINNOTFOUND=The plugin was not found.
PARSER_CANNOTCREATEPROC=ERROR: Could not write the procedure to a file.
PARSER_RESULTSLOCATEDAT=Results are written in column %%1%% starting with element %%2%%.
# Willkommensdialog:
PARSER_HELP_HEAD=Welcome
PARSER_HELP_INTRO=To operate with NumeRe, you'll have to use textual commands. The most use- and helpful commands are the following:
PARSER_HELP_ITEM_1=find TERMS      - Search for TERMS
PARSER_HELP_ITEM_2=help            - Shows the documentation overview
PARSER_HELP_ITEM_3=help TOPIC      - Shows the documentation for the TOPIC. The documentation doesn't care about lower- and uppercase letters
PARSER_HELP_ITEM_4=list -OBJECT    - Lists OBJECT. OBJECT may be written with lower- or uppercase letters
PARSER_HELP_ITEM_5=quit            - Exits NumeRe
PARSER_ADD_VAR_1=New variable "%%1%%" [double]
PARSER_ADD_VAR_2=(Free memory: %%1%% variables)
PARSER_ADD_VAR_ERROR=There is no more free space for variables available.
# PARSERFUNCS:
#======================================
PARSERFUNCS_INTEGRATE_BOUNDARYDEPENDENCE=ERROR: The boundaries must not depend on %%1%%.
PARSERFUNCS_INTEGRATE_BOUNDARYINVALID=ERROR: The boundaries are invalid.
PARSERFUNCS_INTEGRATE_PRECISIONGREATERZERO=ERROR: Precision must not be identical to 0.
PARSERFUNCS_INTEGRATE_PRECISIONGREATERINTERVAL=ERROR: The precision must not be larger than the integration interval.
PARSERFUNCS_INTEGRATE_ANALYTICAL=Analytical solution
PARSERFUNCS_INTEGRATE_CONSTANT=Constant function. Calculating integral
PARSERFUNCS_INTEGRATE2_BOUNDARYDEPENDENCE=ERROR: %%1%%-Boundaries must not depend on %%1%% or %%2%%.
PARSERFUNCS_INTEGRATE2_BOUNDARYSELFDEPENDENCE=ERROR: %%1%%-Boundaries must not depend on %%1%% itself.
PARSERFUNCS_INTEGRATE2_SWAPVARS=Swapping %%1%%- and %%2%%-Integration for performance reasons
PARSERFUNCS_LISTFUNC_HEADLINE=Predefined functions
PARSERFUNCS_LISTFUNC_TYPE_NUM=Numerics
PARSERFUNCS_LISTFUNC_TYPE_MAT=Matrix and vector
PARSERFUNCS_LISTFUNC_TYPE_TRIGONOMETRIC=Trigonometry
PARSERFUNCS_LISTFUNC_TYPE_HYPERBOLIC=Hyperbolic functions
PARSERFUNCS_LISTFUNC_TYPE_POLYNOMIAL=Polynomials
PARSERFUNCS_LISTFUNC_TYPE_STATS=Statistics
PARSERFUNCS_LISTFUNC_TYPE_STRING=String
PARSERFUNCS_LISTFUNC_TYPE_LOGIC=Logic
PARSERFUNCS_LISTFUNC_TYPE_TIME=Time
PARSERFUNCS_LISTFUNC_TYPE_RANDOM=Random
PARSERFUNCS_LISTFUNC_TYPE_PHYSICS=Physics
PARSERFUNCS_LISTFUNC_TYPE_ANGULAR=Angles
PARSERFUNCS_LISTFUNC_TYPE_DISTRIB=Distributions
PARSERFUNCS_LISTFUNC_TYPE_LOGARITHMIC=Logarithms
PARSERFUNCS_LISTFUNC_TYPE_COORDS=Coordinates
PARSERFUNCS_LISTFUNC_TYPE_DRAW=Drawings
PARSERFUNCS_LISTFUNC_TYPE_DEFINE=Custom Definitions
PARSERFUNCS_LISTFUNC_TYPE_GUI=Graphical user interfaces
# Funktionentabelle
PARSERFUNCS_LISTFUNC_FUNC_ABS_[NUM]=						abs(x)                                       VAL      - Absolute value of x
PARSERFUNCS_LISTFUNC_FUNC_ACOSH_[NUM_HYPERBOLIC]=			acosh(x)                                     VAL      - Inverse hyperbolic cosine of x. Defined in the range [1,inf) (Synonym: "arcosh(x)")
PARSERFUNCS_LISTFUNC_FUNC_ACOS_[NUM_TRIGONOMETRIC]=			acos(x)                                      VAL      - Inverse cosine of x. Defined in the range [-1,1] (Synonym: "arccos(x)")
PARSERFUNCS_LISTFUNC_FUNC_AI_[NUM_PHYSICS]=					Ai(x)                                        VAL      - Airy function Ai(x). Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_AND_[LOGIC]=						and(x,y,z,...)                               LOG      - Connects its arguments using the "&&" operator
PARSERFUNCS_LISTFUNC_FUNC_ARCV_[DRAW]=						arcv(P,[D,]D,a,STYLE)                        {}       - Draws an arc with the angle a around the point P starting from point P+D. The optional direction D defines the normal vector, the default is the z axis. The orientation of the arc is counter-clockwise. The style of the arc may be modified with STYLE.
PARSERFUNCS_LISTFUNC_FUNC_ARC_[DRAW]=						arc(P,[D,]P,a,STYLE)                         {}       - Draws an arc with the angle a around the point P starting from point P. The optional direction D defines the normal vector, the default is the z axis. The orientation of the arc is counter-clockwise. The style of the arc may be modified with STYLE.
PARSERFUNCS_LISTFUNC_FUNC_ASCII_[STRING]=					ascii(sToParse)                             {VAL}     - Returns the ASCII values of the characters in sToParse
PARSERFUNCS_LISTFUNC_FUNC_ASINH_[NUM_HYPERBOLIC]=			asinh(x)                                     VAL      - Inverse hyperbolic sine of x. Defined everywhere in R (Synonym: "arsinh(x)")
PARSERFUNCS_LISTFUNC_FUNC_ASIN_[NUM_TRIGONOMETRIC]=			asin(x)                                      VAL      - Inverse sine of x. Defined in the range [-1,1] (Synonym: "arcsin(x)")
PARSERFUNCS_LISTFUNC_FUNC_ATANH_[NUM_HYPERBOLIC]=			atanh(x)                                     VAL      - Inverse hyperbolic tangent of x. Defined in the range (-1,1) (Synonym: "artanh(x)")
PARSERFUNCS_LISTFUNC_FUNC_ATAN_[NUM_TRIGONOMETRIC]=			atan(x)                                      VAL      - Inverse tangent of x. Defined everywhere in R (Synonym: "arctan(x)")
PARSERFUNCS_LISTFUNC_FUNC_AVG_[STATS]=						avg(x,y,z,...)                               VAL      - Returns the average of x,y,z,...
PARSERFUNCS_LISTFUNC_FUNC_BASETODEC_[STRING]=				basetodec(sBase,sBaseVal)                    VAL      - Converts the number sBaseVal (given as a string) from base sBase to decimal and returns it as a numeric value. As values for the base exist "hex" for hexadecimal, "oct" for octal and "bin" for binary
PARSERFUNCS_LISTFUNC_FUNC_BESSEL_[NUM_PHYSICS]=				bessel(n,x)                                  VAL      - Bessel function of the first kind with the order n at the point x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_BETA_[NUM]=					    beta(x,y)                                    VAL      - Calculates the value of the beta function of x and y with x,y from R \ {-n}
PARSERFUNCS_LISTFUNC_FUNC_BETHEWEIZSAECKER_[PHYSICS]=		betheweizsaecker(N,Z)                        VAL      - Nuclear binding energy of the nuclid (N,Z) in MeV calculated with the Bethe-Weizsäcker mass formula. Defined for N, Z > 0
PARSERFUNCS_LISTFUNC_FUNC_BINOM_[NUM]=						binom(n,k)                                   VAL      - Binomial coefficient of n and k. Defined for integral numbers >= 0
PARSERFUNCS_LISTFUNC_FUNC_BI_[NUM_PHYSICS]=					Bi(x)                                        VAL      - Airy function Bi(x). Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_CARTTOCYL_[MAT_COORDS]=			carttocyl(MAT)                               MAT      - Converts the two or three columns of the matrix MAT from cartesian (x,y,z) to cylindrical coordinates (rho,phi,z). Requires the matop mode
PARSERFUNCS_LISTFUNC_FUNC_CARTTOPOL_[MAT_COORDS]=			carttopol(MAT)                               MAT      - Converts the two or three columns of the matrix MAT from cartesian (x,y,z) to polar coordinates (rho,phi,theta). Requires the matop mode
PARSERFUNCS_LISTFUNC_FUNC_CHAR_[STRING]=					char(sStr,nPos)                              STR      - Return the character at the position nPos in sStr
PARSERFUNCS_LISTFUNC_FUNC_CIRCLE_[DRAW]=					circle(P,r,STYLE)                            {}       - Draws a circle around the point P with the radius r. The filling and the style of the circle may be modified using STYLE. polygon() with n >= 30 generates similar results and allows "tilting" of the circle.
PARSERFUNCS_LISTFUNC_FUNC_CL2_[NUM]=					    Cl2(x)                                       VAL      - Calculates the value of the Clausen function at the location x, where x is in R
PARSERFUNCS_LISTFUNC_FUNC_CLOCK_[TIME]=						clock()                                      VAL      - Returns the number of processor clicks since the startu-up of NumeRe. The duration of a click depends on the hardware, mostly it's a milli second
PARSERFUNCS_LISTFUNC_FUNC_CMP_[STATS]=						cmp(x,y,z,...,CMP,T)                         VAL      - Compares the values x,y,z,... with CMP and returns a value corresponding to T = {-4,-3,-2,-1,0,1,2,3,4}: T = 0 returns the index of the element, which is equal to CMP. T = -1 returns the index of the largest element, which is smaller than or equal to CMP, T = 1 returns the index of smallest one being larger than or equal to CMP. T = -2 and 2 returns the corresponding values instead of the indices. T = -3 or T = 3 returns the indices and T = -4 and T = 4 returns the values for the first element, which is smaller-equal or larger-equal, respectively. If no element is found, the function returns "nan". Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_CNT_[STATS_STRING]=				cnt(x,y,z,...)                               VAL      - Returns the number of elements in its argument (even the invalid ones). May be applied to strings, but returns at least 1 in this case.
PARSERFUNCS_LISTFUNC_FUNC_CONEV_[DRAW]=						conev(P,D,r,r,STYLE)                         {}       - Draws a cone shell with the radius r going from P to P+D. Using the second radius r will truncate the cone. Top and bottom faces will be displayed by passing @to STYLE. Passing 4, 6 or 8 to STYLE will draw a 4, 6 or 8 sided (truncated) pyramid instead of the cone.
PARSERFUNCS_LISTFUNC_FUNC_CONE_[DRAW]=						cone(P,P,r,r,STYLE)                          {}       - Draws a cone shell with the radius r going from P to P. Using the second radius r will truncate the cone. Top and bottom faces will be displayed by passing @to STYLE. Passing 4, 6 or 8 to STYLE will draw a 4, 6 or 8 sided (truncated) pyramid instead of the cone.
PARSERFUNCS_LISTFUNC_FUNC_COORDSTOGRID_[MAT_COORDS]=		coordstogrid(MAT,MAT)                        MAT      - Maps the one or two columns of the second matrix into the grid coordinates of the first matrix: x -> idx or (x,y) -> (row,col), where the calculated grid coordinates are also floating point values. This can be used to interpolate values from the associated data grid, e.g. with 'interpolate(grid,coords)'. Requires the matop mode
PARSERFUNCS_LISTFUNC_FUNC_CORREL_[MAT]=						correl(MAT,MAT)                              MAT      - Calculates the correlation matrix of the both arguments. If the arguments do not have equal dimensions, their rows and columns are padded with zeros. If both arguments are equal, the auto-correlation matrix is calculated. The resulting matrix does have the dimensions 2n-1 x 2m-1, whereas the element MAT(n+1,m+1) corresponds to the zero-shift correlation
PARSERFUNCS_LISTFUNC_FUNC_COSH_[NUM_HYPERBOLIC]=			cosh(x)                                      VAL      - Hyperbolic cosine of x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_COS_[NUM_TRIGONOMETRIC]=			cos(x)                                       VAL      - Cosine of x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_COT_[NUM_TRIGONOMETRIC]=			cot(x)                                       VAL      - Cotangent of x. Defined in R \ {n*PI}. n is an integral value.
PARSERFUNCS_LISTFUNC_FUNC_COVAR_[MAT]=						covar(MAT,MAT)                               VAL      - Calculates the covariance of the both arguments. The arguments must have equal dimensions
PARSERFUNCS_LISTFUNC_FUNC_CROSS_[MAT]=						cross(MAT)                                   VEC      - Calculates the n dimensional cross product (vector product) of the vectors, which form the n-1 columns of the matrix MAT.
PARSERFUNCS_LISTFUNC_FUNC_CUBOID_[DRAW]=					cuboid(P,D,D,D,STYLE)                        {}       - This function allows the display of a parallelepiped: displays a cube with the lower left edge at P, which marks the origin of the body-owned coordinate system. The direction D defines the x direction of the body. The y direction will be chosen orthogonal, leaving the z coordinate as it was. The z direction will be calculated out of the other two. If a second direction was passed, then this defines the y direction of the body and the z direction will be calculated. You'll obtain a real parallelepiped, if you define all three directions.
PARSERFUNCS_LISTFUNC_FUNC_CURVE_[DRAW]=						curve(P,D,P,D,STYLE)                         {}       - Draws a "bezier" line from P to P. The direction vectors D determine the corresponding curvature of the curve. Please note that the coordinate system at the second point will be rotated by 180 degrees (additional signs are probably needed for the second direction vector). Color, shape and line endings may be modified using STYLE.
PARSERFUNCS_LISTFUNC_FUNC_CYLTOCART_[MAT_COORDS]=			cyltocart(MAT)                               MAT      - Converts the two or three columns of the matrix MAT from cylindrical (rho,phi,z) to cartesian coordinates (x,y,z). Requires the matop mode
PARSERFUNCS_LISTFUNC_FUNC_CYLTOPOL_[MAT_COORDS]=			cyltopol(MAT)                                MAT      - Converts the two or three columns of the matrix MAT from cylindrical (rho,phi,z) to cylindrical coordinates (rho,phi,z). Requires the matop mode
PARSERFUNCS_LISTFUNC_FUNC_DATE_[TIME]=						date(nTimeVal,nType)                         VAL      - Formats nTimeVal corresponding to nType: nType = 0 returns YYYYMMDDhhmmss, nType = 1...6 returns YYYY ... ss, nType = -1 returns YYYYMMDD and nType = -2 returns only hhmmss
PARSERFUNCS_LISTFUNC_FUNC_DBLFACT_[NUM]=					dblfact(n)                                   VAL      - Calculates the double factorial of the integral number n [n!! = n*(n-2)*(n-4)*...]. Defined for integral numbers >= 0
PARSERFUNCS_LISTFUNC_FUNC_DECTOBASE_[STRING]=				dectobase(sBase,nDecVal)                     STR      - Converts the number nDecVal from the decimal system to the base and returns the result as a string. As values for the base exist "hex" for hexadecimal, "oct" for octal and "bin" for binary
PARSERFUNCS_LISTFUNC_FUNC_DEGREE_[ANGULAR]=					degree(x)                                    VAL      - Degree value of x [rad]. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_DET_[MAT]=						det(MAT)                                     VAL      - Calculates the determinant of the matrix MAT, if MAT is a square matrix.
PARSERFUNCS_LISTFUNC_FUNC_DIAGONALIZE_[MAT]=				diagonalize(MAT)                             MAT      - Diagonalizes the square matrix MAT. If the calculated diagonal elements should be complex, then a n x 2n matrix will be returned with the real parts in the first and the imaginary parts in the second part of the columns.
PARSERFUNCS_LISTFUNC_FUNC_DIAG_[MAT]=						diag(x,y,z,...)                              MAT      - Creates a diagonal matrix with the elements x,y,z,... as main diagonal.
PARSERFUNCS_LISTFUNC_FUNC_DROP_[DRAW]=						drop(P,D,s,a,STYLE)                          {}       - Draws a three dimensional drop at the point P, which is tilted in the direction D. The optional parameters s and a may be used, to modify the shape of the drop. The color may be modified with STYLE and the plot option light makes the 3D effect visible.
PARSERFUNCS_LISTFUNC_FUNC_EIGENVALS_[MAT]=					eigenvals(MAT)                               MAT      - Calculates the eigenvalues of the square matrix MAT and returns them in the shape of a vector. If the eigenvalues are complex, then they will be returned as a matrix with two columns, where the first contains the real and the second contains the imaginary part.
PARSERFUNCS_LISTFUNC_FUNC_EIGENVECTS_[MAT]=					eigenvects(MAT)                              MAT      - Calculates the eigenvectors of the square matrix MAT and returns them in the shape of a matrix, where each column is one eigenvector. If the eigenvectors are complex, then a n x 2n matrix will be returned with the real parts in the first and the imaginary parts in the second part of the columns.
PARSERFUNCS_LISTFUNC_FUNC_ELLIPSEV_[DRAW]=					ellipsev(P,D,r,STYLE)                        {}       - Generates an ellipse with the focus points P and P+D and the ellipse radius r. The filling and the style of the ellipse may be modified using STYLE.
PARSERFUNCS_LISTFUNC_FUNC_ELLIPSE_[DRAW]=					ellipse(P,P,r,STYLE)                         {}       - Generates an ellipse with the focus points P and P and the ellipse radius r. The filling and the style of the ellipse may be modified using STYLE.
PARSERFUNCS_LISTFUNC_FUNC_ELLIPTICD_[NUM]=					ellipticD(x,n,k)                             VAL      - Value of the elliptic integral D(x,n,k) at the position x with 0 <= k < 1. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_ELLIPTICE_[NUM]=					ellipticE(x,k)                               VAL      - Value of the elliptic integral E(x,k) at the position x with 0 <= k < 1. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_ELLIPTICF_[NUM]=					ellipticF(x,k)                               VAL      - Value of the elliptic integral F(x,k) at the position x with 0 <= k < 1. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_ELLIPTICPI_[NUM]=					ellipticPi(x,n,k)                            VAL      - Value of the elliptic integral Pi(x,n,k) at the position x with 0 <= k < 1. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_ERFC_[NUM_DISTRIB]=				erfc(x)                                      VAL      - Value of the complementary gaussian error function (erfc(x) := 1-erf(x)) at the position x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_ERF_[NUM_DISTRIB]=				erf(x)                                       VAL      - Value of the gaussian error function at the position x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_EVT_CHANGESTATE_[GUI]=			evt_changestate(nId,sState)                  {}       - GUI event handler: changes the state of the element with the ID nId to the new state sState. GUI-Event-Handler may only be used directly in a Layout-Script and their arguments have to be literals (i.e. no variables)
PARSERFUNCS_LISTFUNC_FUNC_EVT_CLOSE_[GUI]=					evt_close()                                  {}       - GUI event handler: closes the current window. GUI-Event-Handler may only be used directly in a Layout-Script
PARSERFUNCS_LISTFUNC_FUNC_EVT_COPYVALUES_[GUI]=				evt_copyvalues(nFromId,nToId1,...)           {}       - GUI event handler: copies the values from the elements with the ID nFromId into the elements with the IDs nToId1, ... . GUI-Event-Handler may only be used directly in a Layout-Script and their arguments have to be literals (i.e. no variables)
PARSERFUNCS_LISTFUNC_FUNC_EVT_SENDVALTOITEM_[GUI]=			evt_sendvaltoitem(nToId1,...)                {}       - GUI event handler: copies the values from the event-firing element into the elements with the IDs nToId1, ... . GUI-Event-Handler may only be used directly in a Layout-Script and their arguments have to be literals (i.e. no variables)
PARSERFUNCS_LISTFUNC_FUNC_EXP_[NUM_LOGARITHMIC]=			exp(x)                                       VAL      - Exponential function of x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_FACEV_[DRAW]=						facev(P,D,D,D,STYLE)                         {}       - Draws a quadrangle. You may pass from two to four edges. If you pass two, NumeRe will draw an square, passing three edges will result in a parallelogram and all four edges will draw a custom quadrangle. The first two vectors are the lower and the left border and the last is the diagonal opposite one. The filling of the quadrangle may be modified using STYLE.
PARSERFUNCS_LISTFUNC_FUNC_FACE_[DRAW]=						face(P,P,P,P,STYLE)                          {}       - Draws a quadrangle. You may pass from two to four edges. If you pass two, NumeRe will draw an square, passing three edges will result in a parallelogram and all four edges will draw a custom quadrangle. The edges are numbered going from lower left in counter-clockwise order. The filling of the quadrangle may be modified using STYLE.
PARSERFUNCS_LISTFUNC_FUNC_FACTORIAL_[NUM]=					factorial(n)                                 VAL      - Calculates the factorial of the integral number n [n! = n*(n-1)*(n-2)*...*1]. Defined for integral numbers >= 0
PARSERFUNCS_LISTFUNC_FUNC_FINDCOLUMN_[STRING]=				findcolumn(sTable,sHeadline)                {VAL}     - Returns all indices of the columns of the table in sTable (as string, e.g. via TABLE().name), whose column headings are matching to sHeadline
PARSERFUNCS_LISTFUNC_FUNC_FINDFILE_[STRING_LOGIC]=			findfile(sFile,sPath)                        LOG      - Returns true, if the file sFile exists, false otherwise. The file must be passed as a string. sPath is an optional standard search path, which defaults to the NumeRe root path
PARSERFUNCS_LISTFUNC_FUNC_FINDPARAM_[STRING]=				findparam(sPar,sLine,C)                      VAL      - Returns the position, where the parameter sPar in the string sLine was found, and 0, if sPar was not found. If sPar shall be followed by a special character (e.g. '='), you may pass this character with C, leave it away otherwise. If C is passed, the position will be shifted right corresponding to the number of whitespaces between sPar and C.
PARSERFUNCS_LISTFUNC_FUNC_FINDTOKEN_[STRING]=				findtoken(sString,sToken,sSep)               VAL      - Returns the position, where the token sToken is found in the string sString, 0 otherwise. sSep is an optional string, which will describe the separator characters. Its default value is the white space and the tabulator character.
PARSERFUNCS_LISTFUNC_FUNC_FLOOR_[NUM]=						floor(x)                                     VAL      - Rounds x to the nearest lower integral value
PARSERFUNCS_LISTFUNC_FUNC_GAMMA_[NUM_DISTRIB]=				gamma(x)                                     VAL      - Value of the gamma function at the position x. Defined in R \ {-n, 0}, where n is an integral number > 0.
PARSERFUNCS_LISTFUNC_FUNC_GAUSS_[NUM_RANDOM_DISTRIB]=		gauss(x0,x1)                                 VAL      - Creates a (real and normal distributed) random number, with the distribution parameters average x0 and FWHM x1
PARSERFUNCS_LISTFUNC_FUNC_GCD_[NUM]=						gcd(n,k)                                     VAL      - Calculates the greatest common divisor of the integral numbers n and k
PARSERFUNCS_LISTFUNC_FUNC_GETENVVAR_[STRING]=				getenvvar(sVarName)                          STR     - Returns the value of the system environment variable sVarName or an empty string, if the corresponding variable does not exist
PARSERFUNCS_LISTFUNC_FUNC_GETFILELIST_[STRING]=				getfilelist(sScheme,T)                      {STR}     - Returns a list of strings containing all files matching to the naming scheme sScheme. sScheme may contain additional placeholders (? or *) or with "|" linked "choose tokens" ("<CHOOSE|TOKEN>"). The function only returns the filenames and the extensions of the files without their paths. T is a optional parameter and returns the corresponding paths if set to 1.
PARSERFUNCS_LISTFUNC_FUNC_GETFILEPARTS_[STRING]=			getfileparts(sFilePath)                     {STR}     - Splits the sFilePath into drive letter, file path, file name and extension. If the path is a network path, the drive letter will be empty. If it is a folder, then the extension and the name will be empty
PARSERFUNCS_LISTFUNC_FUNC_GETFOLDERLIST_[STRING]=			getfolderlist(sScheme,T)                    {STR}     - Returns a list of strings containing all directories matching to the naming scheme sScheme. sScheme may contain additional placeholders (? or *) or with "|" linked "choose tokens" ("<CHOOSE|TOKEN>"). The function only returns the directory names without their paths. T is a optional parameter and returns the corresponding paths if set to 1.
PARSERFUNCS_LISTFUNC_FUNC_GETINDICES_[STRING]=				getindices(sTable,T)                        {VAL}     - Returns the indices of the data object access, which was passed as a string, in the format I1,I2,J1,J2. T is an optional parameter and determines, how the access shall be interpreted: matrix-like (T=0), column- (T=1) or linewise (T=2). Passing T=-1 returns uninterpreted indices: 0 for non-existing and -1 for open interval boundaries. E.g.: getindices("data(5:,3)",-1) = 5,-1,3,0
PARSERFUNCS_LISTFUNC_FUNC_GETKEYVAL_[STRING]=				getkeyval({sKeyVals},sKey,sDef,strict)       ARG      - Returns the value of the corresponding key sKey from the key-value list sKeyVals. sDef is the default value, if the key could not be found. If strict is true and the key was not found, then a warning is issued. sDef is a optional value and defaults to false
PARSERFUNCS_LISTFUNC_FUNC_GETMATCHINGPARENS_[STRING]=	    getmatchingparens(sLine)                     VAL      - Returns the position of the closing parenthesis matching to the first open parenthesis in the string sLine. Note that this applies to brackets and braces as well.
PARSERFUNCS_LISTFUNC_FUNC_GETOPT_[STRING]=					getopt(sLine,nPos)                           STR      - Returns the value of a parameter in the string sLine with the value's first character at position nPos (e.g. after "=") as a string. Note that all whitespaces between nPos and the actual position of the value will be ignored.
PARSERFUNCS_LISTFUNC_FUNC_HEAVISIDE_[NUM_DISTRIB]=			heaviside(x)                                 VAL      - Heaviside (or Theta) function. 0 for x < 0, 1 otherwise. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_HERMITE_[NUM_POLYNOMIAL]=			hermite(n,x)                                 VAL      - Numerical value of the Hermite polynomial with the order n >= 0 at the position x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_IDENTITY_[MAT]=					identity(n)                                  MAT      - Creates a n dimensional identity matrix
PARSERFUNCS_LISTFUNC_FUNC_IDXTOLOG_[MAT]=					idxtolog(MAT)                                MAT      - Transforms indices in to logical values. If a vector is passed, then the function will return a vector with true in those lines, to which the indices are pointing. If a matrix with two columns is passed, then the function will return a matrix with those elements equal to true, to which the line indices of the first and the column indices of the second column are pointing
PARSERFUNCS_LISTFUNC_FUNC_IMY_[NUM_POLYNOMIAL]=				imY(l,m,theta,phi)                           VAL      - Imaginary part of the spherical harmonics with the orders l >= 0 and m = [-l,l] at the angles theta in the interval [0,PI] and phi in the interval [0,2*PI)
PARSERFUNCS_LISTFUNC_FUNC_INTERPOLATE_[MAT_COORDS]=			interpolate(MAT,MAT)                         MAT      - Interpolates values from the first matrix bilinearly using the row and column values of the second matrix, or interpolates values of the first vector linearly from the index values of the second vector. The row and column or index values can be floating point values. If the second matrix has more than two columns, the first column is interpreted as row values and all further ones as column values. A matrix of size (row x col) is then created. Requires the matop mode
PARSERFUNCS_LISTFUNC_FUNC_INVERT_[MAT]=						invert(MAT)                                  MAT      - Inverts the matrix MAT, if an inverse matrix exists. invert() checks in advance, if MAT is a square matrix.
PARSERFUNCS_LISTFUNC_FUNC_IS_ALNUM_[STRING_LOGIC]=			is_alnum(sToParse)                          {LOG}     - Determines for each character in sToParse, whether it is a alphanumeric character type, or not
PARSERFUNCS_LISTFUNC_FUNC_IS_ALPHA_[STRING_LOGIC]=			is_alpha(sToParse)                          {LOG}     - Determines for each character in sToParse, whether it is a alphabetic character type, or not
PARSERFUNCS_LISTFUNC_FUNC_IS_BLANK_[STRING_LOGIC]=			is_blank(sToParse)                          {LOG}     - Determines for each character in sToParse, whether it is a blank character type, or not
PARSERFUNCS_LISTFUNC_FUNC_IS_CLUSTER_[STRING_LOGIC]=		is_cluster(sObject)                          LOG      - Returns true, if sObject is a cluster, false otherwise
PARSERFUNCS_LISTFUNC_FUNC_IS_CNTRL_[STRING_LOGIC]=			is_cntrl(sToParse)                          {LOG}     - Determines for each character in sToParse, whether it is a control character type, or not
PARSERFUNCS_LISTFUNC_FUNC_IS_DATA_[STRING_LOGIC]=			is_data(sObject)                             LOG      - Returns true, if sObject is a data object (a table or a cluster), false otherwise
PARSERFUNCS_LISTFUNC_FUNC_IS_DIGIT_[STRING_LOGIC]=			is_digit(sToParse)                          {LOG}     - Determines for each character in sToParse, whether it is a decimal character type, or not
PARSERFUNCS_LISTFUNC_FUNC_IS_GRAPH_[STRING_LOGIC]=			is_graph(sToParse)                          {LOG}     - Determines for each character in sToParse, whether it is a graphical character type, or not
PARSERFUNCS_LISTFUNC_FUNC_IS_LOWER_[STRING_LOGIC]=			is_lower(sToParse)                          {LOG}     - Determines for each character in sToParse, whether it is a lowercase character type, or not
PARSERFUNCS_LISTFUNC_FUNC_IS_NAN_[LOGIC]=					is_nan(x)                                    LOG      - Returns true, if x has the value nan, false otherwise
PARSERFUNCS_LISTFUNC_FUNC_IS_PRINT_[STRING_LOGIC]=			is_print(sToParse)                          {LOG}     - Determines for each character in sToParse, whether it is a printable character type, or not
PARSERFUNCS_LISTFUNC_FUNC_IS_PUNCT_[STRING_LOGIC]=			is_punct(sToParse)                          {LOG}     - Determines for each character in sToParse, whether it is a punctuation character type, or not
PARSERFUNCS_LISTFUNC_FUNC_IS_SPACE_[STRING_LOGIC]=			is_space(sToParse)                          {LOG}     - Determines for each character in sToParse, whether it is a white-space character type, or not
PARSERFUNCS_LISTFUNC_FUNC_IS_STRING_[STRING_LOGIC]=			is_string(EXPR)                              LOG      - Returns true, if EXPR contains strings, false otherwise
PARSERFUNCS_LISTFUNC_FUNC_IS_TABLE_[STRING_LOGIC]=			is_table(sObject)                            LOG      - Returns true, if sObject is a table, false otherwise
PARSERFUNCS_LISTFUNC_FUNC_IS_UPPER_[STRING_LOGIC]=			is_upper(sToParse)                          {LOG}     - Determines for each character in sToParse, whether it is a uppercase character type, or not
PARSERFUNCS_LISTFUNC_FUNC_IS_XDIGIT_[STRING_LOGIC]=			is_xdigit(sToParse)                         {LOG}     - Determines for each character in sToParse, whether it is a hexadecimal character type, or not
PARSERFUNCS_LISTFUNC_FUNC_IVL_[NUM_DISTRIB]=				ivl(x,x0,x1,l,r)                             VAL      - Interval function: defines an interval from x0 to x1 with arbitrary border types l and r: 0 ignores the border, 1 is a closed and 2 an open interval border.
PARSERFUNCS_LISTFUNC_FUNC_LAGUERRE_A_[NUM_POLYNOMIAL]=		laguerre_a(n,k,x)                            VAL      - Numerical value of the associate Laguerre polynomial with the orders n >= 0 and k = [0,n] at the position x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_LAGUERRE_[NUM_POLYNOMIAL]=		laguerre(n,x)                                VAL      - Numerical value of the Laguerre polynomial with the order n >= 0 at the position x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_LCM_[NUM]=						lcm(n,k)                                     VAL      - Calculates the least common multiple of the integral numbers n and k
PARSERFUNCS_LISTFUNC_FUNC_LEGENDRE_A_[NUM_POLYNOMIAL]=		legendre_a(l,m,x)                            VAL      - Numerical value of the associate Legendre polynomial with the orders l >= 0 and m = [-l,l] at the position x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_LEGENDRE_[NUM_POLYNOMIAL]=		legendre(n,x)                                VAL      - Numerical value of the Legendre polynomial with the order n >= 0 at the position x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_LI2_[NUM]=					    Li2(x)                                       VAL      - Calculates the dilogarithm of x with x from R
PARSERFUNCS_LISTFUNC_FUNC_LINEV_[DRAW]=						linev(P,D,STYLE)                             {}       - Draws a straight line from P to P+D. If only one point is passed, then the second will be located at the origin. Color, shape and line endings may be modified using STYLE.
PARSERFUNCS_LISTFUNC_FUNC_LINE_[DRAW]=						line(P,P,STYLE)                              {}       - Draws a straight line from P to P. If only one point is passed, then the second will be located at the origin. Color, shape and line endings may be modified using STYLE.
PARSERFUNCS_LISTFUNC_FUNC_LN_[NUM_LOGARITHMIC]=				ln(x)                                        VAL      - Natural logarithm of x. Defined in the range (0,inf)
PARSERFUNCS_LISTFUNC_FUNC_LOCATE_[STRING]=					locate({sWhere},sToFind,nTolerance)         {VAL}     - Returns the indices of the cluster's components of sWhere, in which sToFind may be found according nTolerance. If nTolerance = 0, then only components are returned, which match completely to sToFind. The algorithm ignores surrounding whitespaces, if nTolerance = 1 and only examines the first (for nTolerance = 2) or the last (for nTolerance = 3) non-whitespace characters of each single component. If nTolerance = 4, then sToFind may only be a part of each component and nTolerance = 5 switches towards using the single characters of sToFind just like in strmatch(). If nothing is found, this function simply returns false
PARSERFUNCS_LISTFUNC_FUNC_LOG10_[NUM_LOGARITHMIC]=			log10(x)                                     VAL      - Logarithm with base 10 of x. Can be passed as 'log(x)'. Defined in the range (0,inf)
PARSERFUNCS_LISTFUNC_FUNC_LOG2_[NUM_LOGARITHMIC]=			log2(x)                                      VAL      - Logarithm with base 2 of x. Defined in the range (0,inf)
PARSERFUNCS_LISTFUNC_FUNC_LOGTOIDX_[MAT]=					logtoidx(MAT)                                MAT      - Transforms logical values to indices. If a vector is passed, then the function will return a vector with the indices to the elements, which were true. If a matrix is passed, then the function returns a two-column matrix, with the line indices in the first and the column indices in the second column
PARSERFUNCS_LISTFUNC_FUNC_LOG_B_[NUM_LOGARITHMIC]=			log_b(b,x)                                   VAL      - Logarithm with base b of x. Defined in the range x in (0,inf) and b in (0,inf)
PARSERFUNCS_LISTFUNC_FUNC_LOG_[NUM_LOGARITHMIC]=			log(x)                                       VAL      - Logarithm with base 10 of x. Alias for 'log10(x)'. Defined in the range (0,inf)
PARSERFUNCS_LISTFUNC_FUNC_MATFCF_[MAT]=						matfcf(X,Y,Z,...)                            MAT      - Creates a matrix out of the columns X,Y,Z,... If the number of elements is not sufficient for the maximal dimension, the missing ones will be logically generated out of the already present ones.
PARSERFUNCS_LISTFUNC_FUNC_MATFC_[MAT]=						matfc(X,Y,Z,...)                             MAT      - Creates a matrix out of the columns X,Y,Z,... If the number of elements is not sufficient for the maximal dimension, the missing ones will be replaced by 0.
PARSERFUNCS_LISTFUNC_FUNC_MATFLF_[MAT]=						matflf(X,Y,Z,...)                            MAT      - Creates a matrix out of the lines X,Y,Z,... If the number of elements is not sufficient for the maximal dimension, the missing ones will be logically generated out of the already present ones.
PARSERFUNCS_LISTFUNC_FUNC_MATFL_[MAT]=						matfl(X,Y,Z,...)                             MAT      - Creates a matrix out of the lines X,Y,Z,... If the number of elements is not sufficient for the maximal dimension, the missing ones will be replaced by 0.
PARSERFUNCS_LISTFUNC_FUNC_MAXPOS_[STATS]=					maxpos(x,y,z,...)                            VAL      - Index of the maximal value of x,y,z,...
PARSERFUNCS_LISTFUNC_FUNC_MAX_[STATS_STRING]=				max(x,y,z,...)                               ARG      - Returns the maximal value of x,y,z,... Can be applied to strings, where it will use string logic
PARSERFUNCS_LISTFUNC_FUNC_MED_[STATS]=						med(x,y,z,...)                               VAL      - Returns the median of x,y,z,...
PARSERFUNCS_LISTFUNC_FUNC_MINPOS_[STATS]=					minpos(x,y,z,...)                            VAL      - Index of the minimal value of x,y,z,...
PARSERFUNCS_LISTFUNC_FUNC_MIN_[STATS_STRING]=				min(x,y,z,...)                               ARG      - Returns the minimal value of x,y,z,... Can be applied to strings, where it will use string logic
PARSERFUNCS_LISTFUNC_FUNC_NEUMANN_[NUM_PHYSICS]=			neumann(n,x)                                 VAL      - Neumann function (Bessel function of the second kind) with the order n at the position x. Defined in R \ {0}
PARSERFUNCS_LISTFUNC_FUNC_NORMALIZE_[MAT]=					normalize(MAT)                               MAT      - Normalizes the values in the matrix MAT to the range [-1,1] (the values in the matrix are divided through their absolute maximal value)
PARSERFUNCS_LISTFUNC_FUNC_NORM_[NUM_STATS_COORDS]=			norm(x,y,z,...)                              VAL      - Calculates the euklidian vector norm: ||(x,y,z,...)|| := sqrt(x^2+y^2+z^2+...). Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_NUM_[STATS_STRING]=				num(x,y,z,...)                               VAL      - returns the number of valid arguments x,y,z,... Can be applied to strings and counts every non-empty string
PARSERFUNCS_LISTFUNC_FUNC_ONE_[MAT]=						one(n,m)                                     MAT      - Creates a n x m matrix, which is filled with ones. If only one argument was passend, then a square matrix will be created.
PARSERFUNCS_LISTFUNC_FUNC_OR_[LOGIC]=						or(x,y,z,...)                                LOG      - Connects its arguments with the "||" operator
PARSERFUNCS_LISTFUNC_FUNC_PCT_[STATS]=						pct(x,y,z,...,p)                             VAL      - p-th percentile of x,y,z,...
PARSERFUNCS_LISTFUNC_FUNC_PERLIN_[NUM_RANDOM_DISTRIB]=		perlin(x,y,z,seed,freq,oct,pers)             VAL      - Calculates the coherent Perlin noise at the position {x,y=0,z=0} with the random seed=0, the frequency freq=1 [1..16], the number of octaves oct=6 [1..6] and a persistency of pers=0.5 [0..1]. If fewer than all 7 arguments are passed, then the mentioned default values are used
PARSERFUNCS_LISTFUNC_FUNC_PHI_[ANGULAR_COORDS]=				phi(x,y)                                     VAL      - Calculates the angle between the x axis and the vector (x,y). Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_POINT_[DRAW]=						point(P,STYLE)                               {}       - Draws a point at the position P. The shape of the point an its color may be modified using STYLE.
PARSERFUNCS_LISTFUNC_FUNC_POLTOCART_[MAT_COORDS]=			poltocart(MAT)                               MAT      - Converts the two or three columns of the matrix MAT from polar (rho,phi,theta) to cartesian coordinates (x,y,z). Requires the matop mode
PARSERFUNCS_LISTFUNC_FUNC_POLTOCYL_[MAT_COORDS]=			poltocyl(MAT)                                MAT      - Converts the two or three columns of the matrix MAT from polar (rho,phi,theta) to cylindrical coordinates (rho,phi,z). Requires the matop mode
PARSERFUNCS_LISTFUNC_FUNC_POLYGONV_[DRAW]=					polygonv(P,D,n,STYLE)                        {}       - Draws a regular n-edged polygon around the point P going from point P+D. The filling of the polygon may be modified using STYLE.
PARSERFUNCS_LISTFUNC_FUNC_POLYGON_[DRAW]=					polygon(P,P,n,STYLE)                         {}       - Draws a regular n-edged polygon around the point P going from point P. The filling of the polygon may be modified using STYLE.
PARSERFUNCS_LISTFUNC_FUNC_POLYNOMIAL_[NUM_POLYNOMIAL]=		polynomial(x,a0,a1,a2,...)                   VAL      - Calculates the value of the polynomial a0+a1*x+a2*x^2+... at the position x
PARSERFUNCS_LISTFUNC_FUNC_PRD_[NUM_STATS]=					prd(x,y,z,...)                               VAL      - Returns the product of the arguments x,y,z,...
PARSERFUNCS_LISTFUNC_FUNC_PSI_N_[NUM]=					    psi_n(n,x)                                   VAL      - Calculates the value of the polygamma function of the order n >= 0 at the location x with x > 0
PARSERFUNCS_LISTFUNC_FUNC_PSI_[NUM]=					    psi(x)                                       VAL      - Calculates the value of the digamma function at the location x, where x is in R \ {0}
PARSERFUNCS_LISTFUNC_FUNC_RADIAN_[ANGULAR]=					radian(alpha)                                VAL      - Calculates the radians of the angle alpha [Degree]. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_RAND_[NUM_RANDOM_DISTRIB]=		rand(x0,x1)                                  VAL      - Creates a (real and uniform distributed) random number in the interval [x0,x1)
PARSERFUNCS_LISTFUNC_FUNC_RANGE_[NUM]=						range(x,LFT,RGHT)                            VAL      - Restricts x to the interval [LFT,RGHT]
PARSERFUNCS_LISTFUNC_FUNC_RECT_[NUM_DISTRIB]=				rect(x,x0,x1)                                VAL      - Rectangular function: 1 for x in [x0,x1]; 0 otherwise
PARSERFUNCS_LISTFUNC_FUNC_REGEX_[STRING]=					regex(sRegEx,sStr,nPos,nLen)                {VAL}     - Applies the regular expression sRegEx (ECMAScript syntax) on the string sStr and returns position and length of the first match. The variables nPos and nLen are optional and define the starting point and the length of the substring to search in
PARSERFUNCS_LISTFUNC_FUNC_REPEAT_[STRING]=					repeat(sStr,nTimes)                          STR      - Returns nTimes copies of sStr
PARSERFUNCS_LISTFUNC_FUNC_REPLACEALL_[STRING]=				replaceall(sToRep,sToFind,sRep,nPos1,nPos2)  STR      - Replaces all occurrences of the second string sToFind in the first string sToRep with the third string sRep. The variables nPos1 and nPos2 are optional values limiting the action to start (nPos1) and end position (nPos2) in sToRep
PARSERFUNCS_LISTFUNC_FUNC_REPLACE_[STRING]=					replace(sToRep,nPos,nLetters,sRep)           STR      - Replaces nLetters letters starting with the position nPos in string sToRep with the string sRep
PARSERFUNCS_LISTFUNC_FUNC_REPMAT_[MAT]=						repmat(MAT,n,m)                              MAT      - Repeats the matrix MAT (n x m) times
PARSERFUNCS_LISTFUNC_FUNC_RESHAPE_[MAT]=					reshape(MAT,n,m)                             MAT      - Changes the shape of the matrix MAT to a (n x m) matrix. The number of elements in the old and the new matrix must match for this function. Reshaping is done linewise
PARSERFUNCS_LISTFUNC_FUNC_RESIZE_[MAT]=						resize(MAT,n,m)                              MAT      - Changes the size of the matrix MAT to (n x m). Missing lines and rows are appended using zeros
PARSERFUNCS_LISTFUNC_FUNC_RINT_[NUM]=						rint(x)                                      VAL      - Rounds x to the nearest integral value
PARSERFUNCS_LISTFUNC_FUNC_ROOF_[NUM]=						roof(x)                                      VAL      - Rounds x to the nearest and larger integral number
PARSERFUNCS_LISTFUNC_FUNC_ROUND_[NUM]=						round(x,n)                                   VAL      - Rounds x to n decimals
PARSERFUNCS_LISTFUNC_FUNC_SBESSEL_[NUM_POLYNOMIAL_PHYSICS]=	sbessel(n,x)                                 VAL      - Spherical Bessel function of the order n. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_SHUFFLE_[MAT]=					shuffle(sel,val)                             MAT      - Returns sel randomly selected and unique values out of a 1:val array. val is an optional value, which defaults to sel.
PARSERFUNCS_LISTFUNC_FUNC_SIGN_[NUM]=						sign(x)                                      VAL      - Returns the sign of x
PARSERFUNCS_LISTFUNC_FUNC_SINC_[NUM_TRIGONOMETRIC]=			sinc(x)                                      VAL      - Cardinal sine of x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_SINH_[NUM_HYPERBOLIC]=			sinh(x)                                      VAL      - Hyperbolic sine of x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_SIN_[NUM_TRIGONOMETRIC]=			sin(x)                                       VAL      - Sine of x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_SIZE_[MAT]=						size(MAT)                                    VEC      - Returns the number of lines and columns of the matrix MAT as a vector
PARSERFUNCS_LISTFUNC_FUNC_SLEEP_[TIME]=						sleep(nMilliSeconds)                         VAL      - Waits for the passed nMilliSeconds and returns this value after it
PARSERFUNCS_LISTFUNC_FUNC_SNEUMANN_[NUM_POLYNOMIAL_PHYSICS]=sneumann(n,x)                                VAL      - Spherical Neumann function of the order n. Defined in R \ {0}
PARSERFUNCS_LISTFUNC_FUNC_SOLVE_[MAT]=						solve(MAT)                                   VEC      - Solves the system of linear equations, which is described by the matrix MAT, with the Gaussian algorithm.
PARSERFUNCS_LISTFUNC_FUNC_SPHERE_[DRAW]=					sphere(P,r,STYLE)                            {}       - Draws a sphere with the radius r at the coordinates P. The color may be modified using STYLE. The plot option light makes the 3d effect visible.
PARSERFUNCS_LISTFUNC_FUNC_SPLIT_[STRING]=					split(sToSplit,cSep)                        {STR}     - Splits the string sToSplit at the characters cSep in separate strings
PARSERFUNCS_LISTFUNC_FUNC_SQRT_[NUM]=						sqrt(x)                                      VAL      - Square root of x. Defined in the range [0, inf)
PARSERFUNCS_LISTFUNC_FUNC_STD_[STATS]=						std(x,y,z,...)                               VAL      - Returns the standard deviation of x,y,z,...
PARSERFUNCS_LISTFUNC_FUNC_STRFND_[STRING]=					strfnd(sToFind,sWhere,nPos)                  VAL      - Returns the position of the first occurrence of sToFind in sWhere, with the search starting from the position nPos. nPos is an optional value with the default value 1. The function returns false, if sToFind is not found.
PARSERFUNCS_LISTFUNC_FUNC_STRFNDALL_[STRING]=				strfndall(sToFind,sWhere,nPos1,nPos2)       {VAL}     - Returns all occurrences of sToFind in sWhere, with the search starting from the position nPos1 and ending at nPos2. nPos1 and nPos2 are optional values with the default values nPos1 = 1 and nPos2 = strlen(sWhere). The function returns false, if sToFind is not found.
PARSERFUNCS_LISTFUNC_FUNC_STRING_CAST_[STRING]=				string_cast(EXPR)                            STR      - Transforms EXPR directly to a string and ignores possible string expressions (#(EXPR) would calculate the numerical value of EXPR first)
PARSERFUNCS_LISTFUNC_FUNC_STRIP_[STRING]=					strip(sStr,sPref,sSuff,nStripAll)            STR      - Removes the prefix sPref and the suffix sSuff from the string sStr, if they have a non-zero length. nStripAll is an optional value and removes repeating pre- and suffixes if nStripAll = 1.
PARSERFUNCS_LISTFUNC_FUNC_STRLEN_[STRING]=					strlen(sStr)                                 VAL      - Returns the length of the string sStr
PARSERFUNCS_LISTFUNC_FUNC_STRMATCH_[STRING]=				strmatch(sChars,sWhere,nPos)                 VAL      - Searches for the first occurrence of a character of sChars in the string sWhere going from position nPos. nPos is an optional value and defaults to nPos = 1. If nothing was found, this function will return false
PARSERFUNCS_LISTFUNC_FUNC_STRMATCHALL_[STRING]=				strmatchall(sChars,sWhere,nPos1,nPos2)      {VAL}     - Searches for the first occurrences of each character of sChars in the string sWhere going from position nPos1 to nPos2. nPos1 and nPos2 are optional values and default to nPos1 = 1 and nPos2 = strlen(sWhere). If nothing was found, this function will return 0 for each character
PARSERFUNCS_LISTFUNC_FUNC_STRRFND_[STRING]=					strrfnd(sToFind,sWhere,nPos)                 VAL      - Returns the position of the last occurrence of sToFind in sWhere, with the search starting from the position nPos. nPos is an optional value with the default value nPos = strlen(sWhere). The function returns false, if sToFind is not found.
PARSERFUNCS_LISTFUNC_FUNC_STRRMATCH_[STRING]=				strrmatch(sChars,sWhere,nPos)                VAL      - Searches for the last occurrence of a character of sChars in the string sWhere up to position nPos. nPos is an optional value and defaults to nPos = strlen(sWhere). If nothing was found, this function will return false
PARSERFUNCS_LISTFUNC_FUNC_STR_NOT_MATCH_[STRING]=			str_not_match(sChars,sWhere,nPos)            VAL      - Searches for the first occurrence of a character in the string sWhere going from position nPos, which doesn't appear in sChars. nPos is an optional value and defaults to nPos = 1. If nothing was found, this function will return false
PARSERFUNCS_LISTFUNC_FUNC_STR_NOT_RMATCH_[STRING]=			str_not_rmatch(sChars,sWhere,nPos)           VAL      - Searches for the last occurrence of a character in the string sWhere up to position nPos, which doesn't appear in sChars. nPos is an optional value and defaults to nPos = strlen(sWhere). If nothing was found, this function will return false
PARSERFUNCS_LISTFUNC_FUNC_STUDENT_T_[DISTRIB_STATS]=		student_t(n,c)                               VAL      - Calculates the twosided Student factor t for n measurements and the confidence interval 0 < c < 1
PARSERFUNCS_LISTFUNC_FUNC_SUBSTR_[STRING]=					substr(sStr,nPos,nLen)                       STR      - Returns nLen characters starting with the nPos-th letter from sStr as a new string
PARSERFUNCS_LISTFUNC_FUNC_SUM_[NUM_STATS_STRING]=			sum(x,y,z,...)                               ARG      - Sums x,y,z,... Can be applied to strings and will concatenate them
PARSERFUNCS_LISTFUNC_FUNC_TANH_[NUM_HYPERBOLIC]=			tanh(x)                                      VAL      - Hyperbolic tangent of x. Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_TAN_[NUM_TRIGONOMETRIC]=			tan(x)                                       VAL      - Tangent of x. Defined in R \ {-n*PI/2, n*PI/2}. n is an integral number > 0.
PARSERFUNCS_LISTFUNC_FUNC_TEXTPARSE_[STRING]=               textparse(sToParse,sPattern,nPos1,nPos2)    {ARG}     - Splits sToParse up into single tokens of different variable types using the scheme sPattern. The variable types are defined using the identifiers "%s" (string), "%f" (float) and "%a" (any, will be ignored and can be used to jump over sections of text) in sPattern. nPos1 and nPos2 are optional values and define the starting and ending points
PARSERFUNCS_LISTFUNC_FUNC_TEXT_[DRAW]=						text(P,P,TEXT,STYLE)                         {}       - Prints the text TEXT at the position P. The justification and the color may be modified, in which justification and shape have to be separated with : from the color information. The justification is represented using LRC (Left-Right-Centered) and the shape with rib (roman-italic-bold). The second coordinate pair may be used, if the text shall not printed horizontally.
PARSERFUNCS_LISTFUNC_FUNC_THETA_[ANGULAR_COORDS]=			theta(x,y,z)                                 VAL      - Calculates the angle between the z axis and the vector (x,y,z). Defined everywhere in R
PARSERFUNCS_LISTFUNC_FUNC_TIMEFORMAT_[TIME_STRING]=			timeformat(sFormat,nTimeVal)                 STR      - Formats the time nTimeVal according to the pattern sFormat. The characters "YMDdHhms" (Year, month, day (date), day (duration), hour (time), hour (duration), minute, second) in sFormat will be replaced according their length by the corresponding time value
PARSERFUNCS_LISTFUNC_FUNC_TIME_[TIME]=						time()                                       VAL      - Returns the number of seconds since 1.1.1970
PARSERFUNCS_LISTFUNC_FUNC_TO_CHAR_[STRING]=					to_char(x,y,z,...)                           STR      - Interprets x,y,z,... as ASCII values and returns their corresponding characters as one string
PARSERFUNCS_LISTFUNC_FUNC_TO_CMD_[STRING]=					to_cmd(sStr)                                 CMD      - Transforms the passed string sStr to a command expression
PARSERFUNCS_LISTFUNC_FUNC_TO_LOWERCASE_[STRING]=			to_lowercase(sUpper)                         STR      - Transforms the uppercase letters in sUpper to lowercase
PARSERFUNCS_LISTFUNC_FUNC_TO_STRING_[STRING]=				to_string(EXPR)                              STR      - Transforms EXPR to a string, if it is not already one (#(EXPR) would calculate the numerical value of EXPR first)
PARSERFUNCS_LISTFUNC_FUNC_TO_TIME_[TIME_STRING]=			to_time(sPattern,sTime)                      VAL      - Transforms the time in sTime according to the pattern in sPattern into a time value. The characters "YMDHhms" (Year, month, day, hour (time), hour (duration), minute, second) in sPattern are used to identify the time values in sTime
PARSERFUNCS_LISTFUNC_FUNC_TO_UPPERCASE_[STRING]=			to_uppercase(sLower)                         STR      - Transforms the lowercase letters in sLower to uppercase
PARSERFUNCS_LISTFUNC_FUNC_TO_VALUE_[STRING]=				to_value(sToEval)                            VAL      - Evaluates the string sToEval and transforms it to a numerical value afterwards
PARSERFUNCS_LISTFUNC_FUNC_TRACE_[MAT]=						trace(MAT)                                   VAL      - Calculates the trace of the square matrix MAT.
PARSERFUNCS_LISTFUNC_FUNC_TRANSPOSE_[MAT]=					transpose(MAT)                               MAT      - Transposes the matrix MAT (column and line indices will be exchanged)
PARSERFUNCS_LISTFUNC_FUNC_TRIANGLEV_[DRAW]=					trianglev(P,D,D,STYLE)                       {}       - Draws a triangle. You may pass either two or three edges. If you pass two edges, NumeRe will draw an equal-sided triangle, if you pass all three, then it will be a custom one. The edges are numbered going from lower left in counter-clockwise order. The filling of the triangle may be modified with STYLE.
PARSERFUNCS_LISTFUNC_FUNC_TRIANGLE_[DRAW]=					triangle(P,P,P,STYLE)                        {}       - Draws a triangle. You may pass either two or three edges. If you pass two edges, NumeRe will draw an equal-sided triangle, if you pass all three, then it will be a custom one. The edges are numbered going from lower left in counter-clockwise order. The filling of the triangle may be modified with STYLE.
PARSERFUNCS_LISTFUNC_FUNC_UNIQUE_[MAT]=                     unique(MAT,nDim)                             MAT      - Sorts and returns only unique elements. If MAT is a vector, then the function will return a vector. If MAT is a matrix, then MAT will be rolled out and a vector is returned. nDim is an optional value, will only be used, if MAT is a matrix, and is 0 as default. If nDim is equal to 1, then the function will return a matrix with unique elements along its rows. If nDim is 2, then the unique elements are determined along the columns
PARSERFUNCS_LISTFUNC_FUNC_VALTOSTR_[STRING]=				valtostr(x,C,n)                              STR      - Evaluates x and transforms it to a string. C is an optional character, inserted before x, to fill it to n characters
PARSERFUNCS_LISTFUNC_FUNC_VERSION_[TIME]=					version()                                    VAL      - Returns the version number of NumeRe as an integral number: v1.0.8 will be returned as 108
PARSERFUNCS_LISTFUNC_FUNC_XOR_[LOGIC]=						xor(x,y,z,...)                               LOG      - Connects its arguments with the "|||" operator
PARSERFUNCS_LISTFUNC_FUNC_Y_[NUM_POLYNOMIAL]=				Y(l,m,theta,phi)                             VAL      - Real part of the spherical harmonics with the orders l >= 0 and m = [-l,l] at the angles theta in the interval [0,PI] and phi in the interval [0,2*PI)
PARSERFUNCS_LISTFUNC_FUNC_ZERO_[MAT]=						zero(n,m)                                    MAT      - Creates a n x m matrix, which is filled with zeroes. If only one argument was passend, then a square matrix will be created.
PARSERFUNCS_LISTFUNC_FUNC_ZETA_[NUM]=					    zeta(x)                                      VAL      - Calculates the value of the Riemann zeta function at the location x, where x is in  R \ {1}
PARSERFUNCS_LISTFUNC_FUNC_Z_[NUM_POLYNOMIAL]=				Z(n,m,rho,phi)                               VAL      - Value of the Zernike polynomial of the order n >= 0 with m = [-n,n] at the position rho in the interval [0,1] at the angle phi in the interval [0,2*PI)
PARSERFUNCS_LISTFUNC_TABLEHEAD=								Function:                                    Type:    Result:
# Ende Funktionentabelle
PARSERFUNCS_LISTFUNC_GETKEYVAL_WARNING=The key %%1%% could not be found in the passed list by the function getkeyval().
PARSERFUNCS_LISTFUNC_FOOTNOTE1=The type of the return value is schematically indicated via VAL = numerical value, STR = string, LOG = logical value (true or false), MAT = matrix, VEC = vector and ARG = type of the argument(s). Return values in braces indicate that the function will return multiple values; empty braces indicate no return value.
PARSERFUNCS_LISTFUNC_FOOTNOTE2=Further information concerning the predefined mathematical functions can be found in the NumeRe documentation at "help function".
# Methoden
PARSERFUNCS_LISTFUNC_METHOD_LEN_[STRING]=					len                    VAL      - Length of the string
PARSERFUNCS_LISTFUNC_METHOD_SUB_[STRING]=					sub(nPos,nLen)         STR      - Returns nLen characters starting with the letter nPos from the string as a new string
PARSERFUNCS_LISTFUNC_METHOD_FND_[STRING]=					fnd(sToFind,nPos)      VAL      - Returns the position of the first occurrence of sToFind in the string, with the search starting from the position nPos. nPos is an optional value with the default value 1. The function returns false, if sToFind was not found
PARSERFUNCS_LISTFUNC_METHOD_RFND_[STRING]=					rfnd(sToFind,nPos)     VAL      - Returns the position of the last occurrence of sToFind in the string, with the search starting from the position nPos. nPos is an optional value with the default value nPos = STRINGVAR.len. The function returns false, if sToFind was not found
PARSERFUNCS_LISTFUNC_METHOD_AT_[STRING]=					at(nPos)               STR      - Return the character at the position nPos in the string
PARSERFUNCS_LISTFUNC_METHOD_SPLT_[STRING]=					splt(cSep)            {STR}     - Splits the string at the characters cSep in separate strings
PARSERFUNCS_LISTFUNC_METHOD_MTCH_[STRING]=					mtch(sChars,nPos)      VAL      - Searches for the first occurrence of a char of sChars in the string going from position nPos. nPos is an optional value and defaults to nPos = 1. If nothing was found, this function will return false
PARSERFUNCS_LISTFUNC_METHOD_RMTCH_[STRING]=					rmtch(sChars,nPos)     VAL      - Searches for the last occurrence of a char of sChars in the string up to position nPos. nPos is an optional value and defaults to nPos = STRINGVAR.len. If nothing was found, this function will return false
PARSERFUNCS_LISTFUNC_METHOD_NMTCH_[STRING]=					nmtch(sChars,nPos)     VAL      - Searches for the first occurrence of a char in the string going from position nPos, which doesn't appear in sChars. nPos is an optional value and defaults to nPos = 1. If nothing was found, this function will return false
PARSERFUNCS_LISTFUNC_METHOD_NRMTCH_[STRING]=				nrmtch(sChars,nPos)    VAL      - Searches for the last occurrence of a char in the string up to position nPos, which doesn't appear in sChars. nPos is an optional value and defaults to nPos = STRINGVAR.len. If nothing was found, this function will return false
PARSERFUNCS_LISTFUNC_METHOD_COLS_[DATA]=			        cols                   {}       - Modifies the operation of the multi-argument function to columnwise application
PARSERFUNCS_LISTFUNC_METHOD_LINES_[DATA]=			        lines                  {}       - Modifies the operation of the multi-argument function to linewise application
PARSERFUNCS_LISTFUNC_METHOD_GRID_[DATA]=			        grid                   {}       - Modifies the operation of the multi-argument function, so that the data set will be interpreted as data grid
PARSERFUNCS_LISTFUNC_METHOD_EVERY_[DATA]=				    every(nFirst,nIncr)    {}       - This method chooses in combination with .cols or .lines the first (nFirst) column/line, on which the multi-argument function will be applied. With the argument nIncr one may choose whether only each nIncr-th column/line shall be selected. If only nFirst is passed, then nIncr will be identical to nFirst. Columns/lines may also be selected directly, if a vector is passed for nFirst: every({VEC})
PARSERFUNCS_LISTFUNC_METHOD_NAME_[DATA]=				    name                   STR      - Returns the table name as string e.g. to be used together with "findcolumn()"
PARSERFUNCS_LISTFUNC_METHOD_ALIASOF_[DATA]=				    aliasof(sTable)        STR      - Converts the current table into an alias to the table whose name was passed by the string sTable. The current table is masked and cannot be used during this process. An empty string deactivates the alias again. This method returns the name of the referenced table
PARSERFUNCS_LISTFUNC_METHOD_MIN_[DATA]=				        min                   {VAL}     - Applies the multi-argument function "min()" on the data set. Using the modificators .cols, .lines, .grid and .every(), the function may be restricted further
PARSERFUNCS_LISTFUNC_METHOD_MAX_[DATA]=				        max                   {VAL}     - Applies the multi-argument function "max()" on the data set. Using the modificators .cols, .lines, .grid and .every(), the function may be restricted further
PARSERFUNCS_LISTFUNC_METHOD_SUM_[DATA]=				        sum                   {VAL}     - Applies the multi-argument function "sum()" on the data set. Using the modificators .cols, .lines, .grid and .every(), the function may be restricted further
PARSERFUNCS_LISTFUNC_METHOD_AVG_[DATA]=				        avg                   {VAL}     - Applies the multi-argument function "avg()" on the data set. Using the modificators .cols, .lines, .grid and .every(), the function may be restricted further
PARSERFUNCS_LISTFUNC_METHOD_STD_[DATA]=				        std                   {VAL}     - Applies the multi-argument function "std()" on the data set. Using the modificators .cols, .lines, .grid and .every(), the function may be restricted further
PARSERFUNCS_LISTFUNC_METHOD_PRD_[DATA]=				        prd                   {VAL}     - Applies the multi-argument function "prd()" on the data set. Using the modificators .cols, .lines, .grid and .every(), the function may be restricted further
PARSERFUNCS_LISTFUNC_METHOD_MED_[DATA]=				        med                   {VAL}     - Applies the multi-argument function "med()" on the data set. Using the modificators .cols, .lines, .grid and .every(), the function may be restricted further
PARSERFUNCS_LISTFUNC_METHOD_NUM_[DATA]=				        num                   {VAL}     - Applies the multi-argument function "num()" on the data set. Using the modificators .cols, .lines, .grid and .every(), the function may be restricted further
PARSERFUNCS_LISTFUNC_METHOD_CNT_[DATA]=				        cnt                   {VAL}     - Applies the multi-argument function "cnt()" on the data set. Using the modificators .cols, .lines, .grid and .every(), the function may be restricted further
PARSERFUNCS_LISTFUNC_METHOD_NORM_[DATA]=				    norm                  {VAL}     - Applies the multi-argument function "norm()" on the data set. Using the modificators .cols, .lines, .grid and .every(), the function may be restricted further
PARSERFUNCS_LISTFUNC_METHOD_AND_[DATA]=				        and                   {LOG}     - Applies the multi-argument function "and()" on the data set. Using the modificators .cols, .lines, .grid and .every(), the function may be restricted further
PARSERFUNCS_LISTFUNC_METHOD_OR_[DATA]=				        or                    {LOG}     - Applies the multi-argument function "or()" on the data set. Using the modificators .cols, .lines, .grid and .every(), the function may be restricted further
PARSERFUNCS_LISTFUNC_METHOD_XOR_[DATA]=				        xor                   {LOG}     - Applies the multi-argument function "xor()" on the data set. Using the modificators .cols, .lines, .grid and .every(), the function may be restricted further
PARSERFUNCS_LISTFUNC_METHOD_SIZE_[DATA]=				    size                  {VAL}     - Returns the size of the table in rows and columns. Using the modificators .cols (length of columns), .lines (length of rows), .grid and .every(), the function may be restricted further
PARSERFUNCS_LISTFUNC_METHOD_MINPOS_[DATA]=				    minpos                {VAL}     - Returns the position of the minimal value of the table in rows and columns. Using the modificators .cols (minimal values of columns), .lines (minimal values of rows), .grid and .every(), the function may be restricted further. In case of multiple occurences of the same value, only the first found occurence is returned
PARSERFUNCS_LISTFUNC_METHOD_MAXPOS_[DATA]=				    maxpos                {VAL}     - Returns the position of the maximal value of the table in rows and columns. Using the modificators .cols (maximal values of columns), .lines (maximal values of rows), .grid and .every(), the function may be restricted further. In case of multiple occurences of the same value, only the first found occurence is returned
# Ende Methoden
PARSERFUNCS_LISTDEFINE_HEADLINE=Custom defined functions
PARSERFUNCS_LISTDEFINE_EMPTY=No custom defined functions.
PARSERFUNCS_LISTDEFINE_DESCRIPTION=	Description:     %%1%%
PARSERFUNCS_LISTDEFINE_DEFINITION=	Definition:      %%1%% := %%2%%
PARSERFUNCS_LISTDEFINE_FUNCTIONS=Functions
PARSERFUNCS_LISTLOGICAL_HEADLINE=Logical expressions
PARSERFUNCS_LISTLOGICAL_TABLEHEAD=	Expression:  Result:
PARSERFUNCS_LISTLOGICAL_ITEM01=		A            - TRUE, if A is TRUE, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM02=		!A           - TRUE, if A is FALSE, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM03=		A && B       - TRUE, if A and B are TRUE, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM04=		A || B       - TRUE, if A or B is TRUE, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM05=		A ||| B      - TRUE, if either A or B is TRUE, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM06=		A ? x : y    - If A is TRUE, then x, otherwise y
PARSERFUNCS_LISTLOGICAL_ITEM07=		x & y        - Binary AND
PARSERFUNCS_LISTLOGICAL_ITEM08=		x | y        - Binary OR
PARSERFUNCS_LISTLOGICAL_ITEM09=		x < y        - TRUE, if x is smaller than y, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM10=		x > y        - TRUE, if x is larger than y, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM11=		x <= y       - TRUE, if x is smaller than or equal to y, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM12=		x >= y       - TRUE, if x is larger than or equal to y, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM13=		x == y       - TRUE, if x is equal to y, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_ITEM14=		x != y       - TRUE, if x is not equal to y, FALSE otherwise
PARSERFUNCS_LISTLOGICAL_FOOTNOTE1=TRUE corresponds to the value 1, FALSE to 0. Logical expressions can be applied to strings, see "help string". Binary operators compare the bit values directly and may return values not equal to {1,0}.
PARSERFUNCS_LISTLOGICAL_FOOTNOTE2=A concatenation of multiple logical expression should be done with AND and OR operators. Otherwise the result of the previous expression (1 or 0) will be used for evaluating the current one. For example: if you like to check, if the value of the variable x lies in the interval [a,b], you have to check, if the expression "x >= a && x <= b" is TRUE. Of course, this can be achieved easier via "!is_nan(range(x,a,b))"
PARSERFUNCS_LISTVAR_HEADLINE=Defined variables
PARSERFUNCS_LISTVAR_EMPTY=No variables are defined.
PARSERFUNCS_LISTVAR_VARS_AND=Variable(s) and
PARSERFUNCS_LISTVAR_DATATABLES=Data table(s)
PARSERFUNCS_LISTCONST_HEADLINE=Defined constants
PARSERFUNCS_LISTCONST_EMPTY=No constants defined.
PARSERFUNCS_LISTCONST_FOOTNOTE1=The constants are---if applicable---stored in SI units:$[kg, J, K, m, s, A, mol, T]
PARSERFUNCS_LISTCONST_FOOTNOTE2=Special constants/values are "nan" (no real value), "inf" (infinity), "true" (TRUE), "false" (FALSE) and "void" (empty/no value).
PARSERFUNCS_LISTCONST_TYPE_ATOMIC=Nuclear physics
PARSERFUNCS_LISTCONST_TYPE_FIELDTHEORY=Fieldtheory
PARSERFUNCS_LISTCONST_TYPE_MATHEMATICAL=Mathematics
PARSERFUNCS_LISTCONST_TYPE_CHEMICAL=Chemics
PARSERFUNCS_LISTCONST_TYPE_PARTICLE=Particle physics
PARSERFUNCS_LISTCONST_TYPE_THERMO=Thermodynamics
PARSERFUNCS_LISTCONST_TYPE_ASTRO=Astro physics
PARSERFUNCS_LISTEXPRVAR_HEADLINE=Variables in expression
PARSERFUNCS_LISTEXPRVAR_EMPTY=No expression passed.
PARSERFUNCS_LISTEXPRVAR_EXPR=Expression: %%1%%
PARSERFUNCS_LISTEXPRVAR_NOVARS=Expression doesn't contain any variables.
PARSERFUNCS_LISTEXPRVAR_FOOTNOTE=%%1%% variable(s)
PARSERFUNCS_LISTCMD_HEADLINE=command set
# Kommandotabelle
PARSERFUNCS_LISTCMD_TYPE_EVAL=Evaluation
PARSERFUNCS_LISTCMD_TYPE_PLOTTING=Plotting
PARSERFUNCS_LISTCMD_TYPE_FLOWCTRL=Control flow
PARSERFUNCS_LISTCMD_TYPE_PROC=Procedures
PARSERFUNCS_LISTCMD_TYPE_DATACREATION=Data creation
PARSERFUNCS_LISTCMD_TYPE_LOADSAVE=Loading and saving
PARSERFUNCS_LISTCMD_TYPE_DEF=Definitions
PARSERFUNCS_LISTCMD_TYPE_DATACTRL=Data control
PARSERFUNCS_LISTCMD_TYPE_MAINCTRL=Control
PARSERFUNCS_LISTCMD_TYPE_MISC=Miscellaneous
PARSERFUNCS_LISTCMD_TYPE_GUI=Graphical user interface
PARSERFUNCS_LISTCMD_TYPE_PLUGINS=Plugins
PARSERFUNCS_LISTCMD_TABLEHEAD=							Command:     Syntax and result:     Function:
PARSERFUNCS_LISTCMD_CMD_ABORT_[FLOWCTRL]=				abort                               - Aborts the interactive declaration of the current loop, fork or plot composition in the console, so that the console can be used again normally
PARSERFUNCS_LISTCMD_CMD_ABOUT_[MAINCTRL]=				about                               - Displays legal information about NumeRe in the console
PARSERFUNCS_LISTCMD_CMD_APPEND_[LOADSAVE]=				append       NM [-PAR]  -> {VAL}    - Appends the data of the file NM to already loaded data in memory. The parameter allows appending of multiple files at once. Returns the indices of the appended data in the target table
PARSERFUNCS_LISTCMD_CMD_ASSERT_[MAINCTRL]=				assert       EX  -> {ARG}           - Checks the passed expression for trueness and returns it. If it is not true the command throws an error. This command is intended for use in a software test
PARSERFUNCS_LISTCMD_CMD_AUDIO_[LOADSAVE]=				audio        OB [-PAR]              - Creates a WAVE audio file from the given data set in OB. Using parameters one can change the sample rate and the target file name
PARSERFUNCS_LISTCMD_CMD_BREAK_[FLOWCTRL]=				break                               - Aborts the execution of the current loop or leaves the current case of a switch block and jumps one level up in the control flow
PARSERFUNCS_LISTCMD_CMD_CACHE_[DATACTRL]=				cache        -PAR  -> {VAL}         - Options applied to the elements in a cache. The parameters allow multiple operations, just like applying multi-argument functions
PARSERFUNCS_LISTCMD_CMD_CLEAR_[DATACTRL]=				clear        OB [-PAR]              - Irreversibly removes all elements in the selected object from this computer. The parameter may be used to suppress the confirmation (-ignore) or to remove all tables at once (-memory)
PARSERFUNCS_LISTCMD_CMD_CLOSE_[MAINCTRL]=				close        -PAR                   - Closes previously opened windows that are selected by parameters: -graphs closes all graphs, -docs all documentation windows, -tables all tables, -images all ImageViewers and -all closes all windows from this list
PARSERFUNCS_LISTCMD_CMD_COMPOSE_[PLOTTING]=				compose                             - Starts the composition of multiple plotting styles, so that one combined plot may be created out of the calculated plots of this environment. One can also use this environment to align mulitple plots together in a single window
PARSERFUNCS_LISTCMD_CMD_CONT_[PLOTTING]=				cont         EX [-set PAR]          - Creates a contour line plot from the expression or the data in EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_CONT3D_[PLOTTING]=				cont3d       EX [-set PAR]          - Creates a 3D contour line plot from the expression EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_CONTINUE_[FLOWCTRL]=			continue                            - Jumps over the following commands of the current loop execution and starts the next execution
PARSERFUNCS_LISTCMD_CMD_COPY_[MAINCTRL]=				copy         OB [-PAR]              - Copies (depending on the actual expression OB) entries/columns/subtables between data objects or complete files. Using parameters one can specify the target table or file or transpose the data if needed or select multiple files
PARSERFUNCS_LISTCMD_CMD_CST_[PROC]=						cst          EX                     - Defines the local clusters in the current procedure using the expression EX
PARSERFUNCS_LISTCMD_CMD_DATA_[DATACTRL]=				data         -PAR  -> {VAL}         - Options applied to the elements of the loaded data file. The parameters allow multiple operations, just like applying multi-argument functions
PARSERFUNCS_LISTCMD_CMD_DATAGRID_[DATACREATION]=		datagrid     EX -PAR                - Creates a data grid from the expression or the data in EX. The x and y values have to be passed as parameters. In addition, the number of samples and the target table can be passed via parameters
PARSERFUNCS_LISTCMD_CMD_DEFINE_[DEF]=					define       EX [-set PAR]          - Defines the function in EX, where the function has to be passed as NAME(ARG) := EXPRESSION(ARG). Parameters allow commenting the function and conversion of variables into their values
PARSERFUNCS_LISTCMD_CMD_DELETE_[DATACTRL_MAINCTRL]=		delete       OB [-PAR]              - Removes elements from a table/from the string() object in OB. The parameter may be used to suppress the confirmation
PARSERFUNCS_LISTCMD_CMD_DENS_[PLOTTING]=				dens         EX [-set PAR]          - Creates a density plot from the expression or the data in EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_DENS3D_[PLOTTING]=				dens3d       EX [-set PAR]          - Creates a 3D density plot from the expression EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_DETECT_[EVAL]=					detect       OB [-set PAR]          - Detects structures in a 2D datagrid and stores them as (x,y) in the target table, where different structures are separated by an empty row. It's possible to define a threshold, a minimal length and a maximal distance between points of a single structure.
PARSERFUNCS_LISTCMD_CMD_DIALOG_[MAINCTRL_GUI]=			dialog       STR -set PAR  -> {STR} - Creates a dialog window to interact with the user. The type of the dialog is selected using the parameters. Additionally, the title, a message, the icon and the buttons of the message box may be changed. The selection of the user or the value of the clicked button is returned as string
PARSERFUNCS_LISTCMD_CMD_DIFF_[EVAL]=					diff         EX -set PAR  -> {VAL}  - Differentiates the expression or the data in EX numerically. The position or the interval, the precision and the number of samples may be set using parameters
PARSERFUNCS_LISTCMD_CMD_DRAW_[PLOTTING]=				draw         EX [-set PAR]          - Creates a drawing from the drawing functions in the expression EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_DRAW3D_[PLOTTING]=				draw3d       EX [-set PAR]          - Creates a 3D drawing from the drawing functions in the expression EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_EDIT_[MAINCTRL]=				edit         OB                     - Opens a table, a file or a directory for editing its contents
PARSERFUNCS_LISTCMD_CMD_ELSE_[FLOWCTRL]=				else                                - Starts the definition of expressions and commands, which shall be executed, if all "if" and "elseif" forks fail
PARSERFUNCS_LISTCMD_CMD_ELSEIF_[FLOWCTRL]=				elseif       (EX)                   - Starts the definition of expressions and commands, which shall be executed, if the previous "if" and "elseif" forks fail. The expression EX must have a logical meaning
PARSERFUNCS_LISTCMD_CMD_ENDCOMPOSE_[PLOTTING]=			endcompose                          - Finalizes the definition of the previous initiated plot composition
PARSERFUNCS_LISTCMD_CMD_ENDFOR_[FLOWCTRL]=				endfor       [-PAR]                 - Finalizes the definition of a previous initiated FOR loop. The parameter may be used for suppressing the status messages and to forcefully abort the loop after a defined number of iterations
PARSERFUNCS_LISTCMD_CMD_ENDIF_[FLOWCTRL]=				endif                               - Finalizes the definition of a previous initiated IF construct
PARSERFUNCS_LISTCMD_CMD_ENDPROCEDURE_[FLOWCTRL_PROC]=	endprocedure                        - Finalizes the definition of a previous initiated NumeRe procedure
PARSERFUNCS_LISTCMD_CMD_ENDWHILE_[FLOWCTRL]=			endwhile     [-PAR]                 - Finalizes the definition of a previous initiated WHILE loop. The parameter may be used for suppressing the status messages and to forcefully abort the loop after a defined number of iterations
PARSERFUNCS_LISTCMD_CMD_EVAL_[DATACREATION]=			eval         EX -set PAR  -> {VAL}  - Calculates function values of the passed expression EX at distinct points (samples). The interval has to be passed through a parameter. Additionally, one can change the number of samples and switch to a logarithmic distribution using parameters
PARSERFUNCS_LISTCMD_CMD_EXECUTE_[MAINCTRL]=				execute      STR [-set PAR]         - Executes the command in STR using the Windows shell. The parameter may be used to append command line parameters to the command, to wait for the opened application to terminate or to define the working directory for the application
PARSERFUNCS_LISTCMD_CMD_EXPLICIT_[MAINCTRL]=			explicit     CMD                    - Deactivates all plugins for the command expression CMD
PARSERFUNCS_LISTCMD_CMD_EXPORT_[LOADSAVE]=				export       OB [-PAR]              - Exports the data in OB into the via the file extension defined file format. The file name has to be passed via the parameter
PARSERFUNCS_LISTCMD_CMD_EXTREMA_[EVAL]=					extrema      EX -set PAR  -> {VAL}  - Determines the extrema of the expression or the data in EX numerically. The interval has to be passed through a parameter. Additionally, one can change the number of samples and restrict the results to minima and maxima using parameters
PARSERFUNCS_LISTCMD_CMD_FFT_[EVAL]=						fft          OB [-PAR]              - Calculates the Fourier transform of the passed data set OB. Using the parameters one can switch to complex representation or inverse transformation. Additionally one can define the target tabele using the parameter
PARSERFUNCS_LISTCMD_CMD_FIND_[MAINCTRL]=				find         NM                     - Executes a keyword search for the term NM in NumeRe
PARSERFUNCS_LISTCMD_CMD_FIT_[EVAL]=						fit          OB -PAR                - Fits a function to the data in OB using a variation of the parameters. The function and the parameters for fitting can be passed using parameters. Additionally one can set restrictions for the fitting parameters and generate a Chi-Map
PARSERFUNCS_LISTCMD_CMD_FITW_[EVAL]=					fitw         OB -PAR                - Fits a function to the data in OB, whose error values (weighting factors) are considered, using a variation of the parameters. The function and the parameters for fitting can be passed using parameters. Additionally one can set restrictions for the fitting parameters and generate a Chi-Map
PARSERFUNCS_LISTCMD_CMD_FOR_[FLOWCTRL]=					for          (EX)                   - Starts the definition of a FOR loop. The index of the loop has to be passed in the shape INDEX = START:END in the expression EX
PARSERFUNCS_LISTCMD_CMD_FWT_[EVAL]=						fwt          OB -PAR                - Calculates the wavelet transform of the passed data set OB. The type and degree of the base wavelet may be set using parameters. Additionally one can switch to inverse transformation or creation of a data grid. The target table may also be defined in advance
PARSERFUNCS_LISTCMD_CMD_GET_[MAINCTRL]=					get          -PAR  -> {ARG}         - Returns the value of the queried setting. The type of the return value can be selected using the parameter
PARSERFUNCS_LISTCMD_CMD_GLOBAL_[MISC]=					global       EX/CMD                 - Declares the expression EX or the command CMD as global
PARSERFUNCS_LISTCMD_CMD_GRAD_[PLOTTING]=				grad         EX [-set PAR]          - Creates a gradient plot from the expression or the data in EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_GRAD3D_[PLOTTING]=				grad3d       EX [-set PAR]          - Creates a 3D gradient plot from the expression EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_HELP_[MAINCTRL]=				help         [NM]                   - Opens the article of the NumeRe documentation concerning the topic NM
PARSERFUNCS_LISTCMD_CMD_HIST_[EVAL]=					hist         OB [-PAR]              - Creates a histogram from the data in OB. The histogram may be modified in multiple ways. See "help hist" for details
PARSERFUNCS_LISTCMD_CMD_HIST2D_[EVAL]=					hist2d       OB [-PAR]              - Creates a 2D histogram from a (x,y,z) data set. Expects either a data grid or (x,y,z) tupels in OB. The histogram may be modified in multiple ways. See "help hist" for details
PARSERFUNCS_LISTCMD_CMD_HLINE_[MISC]=					hline        [-PAR]                 - Draws a double horizontal line. Using the parameter "-single", this command will draw only one single line
PARSERFUNCS_LISTCMD_CMD_IF_[FLOWCTRL]=					if           (EX)                   - Starts the definition of an IF construct. The expression EX must have a logical meaning
PARSERFUNCS_LISTCMD_CMD_IFNDEFINED_[DEF]=				ifndefined   EX [-set PAR]          - Checks before the actual definition, if the current function in EX is not already defined, where the function has to be passed as NAME(ARG) := EXPRESSION(ARG). Parameters allow commenting the function and conversion of variables into their values
PARSERFUNCS_LISTCMD_CMD_IMPLOT_[PLOTTING]=				implot       EX [-set PAR]          - Creates a visual representation of the expression or the data set as an image. The data interval is automatically assumed as [0,255]. May be combined with other plotting styles
PARSERFUNCS_LISTCMD_CMD_IMREAD_[LOADSAVE]=				imread       NM  -> {VAL}           - Reads the image file NM as data grid into the table "image()". The target table may be changed using the options. The indices of the image in the table are returned
PARSERFUNCS_LISTCMD_CMD_INSTALL_[MAINCTRL]=				install      NM                     - Executes the install routines in the script NM. May only be used directly in the console
PARSERFUNCS_LISTCMD_CMD_INTEGRATE_[EVAL]=				integrate    EX -set PAR  -> {VAL}  - Integrates the expression or the data in EX numerically. An expression may also be integrated in two dimensions. The integration intervals have to be passed as parameters. Additionally, one can set the precision and the method for integration as well as returning the numerical determined indefinite integral
PARSERFUNCS_LISTCMD_CMD_LCLFUNC_[DEF]=					lclfunc       EX [-set PAR]         - Defines the function in EX for the usage in the current script or the current procedure, where the function has to be passed as NAME(ARG) := EXPRESSION(ARG). Parameters allow commenting the function and conversion of variables into their values. The function is removed automatically at the end of the current scope
PARSERFUNCS_LISTCMD_CMD_LIST_[MAINCTRL]=				list         -PAR                   - Creates a list of the values, which are available for the passed parameter. The possible parameters are available at "help list"
PARSERFUNCS_LISTCMD_CMD_LOAD_[LOADSAVE]=				load         NM [-PAR]  -> {VAL}    - Loads the data of the file NM into the data() object. Through parameters one can load multiple files at once or write the loaded data directly into a target table. Returns the indices of the data in the target table
PARSERFUNCS_LISTCMD_CMD_MATOP_[EVAL]=					matop        EX                     - Evaluates the expression EX using the matrix mode. ("mtrxop" is a synonym)
PARSERFUNCS_LISTCMD_CMD_MESH_[PLOTTING]=				mesh         EX [-set PAR]          - Creates a meshgrid plot from the expression or the data in EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_MESH3D_[PLOTTING]=				mesh3d       EX [-set PAR]          - Creates a 3D meshgrid plot from the expression EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_MOVE_[MAINCTRL]=				move         OB -PAR                - Moves (depending on the actual expression in OB) entries/columns/subtables in tables or complete files. Using parameters one can specify the target table or file or transpose the data if needed or select multiple files
PARSERFUNCS_LISTCMD_CMD_NAMESPACE_[PROC]=				namespace    [NM]                   - Changes the current namespace in procedures to the namespace NM
PARSERFUNCS_LISTCMD_CMD_NEW_[MAINCTRL]=					new          EX                     - Creates depending on the expression EX new directories, scripts, procedures, files or tables
PARSERFUNCS_LISTCMD_CMD_ODESOLVE_[EVAL]=				odesolve     EX -set PAR            - Numerically solves the ordinary differential equations, which were passed as expression EX. The integration interval as well as the initial values have to be passed as parameters. In addition, one can modify the method, the number of integration steps, the target table, the algorithm's tolerances and calculate the Lyapunov exponent
PARSERFUNCS_LISTCMD_CMD_PLOT_[PLOTTING]=				plot         EX [-set PAR]          - Creates a graphical plot of the expression or the data in EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_PLOT3D_[PLOTTING]=				plot3d       EX [-set PAR]          - Creates a three-dimensional, graphical plot of the expression or the data in EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_PRINT_[MISC_MAINCTRL]=			print        STR                    - Prints the passed string STR without the quotation marks as message on the screen
PARSERFUNCS_LISTCMD_CMD_PROCEDURE_[FLOWCTRL_PROC]=		procedure    \$NM(ARGS)              - Defines the name NM and the argument list ARGS of the NumeRe procedure
PARSERFUNCS_LISTCMD_CMD_PROGRESS_[MISC_FLOWCTRL]=		progress     EX [-set PAR]          - Shows a the status EX of a progress. Only suitable for scripts and procedures. The first and last value as well as the type of the status display may be set via parameters
PARSERFUNCS_LISTCMD_CMD_PULSE_[EVAL]=					pulse        OB  -> {VAL}           - Determines the pulse properties of the passed data set OB
PARSERFUNCS_LISTCMD_CMD_QUIT_[MAINCTRL]=				quit         [-PAR]                 - Exits NumeRe. The parameter influences the creation of an auto save file
PARSERFUNCS_LISTCMD_CMD_RANDOM_[DATACREATION]=			random       -PAR                   - Creates a set of random numbers depending on the chosen distribution and its parameters. The list of parameters is available at "help random"
PARSERFUNCS_LISTCMD_CMD_READ_[LOADSAVE]=				read         NM [-PAR]  -> {STR}    - Reads the content of the file NM and returns its lines as separate strings. Using a parameter one can define a comment sign. Binary files cannot be read with this command
PARSERFUNCS_LISTCMD_CMD_READLINE_[PROC]=				readline     [-PAR]  -> {ARG}       - Allows a formatted prompt for a value and the directly conversion to a numerical value or a string. The parameter set contains the printing of a message, defining a default value and conversion flags
PARSERFUNCS_LISTCMD_CMD_REDEFINE_[DEF]=					redefine     EX [-set PAR]          - Redefines an already existing, custom defined function using the expression EX, where the function has to be passed as NAME(ARG) := EXPRESSION(ARG). Parameters allow commenting the function, recursive defining and conversion of variables into their values
PARSERFUNCS_LISTCMD_CMD_REGULARIZE_[EVAL]=				regularize   OB [-PAR]              - Regularizes data rows in OB. Arbitrary distributed x values will be regularly distributed afterwards. The number of x values may be changed using the parameter
PARSERFUNCS_LISTCMD_CMD_RELOAD_[LOADSAVE]=				reload       [NM -PAR]  -> {VAL}    - Updates the data in memory, e.g. if the data file was modified externally. Corresponds to the command "load NM [-PAR] -ignore", where NM is replaced by the name of the already loaded file, if applicable
PARSERFUNCS_LISTCMD_CMD_REMOVE_[MAINCTRL]=				remove       OB [-PAR]              - Irreversibly removes the table or the passed files in OB from this computer. One can suppress the eventually needed confirmation or select multiple files using the parameters
PARSERFUNCS_LISTCMD_CMD_RENAME_[DATACTRL]=				rename       OB, NM                 - Renames an already available table
PARSERFUNCS_LISTCMD_CMD_RESAMPLE_[EVAL]=				resample     OB -PAR                - Changes the sampling frequency of the data in OB. The new number of samples and the application of the command to only specific directions of the table may be set using parameters
PARSERFUNCS_LISTCMD_CMD_RETOUCH_[EVAL]=					retouch      OB [-PAR]              - Removes invalid values from the data set OB. The application of the command to only specific directions of the table may be set using a parameter
PARSERFUNCS_LISTCMD_CMD_RETURN_[FLOWCTRL_PROC]=			return       [EX]                   - Declares the return value of the procedure using the expression EX. Can also be used to leave a script at the current line
PARSERFUNCS_LISTCMD_CMD_SAVE_[LOADSAVE]=				save         OB [-PAR]              - Saves the passed object OB using the chosen file name. The file name has to be passed using the parameter
PARSERFUNCS_LISTCMD_CMD_SCRIPT_[MISC_MAINCTRL]=			script       -PAR                   - Loads and starts scripts
PARSERFUNCS_LISTCMD_CMD_SET_[MAINCTRL]=					set          -PAR                   - Changes the value of the chosen setting or introduces the options list of the current command. A list of all possible program settings is available at "help set"
PARSERFUNCS_LISTCMD_CMD_SHOW_[DATACTRL]=				show         OB                     - Shows the content of the passed data object OB
PARSERFUNCS_LISTCMD_CMD_SMOOTH_[EVAL]=					smooth       OB -PAR                - Smoothes out the noise on the passed data OB by linearizing depending on the requested order. The order of linearisation and the application of the command to only specific directions of the table may be set using parameters
PARSERFUNCS_LISTCMD_CMD_SORT_[DATACTRL]=				sort         OB [-PAR]  -> {VAL}    - Sorts the data set OB. The choice of index columns, the sorting direction and returning an sorting index vector may be set using the parameter
PARSERFUNCS_LISTCMD_CMD_SPLINE_[EVAL]=					spline       OB                     - Calculates cubic splines for the passed data points OB and defines them as function
PARSERFUNCS_LISTCMD_CMD_START_[MISC]=					start        NM                     - Starts the script NM
PARSERFUNCS_LISTCMD_CMD_STATS_[EVAL]=					stats        OB [-PAR]  -> {STR}    - Calculates the statistics of the passed data set OB. These values may be stored in a table (the command will return the row labels in this case) or exported directly into a file, if the corresponding parameter was passed
PARSERFUNCS_LISTCMD_CMD_STFA_[EVAL]=					stfa         OB [-PAR]              - Calculates a short-time Fourier analysis of the passed data set OB and stores it as a new data grid. Parameters allow to change the windowsize and the target table
PARSERFUNCS_LISTCMD_CMD_STR_[PROC]=						str          EX                     - Defines the local string variables in the current procedure through the expression EX
PARSERFUNCS_LISTCMD_CMD_SUBPLOT_[PLOTTING]=				subplot      [EX -set PAR]          - Starts a new subplot in the multiplot mode of compose. The parameters allow to enlarge the subplot over multiple rows and columns of the created grid
PARSERFUNCS_LISTCMD_CMD_SURF_[PLOTTING]=				surf         EX [-set PAR]          - Creates a surface plot from the expression or the data in EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_SURF3D_[PLOTTING]=				surf3d       EX [-set PAR]          - Creates a 3D surface plot from the expression EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_SWAP_[DATACTRL]=				swap         OB1, OB2               - Swaps the contents of two tables
PARSERFUNCS_LISTCMD_CMD_TAB_[PROC]=						tab          EX                     - Defines the local tables in the current procedure using the expression EX
PARSERFUNCS_LISTCMD_CMD_TAYLOR_[EVAL]=					taylor       EX -set PAR            - Expands the passed expression EX into a taylor polynomial of the order n. The variable and the position of the expansion have to be passed as parameters. Additionally, one can choose the order of the expansion
PARSERFUNCS_LISTCMD_CMD_THROW_[FLOWCTRL_PROC]=			throw        [STR]                  - Aborts the procedure execution in case of an error and displays the error message STR in the console
PARSERFUNCS_LISTCMD_CMD_UNDEFINE_[DEF]=					undefine     EX                     - Removes the custom function definition, which corresponds to the expression EX
PARSERFUNCS_LISTCMD_CMD_UNINSTALL_[MAINCTRL]=			uninstall    NM                     - Removes the plugin NM. May only be used directly in the console
PARSERFUNCS_LISTCMD_CMD_VAR_[PROC]=						var          EX                     - Defines the local numerical variables in the current procedure using the expression EX
PARSERFUNCS_LISTCMD_CMD_VECT_[PLOTTING]=				vect         EX [-set PAR]          - Creates a vector plot from the expression EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_VECT3D_[PLOTTING]=				vect3d       EX [-set PAR]          - Creates a 3D vector plot from the expression EX. The plot may be modified in multiple ways. See "help plotoptions" for details
PARSERFUNCS_LISTCMD_CMD_WARN_[MAINCTRL]=				warn         STR                    - Displays the string STR as warning in the console
PARSERFUNCS_LISTCMD_CMD_WHILE_[FLOWCTRL]=				while        (EX)                   - Starts the definition of a WHILE loop. The expression EX must have a logical meaning
PARSERFUNCS_LISTCMD_CMD_WORKPATH_[MISC_MAINCTRL]=		workpath     NM                     - Changes the current working directory for this session to the directory NM
PARSERFUNCS_LISTCMD_CMD_WRITE_[LOADSAVE]=				write        STR -set PAR           - Writes the passed strings STR into the chosen file. The file name has to be defined using the parameter set. In addition, one can suppress the surrounding quotation marks and choose the writing mode
PARSERFUNCS_LISTCMD_CMD_ZEROES_[EVAL]=					zeroes       EX -set PAR  -> {VAL}  - Determines the roots (intersections with zero) of the expression or the data in EX numerically. The interval has to be passed through a parameter. Additionally, one can change the number of samples and restrict the results to up- or downward oriented roots using parameters
PARSERFUNCS_LISTCMD_CMD_SWITCH_[FLOWCTRL]=				switch      (EX)                    - Starts a switch fork, which has to contain at least one 'case'. The expression EX has to be numerical or a string expression
PARSERFUNCS_LISTCMD_CMD_CASE_[FLOWCTRL]=				case         EX:                    - Defines a case in a switch fork. The expression EX has to be a numerical value or a string
PARSERFUNCS_LISTCMD_CMD_DEFAULT_[FLOWCTRL]=				default:                            - Defines the "otherwise" case in a switch fork
PARSERFUNCS_LISTCMD_CMD_ENDSWITCH_[FLOWCTRL]=			endswitch                           - Finalizes a switch fork
PARSERFUNCS_LISTCMD_CMD_WINDOW_[MAINCTRL_GUI]=			window       EX [-set PAR]  -> {ARG}- Allows the creation of an interactive window and the interaction with it. With "window ID -get PAR" values and parameters of the window with the ID can be read and with "window ID -set PAR=VAL" they can also be modified
PARSERFUNCS_LISTCMD_CMD_LAYOUT_[GUI]=					layout       [-PAR]                 - Starts the definition of a window layout that can be used to create an interactive window
PARSERFUNCS_LISTCMD_CMD_ENDLAYOUT_[GUI]=				endlayout                           - Ends the definition of a previously started window layout
PARSERFUNCS_LISTCMD_CMD_GROUP_[GUI]=					group        [-PAR]                 - Starts the definition of a grouping box for a window layout. The box can be labeled and aligned in a defined way. Using the parameters even further styles are available like tabbed boxes or menues
PARSERFUNCS_LISTCMD_CMD_ENDGROUP_[GUI]=					endgroup                            - Ends the definition of a previously started grouping box
PARSERFUNCS_LISTCMD_CMD_BUTTON_[GUI]=					button       EX [-set PAR]          - Inserts a labelable button into a window layout. The event handling is configurable
PARSERFUNCS_LISTCMD_CMD_RADIO_[GUI]=					radio        EX [-set PAR]          - Inserts a radio group into a window layout. The event handling and the start value are configurable
PARSERFUNCS_LISTCMD_CMD_TEXT_[GUI]=						text         EX [-set PAR]          - Inserts a static text into a window layout
PARSERFUNCS_LISTCMD_CMD_TEXTFIELD_[GUI]=				textfield    EX [-set PAR]          - Inserts a text field into a window layout. Event handling, multiline and start value are configurable
PARSERFUNCS_LISTCMD_CMD_TREELIST_[GUI]=					treelist     [-set PAR]             - Inserts a tree list into a window layout. Event handling, the number of columns and the number of elements are configurable
PARSERFUNCS_LISTCMD_CMD_CHECKBOX_[GUI]=					checkbox     EX [-set PAR]          - Inserts a checkbox into a window layout. The event handling and the start value are configurable. If used inside a menu, this is converted into a menu item with a checkbox
PARSERFUNCS_LISTCMD_CMD_DROPDOWN_[GUI]=					dropdown     EX [-set PAR]          - Inserts a dropdown list into a window layout. The event handling and the start value are configurable
PARSERFUNCS_LISTCMD_CMD_SPINBUT_[GUI]=					spinbut      [-set PAR]             - Inserts a spin button object into a window layout. The event handling and the start value are configurable
PARSERFUNCS_LISTCMD_CMD_SLIDER_[GUI]=					slider       [-set PAR]             - Inserts a slider into a window layout. The event handling and the start value are configurable
PARSERFUNCS_LISTCMD_CMD_GAUGE_[GUI]=					gauge        [-set PAR]             - Inserts a progress bar (a gauge) into a window layout. The starting value and the orientation are configurable
PARSERFUNCS_LISTCMD_CMD_TABLEGRID_[GUI]=				tablegrid    [-set PAR]             - Inserts a table grid into a window layout. The event handling and the size in rows and columns are configurable
PARSERFUNCS_LISTCMD_CMD_BITMAP_[GUI]=					bitmap       EX [-set PAR]          - Inserts an image, where the filename is passed via EX into a window layout
PARSERFUNCS_LISTCMD_CMD_GRAPHER_[GUI]=					grapher      [-set PAR]             - Inserts a graph object into a window layout. The event handling and the size of the object are configurable. Filling of this object has to be done via a plotting command using the "streamto={WINID,ITEMID}" option
PARSERFUNCS_LISTCMD_CMD_SEPARATOR_[GUI]=				separator    EX [-set PAR]          - Inserts a separator object into a window layout. The separator may be either a vertical or a horizontal line or a simple space. If used in menues, the separator is always a horizontal line
PARSERFUNCS_LISTCMD_CMD_MENUITEM_[GUI]=					menuitem     EX [-set PAR]          - Defines an entry in a menu for a window layout. The event handling and the presence of a checkbox are configurable
PARSERFUNCS_LISTCMD_CMD_PROP_[GUI]=						prop         EX                     - Genereates one ore more internal variables for the current window layout, which may be filled with information. The variables are intrinsical type less and may contain numerical values as well as strings
PARSERFUNCS_LISTCMD_CMD_TABROT_[EVAL]=					tabrot       OB -set PAR            - Rotates the passed table around the defined angle and saves the result in the chosen target table
PARSERFUNCS_LISTCMD_CMD_GRIDROT_[EVAL]=					gridrot      OB -set PAR            - Rotates the passed data grid around the defined angle and saves the result in the chosen target table
PARSERFUNCS_LISTCMD_CMD_IMROT_[EVAL]=					imrot        OB -set PAR            - Rotates the passed image data set around the defined angle and saves the result in the chosen target table
PARSERFUNCS_LISTCMD_CMD_PSO_[EVAL]=						pso          EX [-set PAR]  -> {VAL}- Uses a particle swarm optimizer to locate the global minimum in the expression. The expression can be up to fourdimensional, as long as all intervals are defined
# Ende der Kommandotabelle
PARSERFUNCS_LISTCMD_FOOTNOTE1=The syntax is given in schematic manner: EX = expression, PAR = parameter, OB = (data) object, STR = string, CMD = command und NM = name. Syntax elements in brackets are optional.
PARSERFUNCS_LISTCMD_FOOTNOTE2=SEE ALSO: There exists an entry in the documentation for each of the listed commands. It can be accessed via "help COMMAND".
PARSERFUNCS_LISTUNITS_HEADLINE=Unit conversion
PARSERFUNCS_LISTUNITS_SYMBOL=Symbol
PARSERFUNCS_LISTUNITS_DESCRIPTION=Description
PARSERFUNCS_LISTUNITS_DIMENSION=Dimension
PARSERFUNCS_LISTUNITS_UNIT=Conversion     Unit
PARSERFUNCS_LISTUNITS_UNIT_ANGSTROEM=(Angstroem)
PARSERFUNCS_LISTUNITS_UNIT_ASTRO_UNIT=(Astronom. Unit)
PARSERFUNCS_LISTUNITS_UNIT_BARN=(barn)
PARSERFUNCS_LISTUNITS_UNIT_CALORY=(Calory)
PARSERFUNCS_LISTUNITS_UNIT_CURIE=(Curie)
PARSERFUNCS_LISTUNITS_UNIT_ELECTRONVOLT=(Elektronvolts)
PARSERFUNCS_LISTUNITS_UNIT_FERMI=(Fermi)
PARSERFUNCS_LISTUNITS_UNIT_FOOT=(Foot)
PARSERFUNCS_LISTUNITS_UNIT_GAUSS=(Gauss)
PARSERFUNCS_LISTUNITS_UNIT_INCH=(inch)
PARSERFUNCS_LISTUNITS_UNIT_VELOCITY=(Velocity)
PARSERFUNCS_LISTUNITS_UNIT_KNOTS=(Knots)
PARSERFUNCS_LISTUNITS_UNIT_LITERS=(Litres)
PARSERFUNCS_LISTUNITS_UNIT_LIGHTYEAR=(Lightyear)
PARSERFUNCS_LISTUNITS_UNIT_MILE=(Mile)
PARSERFUNCS_LISTUNITS_UNIT_MOL=(mol. quantity)
PARSERFUNCS_LISTUNITS_UNIT_POISE=(Poise)
PARSERFUNCS_LISTUNITS_UNIT_PARSEC=(Parsec)
PARSERFUNCS_LISTUNITS_UNIT_PSI=(Pounds/inch^2)
PARSERFUNCS_LISTUNITS_UNIT_CELSIUS=(Celsius)
PARSERFUNCS_LISTUNITS_UNIT_FAHRENHEIT=(Fahrenheit)
PARSERFUNCS_LISTUNITS_UNIT_TORR=(mmHg)
PARSERFUNCS_LISTUNITS_UNIT_YARD=(Yard)
PARSERFUNCS_LISTUNITS_FOOTNOTE=The dimensions of the units are given with the abbreviations L, M, T, ... The symbol L corresponds to "length", M to "mass", T to "time", N to "quantity" and Theta to "temperature".
PARSERFUNCS_LISTPLUGINS_HEADLINE=Installed Plugins
PARSERFUNCS_LISTPLUGINS_EMPTY=No Plugins were installed.
PARSERFUNCS_LISTPLUGINS_TABLEHEAD=Command:           Description:
PARSERFUNCS_LISTPLUGINS_PLUGININFO=- [%%1%%] (v %%2%%) -- by %%3%%
PARSERFUNCS_TAYLOR_MISSINGPARAMS=ERROR: Not all necessary parameters were passed.$See "help taylor" for further information.
PARSERFUNCS_TAYLOR_CONSTEXPR=ERROR: The expression is constant in terms of the variable "%%1%%". It cannot be expanded into a Taylor polynomial.
PARSERFUNCS_TAYLOR_DEFINESTRING=-set comment="Taylor expansion of the expression '%%1%%' at the position %%2%%=%%3%% with the order %%4%%"
PARSERFUNCS_FIT_FITTING=Fitting "%%1%%" ...
PARSERFUNCS_FIT_DEFINECOMMENT=-set comment="Fitted function"
PARSERFUNCS_FIT_CHIMAPLOCATION=The chi^2 map was successfully created in %%1%%().
PARSERFUNCS_FIT_HEADLINE=Fitting result
PARSERFUNCS_FIT_FUNCTION=Function: %%1%%
PARSERFUNCS_FIT_FITTED_FUNC=Fitted: %%1%%
PARSERFUNCS_FIT_DATASET=Data set: Column(s)
PARSERFUNCS_FIT_FROM=from
PARSERFUNCS_FIT_POINTS_W_ERR=			Data points:                            %%1%% with weighting factors
PARSERFUNCS_FIT_POINTS_WO_ERR=			Data points:                            %%1%% without weighting factors
PARSERFUNCS_FIT_COORD_RESTRICTS=	%%1%% values restricted to:                 [%%2%%,%%3%%]
PARSERFUNCS_FIT_PARAM_RESTRICTS=		Parameter restrictions:                 [%%1%%]
PARSERFUNCS_FIT_FREEDOMS=				Degrees of freedom:                     %%1%%
PARSERFUNCS_FIT_ALGORITHM_SETTINGS=		Parameters for the algorithm:           TOL=%%1%%, MAXITER=%%2%%
PARSERFUNCS_FIT_ITERATIONS=				Iterations:                             %%1%%
PARSERFUNCS_FIT_CHI2=					Weighted Sum of the residuals (chi^2):  %%1%%
PARSERFUNCS_FIT_RED_CHI2=				Variance of the residuals (red. chi^2): %%1%%
PARSERFUNCS_FIT_STD_DEV=				Standard deviation of the residuals:    %%1%%
PARSERFUNCS_FIT_LOG_TABLEHEAD1=Parameter      Initial value         Fitted    Calculated standard deviation
PARSERFUNCS_FIT_LOG_TABLEHEAD2=Parameter      Initial value         Fitted        Asymptotic standard error
PARSERFUNCS_FIT_PARAM=Parameter
PARSERFUNCS_FIT_FITTED=Fitted
PARSERFUNCS_FIT_INITIAL=Initial value
PARSERFUNCS_FIT_PARAM_DEV=Calculated standard deviation
PARSERFUNCS_FIT_ASYMPTOTIC_ERROR=Asymptotic standard error
PARSERFUNCS_FIT_CORRELMAT_HEAD=Correlation matrix of the fitted parameters
PARSERFUNCS_FIT_ANALYSIS=Fitting result analysis
PARSERFUNCS_FIT_MAXITER_REACHED=The maximal number of iterations was reached. Most likely, the algorithm returned an incorrect result.
PARSERFUNCS_FIT_GOOD_W_ERROR=The fitted function seems to describe the trend of the data points quite well. The passed weighting factors were guessed appropriately.
PARSERFUNCS_FIT_BETTER_W_ERROR=The fitted function describes the trend of the data points more exact than expected. Either the guesses of the weighting factors are too large or the fitting function was chosen too general (too many fitting parameters/overfitting).
PARSERFUNCS_FIT_NOT_GOOD_W_ERROR=The fitted function could describe the trend of the data points, but maybe there is some improvement possible. The guesses of the weighting factors are probably too small or strong outliers distort the result.
PARSERFUNCS_FIT_BAD_W_ERROR=The function cannot describe the data points or the fit was quite bad. The chosen model is possibly not suitable for this data set, you used too many parameters or the weighting factors were guessed more than a magnitude too small.
PARSERFUNCS_FIT_GOOD_WO_ERROR=The fitted function seems to describe the trend of the data points quite well.
PARSERFUNCS_FIT_IMPROVABLE_WO_ERROR=The fitted function could describe the trend of the data points, but there is some room for optimisation.
PARSERFUNCS_FIT_NOT_GOOD_WO_ERROR=The fitted function could describe the trend of the data points, but maybe there is some improvement possible. The result probably gets better, if additional guesses for weighting factors are passed to the algorithm.
PARSERFUNCS_FIT_BAD_WO_ERROR=The function cannot describe the data points or the fit was quite bad. The chosen model is possibly not suitable for this data set, strong outliers are distorting the result or the model may describe the data points only by using large guesses for weighting factors.
PARSERFUNCS_FIT_OVERFITTING=The amount of data points is exactly equal to the number of parameters. Most likely, the fitted function describes the dataset exactly. If this function is a reasonable model, is subject to further discussions.
PARSERFUNCS_FFT_FOURIERTRANSFORMING=Fourier transforming %%1%% columns:$Nyquist boundary frequency is %%2%% Hz ...
PARSERFUNCS_FFT_INVERSE_FOURIERTRANSFORMING=Inverse Fourier transforming %%1%% columns:$Resulting time interval is %%2%% s ...
PARSERFUNCS_WAVELET_TRANSFORMING=Calculating wavelet transform using "%%1%%" wavelets ...
PARSERFUNCS_WAVELET_INVERSE_TRANSFORMING=Calculating inverse wavelet fransform using "%%1%%" wavelets ...
PARSERFUNCS_PULSE_HEADLINE=Pulse analysis
PARSERFUNCS_PULSE_TABLE_1_MAXAMP=		Maximum amplitude:               %%1%%
PARSERFUNCS_PULSE_TABLE_2_POSMAX=		Position of maximum:             %%1%%
PARSERFUNCS_PULSE_TABLE_3_FWHM=			Full width at half of maximum:   %%1%%
PARSERFUNCS_PULSE_TABLE_4_WIDTHNEARMAX=	Width of the actual pulse:       %%1%%
PARSERFUNCS_PULSE_TABLE_5_ENERGY=		Energy in first pulse:           %%1%%
# MATOP
# =============================
MATOP_SOLVELGSSYMBOLIC_DEFINECOMMENT=-set comment="Solution of the system of linear equations"
# PLOT
# =============================
PLOT_CALCULATING_DATA_FOR=Calculating data for
PLOT_ANIMATION=animation: Please wait
PLOT_DRAWING=drawing
PLOT_MESHGRID=meshgrid
PLOT_SURFACE=surface
PLOT_CONTOUR=contour
PLOT_GRADIENT=gradient
PLOT_DENSITY=density
PLOT_VECTOR=vector field
PLOT_LOADING_BACKGROUND=Loading background
PLOT_RENDERING_BACKGROUND=Rendering background
PLOT_RENDERING_FRAME=Calculating frame %%1%% out of %%2%%
PLOT_SAVING=Saving
PLOT_SAVE_LOCATION=Saved at: "%%1%%"
# LOOP
# =============================
LOOP_SETCOMMAND_ABORT=Declaration aborted.
LOOP_SUPPLY_BORDERS_AND_VAR=Please supply borders and the corresponding counting variable
LOOP_SUPPLY_FULFILLABLE_CONDITION=Please enter a realizable condition
LOOP_MISSING_COMMAND=No new command was entered.
LOOP_LINE_NOT_EXISTENT=This line does not exist.
# SCRIPT
# =============================
SCRIPT_START_INSTALL=Starting installation
SCRIPT_INSTALL_SUCCESS=Installation was terminated successfully.
SCRIPT_INSTALL_ABORT=Installation aborted.
SCRIPT_INSTALLING_PROC=Installing "%%1%%" ...
SCRIPT_INSTALL_LICENSE_AGREEMENT=The content of the package or plugin "%%1%%" to be installed is licensed under the "%%2%%" license. This license defines how the content of the package or plugin may be used and what must be respected (e.g. copyleft). To install and use the package or plugin, the license terms must be acknowledged and accepted.$Accept and Continue? (%%COMMON_YES_NO%%)
# DEFINE
# =============================
DEFINE_SUCCESS=The function definitions were updated successfully.
DEFINE_FAILURE=The function definitions could not be updated.
DEFINE_NO_SPACE=No more free space for function definitions available. Remove definitions, you're not needing any more, to gain free space.
DEFINE_SAVING_FUNCTIONS=Saving function definitions
DEFINE_ASK_OVERRIDE=All defined functions currently present in memory will be overwritten.$Are you sure? (%%COMMON_YES_NO%%)
DEFINE_LOADING_FUNCTIONS=Loading function definitions
DEFINE_DONE_AUTOLOADING=%%COMMON_DONE%% [%%1%% functions].
DEFINE_DONE_LOADING=The definitions for %%1%% function(s) were loaded successfully.
# DOC
# ============================
DOC_HELP_NO_ENTRY_FOUND=No entry was found for the topic "%%1%%". The topic was probably misspelled or the topic does not exist (yet). A synonym or a keyword search with "find %%1%%" may lead to the requested information as well.
DOC_HELP_HTMLEXPORT=A copy of the article "%%1%%" was saved to "%%2%%".
DOC_HELP_HEADLINE=NumeRe Documentation: %%1%%
DOC_HELP_EXAMPLE=EXAMPLE: %%1%%
DOC_HELP_EXAMPLE_HEADLINE=Example
DOC_HELP_DESC_HEADLINE=Description
DOC_HELP_OPTIONS_HEADLINE=Options
DOC_HELP_NAVIGATION=Navigation
DOC_HELP_START=Start
DOC_HELP_BACK=Back
DOC_HELP_FORWARD=Forward
DOC_HELP_INDEX=Index
DOC_SEARCHFCT_DB_ERROR=The keyword search database is damaged. Reinstall NumeRe, to solve this problem. If this doesn't help, address your issue to the developer.
DOC_SEARCHFCT_TABLEHEAD=Relevance:  Search result:
DOC_SEARCHFCT_RESULT=The NumeRe keyword search returned %%1%% hits.
DOC_SEARCHFCT_NO_RESULTS=There was no result for your query "%%1%%". Maybe a synonym can help you out, or it is simply a typographic error, which distorted the search algorithm.
DOC_TIPOFTHEDAY_HEADLINE=NUMERE: DID YOU KNOW?  [No. %%1%%/%%2%%]
# DOCHELPER
# =================================
DOCHELPER_KEYWORDS_AND_ARTICLES=Keywords and linked articles in this documentation
DOCHELPER_KEYWORDS_AND_ARTICLES_NUMBERS=%%1%% Keywords and %%2%% articles
# ODESOLVER
# =================================
ODESOLVER_SOLVE_SYSTEM=Solving ODE system
# OUTPUT
# =================================
OUTPUT_PRINT_INACCESSIBLE1=ATTENTION: IRRECOVERABLE ERROR
OUTPUT_PRINT_INACCESSIBLE2=To the file
OUTPUT_PRINT_INACCESSIBLE3=cannot be written.
OUTPUT_PRINT_INACCESSIBLE4=The output is redirected to the console.
OUTPUT_FORMAT_SUMMARY=%%1%% %%COMMON_COLS%% and %%2%% %%COMMON_LINES%% [%%3%% elements]
OUTPUT_FORMAT_SUMMARY_FILE=A table with %%1%% elements was successfully written to the file "%%2%%".
OUTPUT_FORMAT_ASK_FILEOUT=Shall a copy be saved to a file? (%%COMMON_YES_NO%%)
OUTPUT_FORMAT_ASK_FILENAME=A copy will be created.$Choose a filename, enter 0 for the default.
OUTPUT_FORMAT_CONFIRMDEFAULT=Default %%COMMON_FILENAME%% was chosen.
OUTPUT_FORMAT_NOFILECREATED=No copy was created.
OUTPUT_FORMAT_TEX_HEAD=Table created with: %%1%%
OUTPUT_FORMAT_TEXLONG_CAPTION=Continuation
OUTPUT_FORMAT_TEXLONG_FOOT=Continued on the next page
OUTPUT_FORMAT_COMMENTLINE=Generated with: %%1%%
OUTPUT_PRINTLEGAL_LINE1=This dataset was created with
OUTPUT_PRINTLEGAL_LINE2=Version: %%1%%, Build: %%2%%
OUTPUT_PRINTLEGAL_LINE3=Source code and application: (c) %%1%%, Erik Hänel et al., licenced through GNU GPL v3.0
OUTPUT_PRINTLEGAL_LINE4=This file was created on %%1%%
OUTPUT_PRINTLEGAL_TEX=(Commenting style and formatting are optimized for TeX. The booktabs, the longtable and the multirow package are prerequisites, if applicable.)
OUTPUT_PRINTLEGAL_STD=(Commenting style and formatting are optimized for Gnuplot.)
# HIST
# ================================
HIST_HEADLINE=Histogram
HIST_ONLY_CACHE=Only the cache contains data points. These will be used.
HIST_ASK_DATASET=There is data in the cache as well as in the data object. Which data shall be used? (c/d)$(0 to abort)
HIST_CONFIRM_DATASET=The loaded data out of %%COMMON_FILETYPE_DAT%% "%%1%%" will be used.
HIST_GENERATING_DATASETS=%%1%% histogram data sets will be created.
HIST_ASK_BINWIDTH=The bins shall be how wide?
HIST_OUT_COMMENTLINE=The bins name always the middle of their interval. The allover minimum value is %%1%%, the maximum is %%2%%. The width of each interval is %%3%%.
HIST_OUT_COMMENTLINE2D=The bins name always the middle of their interval. The allover minimum x value is %%1%%, the maximum is %%2%%. The width of each x interval is %%3%%. The minimum y value is %%4%%, the maximum is %%5%%. The width of each y interval is %%6%%.
HIST_OUT_PLGNINFO=Histogram (v %%1%%) using the data rows %%2%%-%%3%% out of %%4%%
HIST_GENERATING_PLOT=Creating graphical representation
HIST_SAVED_AT=Saved at "%%1%%"
# RANDOM
# ================================
RANDOM_RESERVING_MEM=Reserving memory
RANDOM_SUCCESS=%%1%% %%2%% random numbers were successfully written to the table "%%3%%".
RANDOM_DISTRIB_TYPE_GAUSS=normal distributed
RANDOM_DISTRIB_TYPE_POISSON=poisson distributed
RANDOM_DISTRIB_TYPE_GAMMA=gamma distributed
RANDOM_DISTRIB_TYPE_UNIFORM=uniform distributed
RANDOM_DISTRIB_TYPE_BINOMIAL=binomial distributed
RANDOM_DISTRIB_TYPE_STUDENT=student-t distributed
# STATS_OUT_COMMENTLINE
# ================================
STATS_HEADLINE=Statistics
STATS_TYPE_AVG=Avg
STATS_TYPE_STD=+/-
STATS_TYPE_CONFINT=CnfInt
STATS_TYPE_STDERR=StdErr
STATS_TYPE_MED=Med
STATS_TYPE_RMS=RMS
STATS_TYPE_SKEW=Skew
STATS_TYPE_EXCESS=Exc
STATS_OUT_PLGNINFO=Statistics (v %%1%%) using the data out of %%2%%
STATS_OUT_COMMENTLINE=Legend: %%STATS_TYPE_AVG%% = average, %%STATS_TYPE_STD%% = standard deviation, %%STATS_TYPE_CONFINT%% = percentage in confidence interval, %%STATS_TYPE_STDERR%% = standard error, %%STATS_TYPE_MED%% = median, Q1 = lower quartile, Q3 = upper quartile, %%STATS_TYPE_RMS%% = root mean square, %%STATS_TYPE_SKEW%% = skewness, %%STATS_TYPE_EXCESS%% = excess, min = minimum, max = maximum, num = number of elements, cnt = number of lines, s_t = Student factor
# SETTINGS
# ===============================
SETTINGS_SAVE_SUCCESS=Configuration was saved successfully.
# TOOLS
# ===============================
TOOLS_TIMESTAMP_AT=at
# PROC
# ===============================
PROC_NAMESPACE_THISFILE_MESSAGE=Following procedures are implicit 'private'.
PROC_ADDED_DATE=Added
PROC_END_OF_PROCEDURE=End of file
PROC_FOOTER=NumeRe: Framework für Numerische Rechnungen | Free numerical software licenced under GNU GPL v3
# CACHE
# ===============================
CACHE_WARNING_CMD_OVERLAP=WARNING: "%%1%%" matches with a built-in command. "%%1%%" may be used in numerical expressions, but not as a command expression.$(Many commands on data sets exist in a inverted writing)
CACHE_WARNING_PLUGIN_OVERLAP=WARNING: "%%1%%" matches with a plugin command. "%%1%%" may be used in numerical expressions, but not as a command expression.$(Many commands on data sets exist in a inverted writing)
# DATA
# ===============================
DATA_PASTE_HEADLINE=Paste data
DATA_PASTE_DESCRIPTION=Paste you data here (Either directly with the "paste" option of the context menue, or by entering of the values linewise. This mode will be closed, if you enter "endpaste".):
DATA_COULD_NOT_IDENTIFY_PASTED_CONTENT=The pasted content could not be identified as a table containing numerical values.
DATA_OPENCSV_COLUMNSEPARATOR_NOTFOUND=The column separator of this CSV file could not be identified. Please choose and enter the separator from the following exemplary lines:
DATA_OPENCSV_SEPARATOR=Separator: "%%1%%"
DATA_OPENCSV_SEPARATOR_WHITESPACE=Separator: Whitespace
DATA_OPENFILE_TABLEHEADINGS=NOTE: There were comment lines found. Do they contain table headings? (%%COMMON_YES_NO%%)
DATA_OPENFILE_LISTING_COMMENTS=Listing the found comment lines
DATA_OPENFILE_ENTERNUMBER=Please enter the number of the line with the desired headings or enter 0 to abort:
DATA_OPENFILE_LINEDOESNTEXIST=NOTE: This line doesn't exist. Please make a new choice:$(There were %%1%% comment lines found)
DATA_OPENFILE_REPLACING_HEADS=NOTE: The headings could not be identified correctly. Automatic headings will be created.
DATA_OPENFILE_AUTOMATIC_HEADS=Automatic headings will be created. They may be modified afterwards.
DATA_OPENFILE_ENTER_HEADINGS=Do you want to enter table headings? (%%COMMON_YES_NO%%)
DATA_OPENFILE_ENTERYOURHEADS=Please enter the headings. Whitespaces will be automatically replaced with "_".
DATA_OPENFILE_HEADFORCOLUMN=Table heading for column %%1%%:
DATA_OPENFILE_OVERWRITE_DATA=The memory is already blocked with the data of the file "%%1%%". Shall the exisiting data be overwritten? (%%COMMON_YES_NO%%)
# GUI STRINGS: All strings for the new GUI
# ========================================
GUI_DLG_OPTIONS=NumeRe: Options
GUI_DLG_OPEN=NumeRe: Open file
GUI_DLG_SAVE=NumeRe: Save file
GUI_DLG_SAVE_ERROR=The file could not be saved, because the target file could not be opened or because of an error during writing the contents. There are probably non-convertible characters in this document.%%LINEBREAK%%The previous version of the file (if applicable) was recreated.
GUI_DLG_SAVEAS=NumeRe: Save file as
GUI_DLG_FIND=Find
GUI_DLG_REPLACE=Find and replace
GUI_DLG_FNDRPLC_SEARCHFOR=Search for:
GUI_DLG_FNDRPLC_REPLACEWITH=Replace with:
GUI_DLG_FNDRPLC_MATCHCASE=Match case
GUI_DLG_FNDRPLC_WHOLEWORD=Whole word
GUI_DLG_FNDRPLC_WRAPAROUND=Wrap around search
GUI_DLG_FNDRPLC_DIRECTION=Search direction
GUI_DLG_FNDRPLC_DIR_UP=Up
GUI_DLG_FNDRPLC_DIR_DOWN=Down
GUI_DLG_FNDRPLC_BTN_FIND=&Find
GUI_DLG_FNDRPLC_BTN_REPLACE=&Replace
GUI_DLG_FNDRPLC_BTN_REPLACEALL=Replace &all
GUI_DLG_FNDRPLC_BTN_CANCEL=&Cancel
GUI_DLG_DELETE=NumeRe: Remove
GUI_DLG_DELETE_QUESTION=The file or folder "%%1%%" will be removed. Are you sure?
GUI_DLG_COPY=NumeRe: Copy
GUI_DLG_COPY_ERROR=The file could not be copied, because another file with the same name already exists.
GUI_DLG_RENAME=NumeRe: Rename
GUI_DLG_RENAME_QUESTION=Please supply a new name for this file:
GUI_DLG_RENAME_ERROR=The file could not be renamed, because another file with the same name already exists.
GUI_DLG_NEWFOLDER=NumeRe: New folder
GUI_DLG_NEWFOLDER_QUESTION=Please enter the desired name of the folder:
GUI_DLG_NEWFOLDER_DFLT=New folder
GUI_DLG_NEWNSCR=NumeRe: New script
GUI_DLG_NEWNSCR_QUESTION=Please enter the desired name of the script:
GUI_DLG_NEWNSCR_DFLT=new_script
GUI_DLG_NEWNPRC=NumeRe: New procedure
GUI_DLG_NEWNPRC_QUESTION=Please enter the desired name of the procedure:
GUI_DLG_NEWNPRC_DFLT=new_procedure
GUI_DLG_NEWNLYT=NumeRe: New window layout
GUI_DLG_NEWNLYT_QUESTION=Please enter the desired name of the window layout:
GUI_DLG_NEWNLYT_DFLT=new_window
GUI_DLG_NEWPLUGIN=NumeRe: New plugin
GUI_DLG_NEWPLUGIN_QUESTION=Please enter the desired plugin command:
GUI_DLG_NEWPLUGIN_DFLT=newcommand
GUI_DLG_RENAMESYMBOLS=NumeRe: Rename symbol
GUI_DLG_RENAMESYMBOLS_QUESTION=Choose new symbol name:
GUI_DLG_RENAMESYMBOLS_SETTINGS=Search options
GUI_DLG_RENAMESYMBOLS_REPLACECOMMENTS=Search in comments
GUI_DLG_RENAMESYMBOLS_REPLACEWHOLEFILE=Search whole file
GUI_DLG_RENAMESYMBOLS_REPLACEBEFOREPOS=Search before cursor
GUI_DLG_RENAMESYMBOLS_REPLACEAFTERPOS=Search after cursor
GUI_DLG_RENAMESYMBOLS_CHANGELOG=Change log
GUI_DLG_RENAMESYMBOLS_CHANGELOG_OLDNAME=Old identifier
GUI_DLG_RENAMESYMBOLS_CHANGELOG_NEWNAME=Changed to
GUI_DLG_RENAMESYMBOLS_ALREADYINUSE=NumeRe: Symbol already in use
GUI_DLG_RENAMESYMBOLS_ALREADYINUSE_WARNING=The chosen symbol is already in use within this module. Replace nevertheless?
GUI_DLG_GOTO=NumeRe: Goto line
GUI_DLG_GOTO_QUESTION=Insert a line number: 1-%%1%%
GUI_DLG_GOTO_ERROR=This line doesn't exist.
GUI_DLG_SESSION_ERROR=NumeRe: Session recovery
GUI_DLG_SESSION_RECREATIONERROR=NumeRe could not recreate the file(s):%%LINEBREAK%%%%1%%It/they was/were probably deleted.
GUI_DLG_FILEMODIFIED=NumeRe: Reload
GUI_DLG_FILEMODIFIED_QUESTION=%%1%%%%LINEBREAK%%%%LINEBREAK%%This file was modified externally or through a script or a procedure. Shall NumeRe reload this file?%%LINEBREAK%%%%LINEBREAK%%(Your changes will get lost.)
GUI_DLG_PROC_NEXISTS_CREATE=It seems that the procedure %%1%%() doesn't exist. Shall it be created?
GUI_DLG_PROC_NEXISTS_CREATE_HEADLINE=NumeRe: Procedure doesn't exist
GUI_DLG_SCRIPT_NEXISTS_CREATE=It seems that the script %%1%% doesn't exist. Shall it be created?
GUI_DLG_SCRIPT_NEXISTS_CREATE_HEADLINE=NumeRe: Script doesn't exist
GUI_DLG_DRAWTEXT=NumeRe: Add text
GUI_DLG_DRAWTEXT_QUESTION=Text, which shall be added:
GUI_DLG_LATEX_SUCCESS=NumeRe: LaTeX documentation created
GUI_DLG_LATEX_SUCCESS_MESSAGE=A LaTeX documentation was successfully created at%%LINEBREAK%%%%1%%.
GUI_DLG_LATEX_ERROR=NumeRe: LaTeX documentation was not created
GUI_DLG_LATEX_ERROR_MESSAGE=The LaTex documentation could be created at%%LINEBREAK%%%%1%%.
GUI_DLG_NOTEXBIN=NumeRe: Missing LaTeX binary
GUI_DLG_NOTEXBIN_ERROR=The binary "xelatex.exe" could not be found in the folder%%LINEBREAK%%%%1%%.
GUI_DLG_REVISIONDIALOG_TITLE=NumeRe: Revisions
GUI_DLG_REVISIONDIALOG_REV=Revisions
GUI_DLG_REVISIONDIALOG_DATE=Date
GUI_DLG_REVISIONDIALOG_COMMENT=Comment
GUI_DLG_REVISIONDIALOG_SHOW=Show revision
GUI_DLG_REVISIONDIALOG_COMPARE=Compare revision %%1%% to %%2%%
GUI_DLG_REVISIONDIALOG_TAG=Tag revision
GUI_DLG_REVISIONDIALOG_REFRESH=Refresh revisions
GUI_DLG_REVISIONDIALOG_RESTORE=Restore revision
GUI_DLG_REVISIONDIALOG_PROVIDETAGCOMMENT=Comment for the new tag:
GUI_DLG_REVISIONDIALOG_PROVIDETAGCOMMENT_TITLE=NumeRe: Tag comment
GUI_DLG_REVISIONDIALOG_RESTOREFILE=NumeRe: Choose target for restoring
# Tips & Tricks dialog
GUI_TIPOTD_HEAD=NumeRe: Tips and Tricks
GUI_TIPOTD_DYK=Did you know ...?
GUI_TIPOTD_NEXT=&Next tip
GUI_TIPOTD_STAS=&Show tips at start up
GUI_TIPOTD_CLOSE=&Close
# Tableeditor
GUI_TABLEEDITOR=NumeRe-TableEditor:
# Search & replace dialogs
GUI_SEARCH_END=No further occurence of "%%1%%" was found in this file.
GUI_SEARCH_END_HEAD=NumeRe: Searching finished
GUI_REPLACE_END=%%1%% occurences of%%LINEBREAK%%"%%2%%" were replaced with "%%3%%".
GUI_REPLACE_END_HEAD=NumeRe: Replacing finished
GUI_SEARCH_FILES=Search files ...
GUI_SEARCH_SYMBOLS=Search symbols ...
GUI_SEARCH_DOCUMENTATION=Search articles ...
GUI_SEARCH_TELLME=Tell me, what you want to do ...
GUI_SEARCH_CALLTIP_TREE=Select with double click
GUI_SEARCH_CALLTIP_TOOLBAR=Click and drag or show documentation with a double click
GUI_SEARCH_CALLTIP_TOOLBAR_HIGHLIGHT=Click and drag or directly insert into the editor with a double click
# Options dialog
# Section headlines
GUI_OPTIONS_USERINTERFACE=User interface
GUI_OPTIONS_INTERNALS=Internal configuration
GUI_OPTIONS_DEFAULTPATHS=Default paths
GUI_OPTIONS_MISCPATHS=Additional paths
GUI_OPTIONS_SYNTAXHIGHLIGHTING=Colours used for syntax highlighting
GUI_OPTIONS_FONTS=Fonts
GUI_OPTIONS_PRINTING=Print settings
GUI_OPTIONS_SAVING=Save settings
GUI_OPTIONS_STARTING=Application start-up
# Setting labels
GUI_OPTIONS_AUTOSAVE=[sec] Table autosave interval
GUI_OPTIONS_GREETING=Show greeting at start-up
GUI_OPTIONS_COLORTHEME=Color-Theme
GUI_OPTIONS_EXTENDEDINFO=Extended file information
GUI_OPTIONS_FOLD_DURING_LOADING=Fold code completely during loading the file
GUI_OPTIONS_ESCINSCRIPTS=ESC in scripts
GUI_OPTIONS_USEMASKASDEFAULT=Loops use "-mask" as default
GUI_OPTIONS_DEFCTRL=Definition control%%LINEBREAK%%(automatic loading and saving of custom defined functions)
GUI_OPTIONS_COMPACTTABLES=Compact table view
GUI_OPTIONS_EMPTYCOLS=Loading of empty cols
GUI_OPTIONS_LOGFILE=Logging of console input
GUI_OPTIONS_HINTS=Show the "Tip of the day" at start-up
GUI_OPTIONS_CUSTOMLANG=Custom defined language (requires a restart)%%LINEBREAK%%See also "help language"
GUI_OPTIONS_EXTERNALVIEWER=Use external windows for "show" and "help"
GUI_OPTIONS_EXECUTECOMMAND=Allow the command "execute"%%LINEBREAK%%Security risk! See also "help execute"
GUI_OPTIONS_RESETHIGHLIGHT=Reset
GUI_OPTIONS_DEFAULTBACKGROUND=Default background
GUI_OPTIONS_BOLD=Bold
GUI_OPTIONS_ITALICS=Italics
GUI_OPTIONS_UNDERLINE=Underline
GUI_OPTIONS_HIGHLIGHTLOCALVARIABLES=Further highlight local variables in their definitions
GUI_OPTIONS_CONFIG=Configuration
GUI_OPTIONS_LOADPATH=Loading path | <loadpath> =
GUI_OPTIONS_SAVEPATH=Saving path | <savepath> =
GUI_OPTIONS_SCRIPTPATH=Script path | <scriptpath> =
GUI_OPTIONS_PROCPATH=Procedure path | <procpath> =
GUI_OPTIONS_PLOTPATH=Plot output path | <plotpath> =
GUI_OPTIONS_CHOOSE=Choose
GUI_OPTIONS_CHOOSEPATH=NumeRe: Choose a path
GUI_OPTIONS_PATHS=Directories
GUI_OPTIONS_PRINT=Print text in:
GUI_OPTIONS_PRINT_BW=Black/White
GUI_OPTIONS_PRINT_COLOR=Colour
GUI_OPTIONS_EDITORFONT=Font for the editor:
GUI_OPTIONS_DEFAULTFONT=Default font for plots:
GUI_OPTIONS_ANALYZER_MAIN=General settings
GUI_OPTIONS_ANALYZER_USE_NOTES=Show notes
GUI_OPTIONS_ANALYZER_USE_WARNINGS=Show warnings
GUI_OPTIONS_ANALYZER_USE_ERRORS=Show errors
GUI_OPTIONS_ANALYZER_METRICS=Code metrics
GUI_OPTIONS_ANALYZER_COMMENT_DENSITY=Calculate comment density
GUI_OPTIONS_ANALYZER_LINES_OF_CODE=Calculate lines of code
GUI_OPTIONS_ANALYZER_COMPLEXITY=Calculate cyclomatic complexity
GUI_OPTIONS_ANALYZER_MAGIC_NUMBERS=Warn about numerical literals
GUI_OPTIONS_ANALYZER_ALWAYS_SHOW_METRICS=Always show the metrics
GUI_OPTIONS_ANALYZER_OPTIMIZATION=Optimization recommendations
GUI_OPTIONS_ANALYZER_INLINE_IF=Recommand inlined "if" statement
GUI_OPTIONS_ANALYZER_CONSTANT_EXPRESSION=Mark constant expressions
GUI_OPTIONS_ANALYZER_PROGRESS_RUNTIME=Notify about increased runtime of "progress"
GUI_OPTIONS_ANALYZER_PROCEDURE_LENGTH=Warn, if procedures may influence the performance
GUI_OPTIONS_ANALYZER_UNINTENDED_BEHAVIOR=Unintended behaviors
GUI_OPTIONS_ANALYZER_RESULT_SUPPRESSION=Mark missing semicolon
GUI_OPTIONS_ANALYZER_RESULT_ASSIGNMENT=Warn, if a result assignment is missing in an expression
GUI_OPTIONS_ANALYZER_UNUSED_VARIABLES=Warn, if local variables are not used
GUI_OPTIONS_ANALYZER_THISFILE_NAMESPACE=Warn, if a procedure is part of the "thisfile" namespace
GUI_OPTIONS_ANALYZER_SWITCH_FALLTHROUGH=Warn, if "break" is missing in a "case" of "switch"
GUI_OPTIONS_ANALYZER_STYLE=Coding style recommendations
GUI_OPTIONS_ANALYZER_TYPE_ORIENTATION=Notify, if variable is not type-oriented
GUI_OPTIONS_ANALYZER_ARGUMENT_UNDERSCORE=Notify, if procedure arguments are not preceded by an underscore
GUI_OPTIONS_ANALYZER_VARIABLE_LENGTH=Notify, if a variable's name is quite short
GUI_OPTIONS_ANALYZER_GLOBAL_VARIABLES=Warn, if global variables are used in procedures
GUI_OPTIONS_ANALYZER=Static code analyzer
GUI_OPTIONS_STACKTRACE=Stack trace
GUI_OPTIONS_VARVIEWER=Variable viewer
GUI_OPTIONS_DEBUGGER_FOCUS_LINE=Distance of focused line from the upper window border
GUI_OPTIONS_DEBUGGER_SHOW_LINENUMBERS=Show line numbers in stack trace
GUI_OPTIONS_DEBUGGER_SHOW_MODULES=Show module in stack trace
GUI_OPTIONS_DEBUGGER_SHOW_ARGUMENTS=Show procedure arguments
GUI_OPTIONS_DEBUGGER_SHOW_GLOBALS=Show global variables
GUI_OPTIONS_DEBUGGER_DECODE_ARGUMENTS=Try to decode the procedure arguments
GUI_OPTIONS_DEBUGGER=Debugger
GUI_OPTIONS_PRINT_LINENUMBERS=Print linenumbers
GUI_OPTIONS_SAVE_SESSION=Session recovery%%LINEBREAK%%(Only saved changes are recoverable)
GUI_OPTIONS_SAVE_BOOKMARKS_IN_SESSION=Try to recover the bookmarks from the last session
GUI_OPTIONS_FORMAT_BEFORE_SAVING=Format file before saving
GUI_OPTIONS_KEEP_BACKUP_FILES=Keep revisions of the file
GUI_OPTIONS_SHOW_TOOLBARTEXT=Show text on the toolbar
GUI_OPTIONS_SHOW_FILEPATHS=Show relative file paths as editor tab labels
GUI_OPTIONS_USE_TABS=Use tabs instead of whitespaces for indentation
GUI_OPTIONS_HOME_END_CANCELS=HOME/END cancel the autocompletion%%LINEBREAK%%Instead they jump to their respective positions
GUI_OPTIONS_HISTORY_LINES=Buffersize of the NumeRe console
GUI_OPTIONS_CARET_BLINK_TIME=[msec] Caret blinking time
GUI_OPTIONS_PRECISION=Precision (Decimals int the console)
GUI_OPTIONS_LATEXPATH=Path to the binaries of your LaTeX distribution%%LINEBREAK%%(The subdirectory "bin" or "bin/x64" in the LaTeX distribution)
GUI_OPTIONS_MISC=Miscellaneous
GUI_OPTIONS_OK=Apply
GUI_OPTIONS_CANCEL=Cancel
# About dialog
GUI_ABOUT_TITLE=About NumeRe
GUI_ABOUT_LICENCE_SHORT=Fitting | Data analysis | Plotting | Matrix operations | FFT%%LINEBREAK%%Extensible framework | Multiple file formats | Programmable%%LINEBREAK%%Open source | Free for everyone%%LINEBREAK%%%%LINEBREAK%%Copyright (c) 2013-%%1%%, Erik Hänel et al.%%LINEBREAK%%%%LINEBREAK%%NumeRe is licenced under the GNU General Public License v3, %%LINEBREAK%%available at http://www.gnu.org/licenses/gpl.html
GUI_ABOUT_TEAM_INTRO=NumeRe is a project of the following persons:
GUI_ABOUT_TEAM=Project lead:%%LINEBREAK%%Erik HÄNEL%%LINEBREAK%%%%LINEBREAK%%Concept/UI:%%LINEBREAK%%Erik HÄNEL, Chameleon Team (Basic UI)%%LINEBREAK%%%%LINEBREAK%%Mathematical parser:%%LINEBREAK%%Ingo BERG, Erik HÄNEL%%LINEBREAK%%%%LINEBREAK%%Plotting:%%LINEBREAK%%Alexey BALAKIN%%LINEBREAK%%%%LINEBREAK%%Numerical algorithms:%%LINEBREAK%%GNU Scientific Library, Erik HÄNEL, Alexey BALAKIN%%LINEBREAK%%%%LINEBREAK%%Additional programming:%%LINEBREAK%%Jonas JANSEN, Rudolf BRAUSEMANN%%LINEBREAK%%%%LINEBREAK%%Tokenizer:%%LINEBREAK%%Boost-Library%%LINEBREAK%%%%LINEBREAK%%Matrix algorithms:%%LINEBREAK%%Eigen Library%%LINEBREAK%%%%LINEBREAK%%BasicExcel:%%LINEBREAK%%YAP Chun Wei%%LINEBREAK%%%%LINEBREAK%%TinyXML-2:%%LINEBREAK%%Lee THOMASON%%LINEBREAK%%%%LINEBREAK%%Splines:%%LINEBREAK%%Tino KLUGE%%LINEBREAK%%%%LINEBREAK%%The (patient) testers:%%LINEBREAK%%C. ALONSO, D. BAMMERT, J. HÄNEL, R. HUTT, K. KILGUS, E. KLOSTER, K. KURZ, M. LÖCHNER, A. RAVEENDRAN, L. SAHINOVIC, D. SCHMID, V. SEHRA, G. STADELMANN, R. WANNER, A. WINKLER, F. WUNDER, J. ZINßER
GUI_ABOUT_CREDITS=NumeRe wouldn't be possible without the used libraries, the patient support of the testers and all the tutorials in the internet.%%LINEBREAK%%%%LINEBREAK%%In addition we'd like to thank all the creators of the open source codes,%%LINEBREAK%%which in some cases gave us the needed inspirations for our own solutions:%%LINEBREAK%%  - Chameleon%%LINEBREAK%%  - muParser%%LINEBREAK%%  - MathGL%%LINEBREAK%%%%LINEBREAK%%Why is NumeRe free for all?%%LINEBREAK%%%%LINEBREAK%%NumeRe: Framework für Numerische Rechnungen is totally free software and out of any charges. There shall never be any fees for using this software. It's intended for educational and scientific use and we want you to keep your money in your pockets. We believe that there's no need for paying to get knowledge or education. In our opinion, knowledge has no monetary value, it's just invaluable. Education is also one reason you're paying taxes to your governmentso ask yourself:%%LINEBREAK%%%%LINEBREAK%%why paying twice?
GUI_ABOUT_INFO=%%BUILTIN_CREDITS_VERSIONINFO%%%%LINEBREAK%%%%LINEBREAK%%%%BUILTIN_CREDITS_LICENCE_1%%%%LINEBREAK%%%%LINEBREAK%%%%BUILTIN_CREDITS_LICENCE_2%%%%LINEBREAK%%%%LINEBREAK%%%%BUILTIN_CREDITS_LICENCE_3%%
GUI_ABOUT_STATS=Lines of C++ code:%%LINEBREAK%%   ~124 000%%LINEBREAK%%SVN commits:%%LINEBREAK%%   ~750%%LINEBREAK%%Number of source files:%%LINEBREAK%%   ~300%%LINEBREAK%%Languages:%%LINEBREAK%%   2 (German and English)%%LINEBREAK%%Begin of the project:%%LINEBREAK%%   October 2013%%LINEBREAK%%End of the projects:%%LINEBREAK%%   Not even planned%%LINEBREAK%%Number of fixed bugs:%%LINEBREAK%%   ~200 (Documented)%%LINEBREAK%%   ~500 (Undocumented)%%LINEBREAK%%Number of (new) bugs, which made it in a RC:%%LINEBREAK%%   ~35%%LINEBREAK%%Number of the (public) releases:%%LINEBREAK%%   ~35%%LINEBREAK%%Number of the comments about NumeRe:%%LINEBREAK%%   ~15 (Compliments)%%LINEBREAK%%   ~20 (Problems)%%LINEBREAK%%   ~80 (Bugs)%%LINEBREAK%%Number of overnighters:%%LINEBREAK%%   None%%LINEBREAK%%Number of "Ops" during a presentation:%%LINEBREAK%%   ~50%%LINEBREAK%%Amount of consumend caffeine:%%LINEBREAK%%   unmeasurable
GUI_ABOUT_JOIN=Do you believe in Open Source and GPL? Crazy on Programming? An amazing idea? Or focus on intense testing? Everything is welcome!%%LINEBREAK%%%%LINEBREAK%%Get in touch through the following possibilities (the links are below):%%LINEBREAK%%  - Old school: write us an email%%LINEBREAK%%  - Bug or idea: submit a ticket%%LINEBREAK%%  - Gabble: chat with us directly on Discord%%LINEBREAK%%%%LINEBREAK%%The following skills are helpful, but not required:%%LINEBREAK%%  - Some knowledge in C++ (well, actually that's needed)%%LINEBREAK%%  - Some experiences in programming and debugging%%LINEBREAK%%%%LINEBREAK%%We're using the following tools and frameworks (we provide a complete setup as compiler suite including all libraries):%%LINEBREAK%%  - MinGW/TDM-GCC%%LINEBREAK%%  - Apache SVN%%LINEBREAK%%  - MathGL%%LINEBREAK%%  - Gnu Scientific Library (GSL)%%LINEBREAK%%  - Boost%%LINEBREAK%%  - wxWidgets%%LINEBREAK%%  - Code::Blocks%%LINEBREAK%%%%LINEBREAK%%Mail: dev@numere.org%%LINEBREAK%%Tickets: https://sourceforge.net/p/numere/tickets/ %%LINEBREAK%%Source: https://sourceforge.net/p/numere/source/ %%LINEBREAK%%Compiler suite: https://sourceforge.net/projects/numere/files/ %%LINEBREAK%%Discord: https://discord.gg/s5tSjwU
# tree ctrl strings
GUI_FILETREE=Files
GUI_FUNCTIONTREE=Symbols
GUI_TREE_WORKSPACE=Workplace
GUI_TREE_DATAFILES=Data files
GUI_TREE_SAVEDFILES=Saved files
GUI_TREE_SCRIPTS=Scripts
GUI_TREE_PROCEDURES=Procedures
GUI_TREE_PLOTS=Plots
GUI_TREE_COMMANDS=Commands
GUI_TREE_FUNCTIONS=Functions
GUI_TREE_CONSTANTS=Constants
GUI_TREE_FUNC_KEYLIST=num mat string trigonometric hyperbolic time stats random physics angular distrib logarithmic logic coords polynomial draw gui define
GUI_TREE_CMD_KEYLIST=flowctrl datactrl datacreation loadsave eval plotting proc def mainctrl gui misc plugins
GUI_TREE_CONST_KEYLIST=atomic fieldtheory mathematical chemical particle thermo astro
# tree pop-up menu
GUI_TREE_PUP_LOAD=Load file
GUI_TREE_PUP_LOADTOTABLE=Load file to new table
GUI_TREE_PUP_START=Start script
GUI_TREE_PUP_RUN=Execute procedure
GUI_TREE_PUP_EDIT=Edit
GUI_TREE_PUP_OPENIMAGE=Show graphic
GUI_TREE_PUP_DELETEFILE=Remove
GUI_TREE_PUP_COPYFILE=Copy
GUI_TREE_PUP_INSERTFILE=Insert copied file
GUI_TREE_PUP_RENAMEFILE=Rename
GUI_TREE_PUP_INSERT_EDITOR=Insert in editor
GUI_TREE_PUP_INSERT_CONSOLE=Insert in console
GUI_TREE_PUP_HELPONITEM=Help on '%%1%%'
GUI_TREE_PUP_SHOW_DESCRIPTION=Show description
GUI_TREE_PUP_SHOWREVISIONS=Revisions ...
GUI_TREE_PUP_TAGCURRENTREVISION=Tag current revision
GUI_TREE_PUP_NEWFOLDER=New folder
GUI_TREE_PUP_REMOVEFOLDER=Remove folder
GUI_TREE_PUP_OPENINEXPLORER=Show in Explorer
# The history widget
GUI_HISTORY=History
GUI_HISTORY_DELETELINE=Delete this line
GUI_HISTORY_COPYLINE=Copy this line
# Filter strings for the file dialog
GUI_FILTER_SCRIPTS=NumeRe scripts
GUI_FILTER_PROCEDURES=NumeRe procedures
GUI_FILTER_NUMEREFILES=NumeRe files
GUI_FILTER_ALLFILES=All files
GUI_FILTER_EXECUTABLES=Executable foles
GUI_FILTER_INSTALLABLES=Installable
#GUI_FILTER_DATAFILES=Data sets
GUI_FILTER_DATAFILES=%%COMMON_FILETYPE_DAT%% (*.dat)|*.dat|%%COMMON_FILETYPE_TXT%% (*.txt)|*.txt|%%COMMON_FILETYPE_CSV%% (*.csv)|*.csv|%%COMMON_FILETYPE_JDX%% (*.jdx, *.dx, *.jcm)|*.jdx;*.dx;*.jcm
GUI_FILTER_IMAGEFILES=Image files
GUI_FILTER_TEXSOURCE=TeX-Source
GUI_FILTER_NONSOURCE=%%COMMON_FILETYPE_TXT%% (*.txt)|*.txt|%%COMMON_FILETYPE_LOG%% (*.log)|*.log|%%COMMON_FILETYPE_DAT%% (*.dat)|*.dat|%%COMMON_FILETYPE_CSV%% (*.csv)|*.csv
GUI_FILTER_ALLSUPPORTEDFILES=All supported Files|*.nscr;*.nprc;*.nlyt;*.ndat;*.dat;*.txt;*.jdx;*.dx;*.jcm;*.log;*.csv;*.xls;*.xlsx;*.ods;*.png;*.jpg;*.jpeg;*.eps;*.svg;*.gif;*.tex;*.m;*.cpp;*.cxx;*.c;*.hpp;*.hxx;*.h

GUI_NEWFILE_UNTITLED=<Unnamed>
GUI_SAVE_QUESTION=NumeRe: Save?
GUI_UNSAVEDFILE=The file "%%1%%" was modified and was not saved.
GUI_UNSAVEDFILE_CLOSE=Shall these changes be saved before closing?
GUI_UNSAVEDFILE_EXECUTE=Shall these changes be saved before executing? (Unsaved changes cannot be executed)
# Statusbar
GUI_STATUSBAR_NPRC=%%COMMON_FILETYPE_NPRC%%
GUI_STATUSBAR_NSCR=%%COMMON_FILETYPE_NSCR%%
GUI_STATUSBAR_DAT=%%COMMON_FILETYPE_DAT%%
GUI_STATUSBAR_CSV=%%COMMON_FILETYPE_CSV%%
GUI_STATUSBAR_TEX=%%COMMON_FILETYPE_TEX%%
GUI_STATUSBAR_TXT=%%COMMON_FILETYPE_TXT%%
GUI_STATUSBAR_JDX=%%COMMON_FILETYPE_JDX%%
GUI_STATUSBAR_DX=%%COMMON_FILETYPE_JDX%%
GUI_STATUSBAR_JCM=%%COMMON_FILETYPE_JDX%%
GUI_STATUSBAR_LOG=%%COMMON_FILETYPE_LOG%%
GUI_STATUSBAR_INI=%%COMMON_FILETYPE_INI%%
GUI_STATUSBAR_NHLP=%%COMMON_FILETYPE_NHLP%%
GUI_STATUSBAR_NLYT=%%COMMON_FILETYPE_NLYT%%
GUI_STATUSBAR_NDB=%%COMMON_FILETYPE_NDB%%
GUI_STATUSBAR_M=%%COMMON_FILETYPE_M%%
GUI_STATUSBAR_CPP=%%COMMON_FILETYPE_CPP%%
GUI_STATUSBAR_CXX=%%COMMON_FILETYPE_CPP%%
GUI_STATUSBAR_C=%%COMMON_FILETYPE_C%%
GUI_STATUSBAR_HPP=%%COMMON_FILETYPE_HPP%%
GUI_STATUSBAR_HXX=%%COMMON_FILETYPE_HPP%%
GUI_STATUSBAR_H=%%COMMON_FILETYPE_H%%
GUI_STATUSBAR_UNSAVEDFILE=Unsaved file
GUI_STATUSBAR_UNKNOWN=%%1%% file
GUI_STATUSBAR_LINECOL=Line: %d, Column: %d
GUI_STATUSBAR_DEBUGGER_ANALYZER=Debugger & Analyzer: active
GUI_STATUSBAR_DEBUGGER=NumeRe debugger: active
GUI_STATUSBAR_ANALYZER=Code analyzer: active
GUI_STATUSBAR_WELCOMEPAGE=Welcome to NumeRe: Framework für Numerische Rechnungen
GUI_STATUSBAR_WELCOMEPAGE_FILETYPE=Welcome
# Menu strings:
# please note, that the ampersands mark the hotkeys for keyboard navigation
# and you may change the shortcuts (e.g Ctrl-N) in this file, but always use the
# english key identifiers (e.g. "Ctrl" and not "Strg")
# -----------
# File menu
GUI_MENU_NEWFILE=&New ...
GUI_MENU_NEWFILE_TTP=Create a new file
GUI_MENU_NEW_EMPTYFILE=empty &file%%TAB%%Ctrl-N
GUI_MENU_NEW_EMPTYFILE_TTP=Create an empty file
GUI_MENU_NEW_NSCR=NumeRe &Script%%TAB%%Ctrl-Shift-S
GUI_MENU_NEW_NSCR_TTP=Create a template for a new script (requires a name)
GUI_MENU_NEW_NPRC=NumeRe &Procedure%%TAB%%Ctrl-Shift-P
GUI_MENU_NEW_NPRC_TTP=Create a template for a new procedure (requires a name)
GUI_MENU_NEW_PLUGIN=NumeRe P&lugin%%TAB%%Ctrl-Shift-L
GUI_MENU_NEW_PLUGIN_TTP=Creates a template for a new plugin (requires its command)
GUI_MENU_NEW_LAYOUT=NumeRe &Window Layout
GUI_MENU_NEW_LAYOUT_TTP=Creates a template for a new window layout
GUI_MENU_OPENFILE=&Open ...
GUI_MENU_OPENFILE_TTP=Open an existing file
GUI_MENU_CLOSEFILE=&Close file
GUI_MENU_CLOSEFILE_TTP=Close the active file
GUI_MENU_CLOSEALLFILES=Close all files
GUI_MENU_SAVEFILE=&Save%%TAB%%Ctrl-S
GUI_MENU_SAVEFILE_TTP=Save the active file
GUI_MENU_SAVEFILEAS=Save &as ...
GUI_MENU_SAVEFILEAS_TTP=Save the active file under another name
GUI_MENU_PRINT=&Print%%TAB%%Ctrl-P
GUI_MENU_PRINT_TTP=Print the active file
GUI_MENU_PRINTPREVIEW=Printing preview
GUI_MENU_PRINTSETUP=Printer settings
GUI_MENU_EXIT=&Quit%%TAB%%Alt-F4
GUI_MENU_EXIT_TTP=Exit NumeRe
GUI_MENU_FILE=&File
# Edit menu
GUI_MENU_UNDO=&Undo%%TAB%%Ctrl-Z
GUI_MENU_REDO=&Redo%%TAB%%Ctrl-Y
GUI_MENU_CUT=C&ut%%TAB%%Ctrl-X
GUI_MENU_COPY=&Copy%%TAB%%Ctrl-C
GUI_MENU_PASTE=&Insert%%TAB%%Ctrl-V
GUI_MENU_SELECT_UP=Move line(s) up%%TAB%%Alt-Up
GUI_MENU_SELECT_UP_TTP=Moves the selected line(s) one line upwards
GUI_MENU_SELECT_DOWN=Move line(s) down%%TAB%%Alt-Down
GUI_MENU_SELECT_DOWN_TTP=Moves the selected line(s) one line downwards
GUI_MENU_TRANSPOSESELECTION=&Transpose tabular data
GUI_MENU_TRANSPOSESELECTION_TTP=Transposes the tabular data in the selected lines. Cells are determined by whitespaces or comma/semicolon (for CSV files)
GUI_MENU_STRIP=Remove whitespace characters ...
GUI_MENU_STRIP_BOTH=Leading and trailing
GUI_MENU_STRIP_BOTH_TTP=Removes leading and trailing whitespaces/tabulators in the current line(s)
GUI_MENU_STRIP_FRONT=Only leading
GUI_MENU_STRIP_FRONT_TTP=Removes only leading whitespaces/tabulators in the current line(s)
GUI_MENU_STRIP_BACK=Only trailing
GUI_MENU_STRIP_BACK_TTP=Removes only trailing whitespaces/tabulators in the current line(s)
GUI_MENU_SORT_ASC=Sort lines ascending
GUI_MENU_SORT_ASC_TTP=Sorts the current lines in ascending order
GUI_MENU_SORT_DESC=Sort lines descending
GUI_MENU_SORT_DESC_TTP=Sorts the current lines in descending order
GUI_MENU_EDIT=&Edit
# Search menu
GUI_MENU_FIND=&Find%%TAB%%Ctrl-F
GUI_MENU_REPLACE=Find and &replace%%TAB%%Ctrl-H
GUI_MENU_FIND_PROCEDURE=Goto procedure definition%%TAB%%Ctrl-.
GUI_MENU_FIND_PROCEDURE_TTP=Jumps to the definition of the procedure at the cursor
GUI_MENU_FIND_INCLUDE=Goto included script%%TAB%%Ctrl-,
GUI_MENU_FIND_INCLUDE_TTP=Opens the included script in a new tab
GUI_MENU_GOTOLINE=&Goto line%%TAB%%Ctrl-G
GUI_MENU_GOTOLINE_TTP=Goto a line in the active file
GUI_MENU_BOOKMARK_TOGGLE=Add/remove bookmark%%TAB%%Ctrl-B
GUI_MENU_BOOKMARK_CLEAR=Remove all bookmarks
GUI_MENU_BOOKMARK_PREVIOUS=&Previous bookmark%%TAB%%Ctrl-Shift-M
GUI_MENU_BOOKMARK_NEXT=&Next bookmark%%TAB%%Ctrl-M
GUI_MENU_SEARCH=&Search
# View menu
GUI_MENU_LINEWRAP=Automatic line &wrap%%TAB%%Ctrl-Alt-W
GUI_MENU_LINEWRAP_TTP=Wraps long lines at the screen border
GUI_MENU_DISPCTRLCHARS=&Show control characters
GUI_MENU_DISPCTRLCHARS_TTP=Shows control characters such as tabulator and whitespaces
GUI_MENU_TOGGLE_CONSOLE=Show/hide the &console%%TAB%%F2
GUI_MENU_TOGGLE_FILETREE=Show/hide the file &browser%%TAB%%F3
GUI_MENU_TOGGLE_HISTORY=Show/hide the &list browser%%TAB%%F4
GUI_MENU_MULTIROW=&Multirow editor tabs
GUI_MENU_MULTIROW_TTP=Activates or deactives the usage of multiple rows for the editor tabs (instead of the scrolling functionality)
GUI_MENU_FOLDALL=&Fold all%%TAB%%Ctrl-Alt-F
GUI_MENU_FOLDALL_TTP=Folds all lines
GUI_MENU_UNFOLDALL=&Unfold all%%TAB%%Ctrl-Alt-U
GUI_MENU_UNFOLDALL_TTP=Unfolds all lines
GUI_MENU_UNHIDEALL=Show all hidden lines
GUI_MENU_UNHIDEALL_TTP=Shows all previously hidden lines
GUI_MENU_USETXTADV=Markup text using "#", "*", "-" and "_"
GUI_MENU_USETXTADV_TTP=Use markup highlighting for text-only files using "#", "*", "-" and "_"
GUI_MENU_USESECTIONS=Identify sections
GUI_MENU_USESECTIONS_TTP=Use "##! ..." and "#*! ..." as the beginning of new sections
GUI_MENU_VIEW=&View
# Tools menu
GUI_MENU_OPTIONS=&Options
GUI_MENU_DEBUGGER=NumeRe &debugger%%TAB%%Ctrl-Shift-D
GUI_MENU_DEBUGGER_TTP=Activates or deactivates the debugger
GUI_MENU_FORMAT=Adjust format ...
GUI_MENU_AUTOINDENT=Adjust &indentations%%TAB%%Ctrl-Shift-I
GUI_MENU_AUTOINDENT_TTP=Adjusts the indentation of the lines to the current block
GUI_MENU_INDENTONTYPE=&Adjust during input
GUI_MENU_INDENTONTYPE_TTP=Adjusts the indentation of the lines during input to the current block
GUI_MENU_AUTOFORMAT=NumeRe &default format%%TAB%%Ctrl-Shift-F 
GUI_MENU_AUTOFORMAT_TTP=Adjusts the format of the file to the NumeRe default by inserting whitespaces and line breaks and enhances readability
GUI_MENU_EXECUTE=%%GUI_TB_RUN%%%%TAB%%F5
GUI_MENU_EXECUTE_TTP=%%GUI_TB_RUN_TTP%%
GUI_MENU_COMMENTLINE=(Un-)Comment &active Lines%%TAB%%Ctrl-Q
GUI_MENU_COMMENTLINE_TTP=Comments or uncomments the active &line(s)
GUI_MENU_COMMENTSELECTION=(Un-)Comment current s&election%%TAB%%Ctrl-Shift-Q
GUI_MENU_COMMENTSELECTION_TTP=Comments or uncomments the current selection
GUI_MENU_CREATE_DOCUMENTATION=Create documentation block for procedure%%TAB%%Ctrl-Alt-B
GUI_MENU_CREATE_DOCUMENTATION_TTP=Creates a prefilled documentation comment block in front of the current procedure
GUI_MENU_CREATELATEX=Create LaTeX documentation
GUI_MENU_CREATELATEX_TTP=Creates a LaTeX file from this file and stores it at "<savepath>/docs"
GUI_MENU_RUNLATEX=Create LaTeX documentation and run
GUI_MENU_RUNLATEX_TTP=Creates a LaTeX file from this file and compiles it into a PDF
GUI_MENU_COMPILE_TEX=Compile LaTeX file
GUI_MENU_COMPILE_TEX_TTP=Compiles the current LaTeX file using the XeLaTeX compiler
GUI_MENU_LATEX=LaTeX generator ...
GUI_MENU_ANALYSIS=Analysis tools ...
GUI_MENU_ANALYZER=Code analyzer%%TAB%%Ctrl-Shift-A
GUI_MENU_ANALYZER_TTP=Analyses the code for possible improvements
GUI_MENU_FIND_DUPLICATES=&Find Code duplicates
GUI_MENU_FIND_DUPLICATES_TTP=Searches for copied code using a semantically analysis
GUI_MENU_SHOW_DEPENDENCY_REPORT=Show dependencies
GUI_MENU_SHOW_DEPENDENCY_REPORT_TTP=Calculates the dependencies of the current procedure file
GUI_MENU_CREATE_PACKAGE=Create package from procedure(s) and window layout(s)
GUI_MENU_CREATE_PACKAGE_TTP=Creates a package containing the current procedure file. Further files may be added to this package
GUI_MENU_SHOW_PACKAGE_BROWSER=Show Package Repository Browser
GUI_MENU_SHOW_PACKAGE_BROWSER_TTP=Install and uninstall packages and plugins from the online repository
GUI_MENU_EXPORT_AS_HTML=Copy text as &HTML
GUI_MENU_EXPORT_AS_HTML_TTP=Copies the selected lines as a preformatted HTML environment (<pre>...</pre>) into the clipboard
GUI_MENU_REFACTORING=%%GUI_MENU_EDITOR_REFACTORING%%
GUI_MENU_RENAME_SYMBOL=%%GUI_MENU_EDITOR_RENAME_SYMBOLS%%%%TAB%%Ctrl-Alt-R
GUI_MENU_RENAME_SYMBOL_TTP=Replaces each occurence of the symbol at the cursor in the current scope
GUI_MENU_ABSTRAHIZE_SECTION=%%GUI_MENU_EDITOR_ABSTRAHIZE_SECTION%%%%TAB%%Ctrl-Alt-E
GUI_MENU_ABSTRAHIZE_SECTION_TTP=Extrahcts the marked lines into a new procedure
GUI_MENU_TOOLS=&Tools
# Help menu
GUI_MENU_SHOWHELP=&Help topics%%TAB%%F1
GUI_MENU_ABOUT=&About NumeRe
GUI_MENU_ABOUT_TTP=Show informations about NumeRe
GUI_MENU_HELP=&Help
# Editor
GUI_EDITOR_TAB_CLOSE=Close tab
GUI_EDITOR_TAB_CLOSEALL=Close all tabs
GUI_EDITOR_TAB_CLOSEOTHERS=Close all other tabs
GUI_EDITOR_TAB_OPENFOLDER=Open containing folder
GUI_EDITOR_TAB_WELCOMEPAGE=NumeRe: Start here
# Tooltips
GUI_EDITOR_CALLTIP_PROC1=%%COMMON_FILETYPE_NPRC%%:
GUI_EDITOR_CALLTIP_PROC2=Click right to search its definition
GUI_EDITOR_CALLTIP_PROC_PARAMS=Parameters for this procedure
GUI_EDITOR_CALLTIP_PROC_REMARK=Remark
GUI_EDITOR_CALLTIP_...=		...         - Allows an arbitrary number of arguments
GUI_EDITOR_CALLTIP_ANS=		ans         - Contains the result of the last calculation
GUI_EDITOR_CALLTIP_TABLE=	table()  {} - Standard table object. Its contents may be modified
GUI_EDITOR_CALLTIP_DATA=	data()   {} - Dedicated data table object. Contains all loaded data
GUI_EDITOR_CALLTIP_FALSE=	false       - Constant for 0
GUI_EDITOR_CALLTIP_INF=		inf         - Constant for the symbolic value infinity
GUI_EDITOR_CALLTIP_NAN=		nan         - Constant for an invalid value
GUI_EDITOR_CALLTIP_STRING=	string() {} - String object. May contain an arbitrary number of strings
GUI_EDITOR_CALLTIP_TRUE=	true        - Constant for 1
GUI_EDITOR_CALLTIP_VOID=	void        - Constant for an empty value. Will sometimes be interpreted as "nan"
GUI_EDITOR_CALLTIP_NLINES=	nlines      - Contains the number of lines for the current data access
GUI_EDITOR_CALLTIP_NCOLS=	ncols       - Contains the number of columns for the current data access
GUI_EDITOR_CALLTIP_NLEN=	nlen        - Contains the number of elements in the currently accessed cluster
# Option tooltips
GUI_EDITOR_CALLTIP_COMMON_CONVERSION=Conversion
GUI_EDITOR_CALLTIP_COMMON_PLOTTING=Plot option
GUI_EDITOR_CALLTIP_COMMON_GUI=Option for graphical interfaces
GUI_EDITOR_CALLTIP_COMMON_FONTTYPE=Font face
GUI_EDITOR_CALLTIP_COMMON_FILEWRITE=File writing mode
GUI_EDITOR_CALLTIP_COMMON_FILEREAD=File reading mode
GUI_EDITOR_CALLTIP_COMMON_SETTING=Setting
GUI_EDITOR_CALLTIP_COMMON_MAF=Multi argument function on data sets
GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR=Option for
GUI_EDITOR_CALLTIP_COMMON_METHODFOR=Method for
GUI_EDITOR_CALLTIP_OPT_ADDXAXIS=addxaxis=(MIN,MAX,[LABEL[,COLOR]]) [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ADDYAXIS=addyaxis=(MIN,MAX,[LABEL[,COLOR]]) [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ADVENTOR=adventor [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_ALIGN=align=ALIGNSTRING [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_ALL=all
GUI_EDITOR_CALLTIP_OPT_ALLMEDIUM=hires=allmedium [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ALPHA=alpha[=VAL]
GUI_EDITOR_CALLTIP_OPT_ALPHAMASK=alphamask [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_AND=and [%%GUI_EDITOR_CALLTIP_COMMON_MAF%%]
GUI_EDITOR_CALLTIP_OPT_ANIMATE=animate[=FRAMES] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_APP=mode=app [%%GUI_EDITOR_CALLTIP_COMMON_FILEWRITE%%]
GUI_EDITOR_CALLTIP_OPT_AREA=area [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ASPECT=aspect=VAL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ASSTR=asstr [%%GUI_EDITOR_CALLTIP_COMMON_CONVERSION%%]
GUI_EDITOR_CALLTIP_OPT_ASVAL=asval[={VARSET}] [%%GUI_EDITOR_CALLTIP_COMMON_CONVERSION%%]
GUI_EDITOR_CALLTIP_OPT_ATTRACT=attract={VAL,VAL} [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% detect]
GUI_EDITOR_CALLTIP_OPT_AUTOSAVE=autosave [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_AVG=avg [%%GUI_EDITOR_CALLTIP_COMMON_MAF%%]
GUI_EDITOR_CALLTIP_OPT_AXIS=axis [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_AXISBIND=axisbind="rltb" [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_BACKGROUND=background=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_BAR=type=bar [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% progress]
GUI_EDITOR_CALLTIP_OPT_BARS=bars[=WIDTH] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_BCANCEL=type=bcancel [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% progress]
GUI_EDITOR_CALLTIP_OPT_BGCOLORSCHEME=bgcolorscheme=COLORSCHEME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_BINLABEL=binlabel=LABEL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% hist]
GUI_EDITOR_CALLTIP_OPT_BINOMIAL=distrib=binomial [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_BINS=bins=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% hist]
GUI_EDITOR_CALLTIP_OPT_BONUM=bonum [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_BOTTOMLEFT=legend=bottomleft [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_BOTTOMRIGHT=legend=bottomright [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_BOX=box [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_BOXPLOT=boxplot [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_BSPLINE=type=bspline [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fwt]
GUI_EDITOR_CALLTIP_OPT_BUFFERSIZE=buffersize=VAL [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_BUTTONS=buttons=BUTTONS [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_CANCEL=type=cancel [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% progress]
GUI_EDITOR_CALLTIP_OPT_CARTESIAN=coords=cartesian [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CBSPLINE=type=cbspline [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fwt]
GUI_EDITOR_CALLTIP_OPT_CDAUBECHIES=type=cdaubechies [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fwt]
GUI_EDITOR_CALLTIP_OPT_CHAAR=type=chaar [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fwt]
GUI_EDITOR_CALLTIP_OPT_CHANNELS=channels=CHANNELS [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% imread]
GUI_EDITOR_CALLTIP_OPT_CHECKMARK=type=checkmark [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_CHIMAP=chimap=CHIMAP() [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fit]
GUI_EDITOR_CALLTIP_OPT_CHORUS=chorus [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_CLOG=clog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CLOUDPLOT=cloudplot [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CMD=cmd
GUI_EDITOR_CALLTIP_OPT_CNT=cnt [%%GUI_EDITOR_CALLTIP_COMMON_MAF%%]
GUI_EDITOR_CALLTIP_OPT_COARSE=grid=coarse [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COAST=colorscheme=coast [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COLD=colorscheme=cold [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COLOR=color[={R,G,B}] [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_COLORBAR=colorbar [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COLORMASK=colormask [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COLORRANGE=colorrange=MIN:MAX [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COLORSCHEME=colorscheme=COLORSCHEME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COLORTHEME=colortheme [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_COLS=cols[=VAL]
GUI_EDITOR_CALLTIP_OPT_COMMENT=comment=COMMENT
GUI_EDITOR_CALLTIP_OPT_COMMENTS=comments=COMMENTSIGN
GUI_EDITOR_CALLTIP_OPT_COMPACT=compact [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_COMPLETE=complete [%%GUI_EDITOR_CALLTIP_COMMON_FILEREAD%%]
GUI_EDITOR_CALLTIP_OPT_COMPLEX=complex [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fft]
GUI_EDITOR_CALLTIP_OPT_CONNECT=connect [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CONST=const
GUI_EDITOR_CALLTIP_OPT_COORDS=coords=COORDINATESET [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COPPER=colorscheme=copper [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COUNTLABEL=countlabel=LABEL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% hist]
GUI_EDITOR_CALLTIP_OPT_CRUST=crust [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% plot3d]
GUI_EDITOR_CALLTIP_OPT_CSCALE=cscale=VAL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CTICKLABELS=cticklabels=LABELS [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CTICKS=cticks=TICKSTYLE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CURSOR=cursor [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_CUT=cut [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_DAUBECHIES=type=daubechies [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fwt]
GUI_EDITOR_CALLTIP_OPT_DEBUGGER=debugger [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_DEFCONTROL=defcontrol [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_DESC=sort=desc [Sorting direction]
GUI_EDITOR_CALLTIP_OPT_DIR=dir[=DIRNAME]
GUI_EDITOR_CALLTIP_OPT_DIRDIALOG=type=dirdialog [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_DISABLED=state=disabled [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_DISTRIB=distrib=DISTRIBUTION [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_DOCS=docs [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% close]
GUI_EDITOR_CALLTIP_OPT_DOWN=down [Zeroes mode]
GUI_EDITOR_CALLTIP_OPT_DRAFTMODE=draftmode [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_EDITOR=editor[=PATH/TO/EDITOR] [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_ENABLED=state=enabled [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_EPS=eps=PRECISION
GUI_EDITOR_CALLTIP_OPT_ERRORBARS=errorbars [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ERRORICON=icon=erroricon [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_EVERY=every=FIRST,INCREMENT
GUI_EDITOR_CALLTIP_OPT_EXEPATH=exepath [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_EXPAND=expand [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_EXPRVAR=exprvar
GUI_EDITOR_CALLTIP_OPT_EXTENDEDFILEINFO=extendedfileinfo [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_EXTERNALDOCWINDOW=externaldocwindow [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_FASTSTART=faststart [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_FCONT=fcont[=NUM] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_FILE=file=FILENAME
GUI_EDITOR_CALLTIP_OPT_FILEDIALOG=type=filedialog [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_FILES=files[=FILEPATH]
GUI_EDITOR_CALLTIP_OPT_FINE=grid=fine [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_FIRST=first=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% progress]
GUI_EDITOR_CALLTIP_OPT_FLENGTH=flength [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_FLOW=flow [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_FONT=font=FONTTYPE
GUI_EDITOR_CALLTIP_OPT_FREE=free [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% new]
GUI_EDITOR_CALLTIP_OPT_FREEDMAN=method=freedman [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% hist]
GUI_EDITOR_CALLTIP_OPT_FREEDOMS=freedoms=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_FUNC=func[=TYPE]
GUI_EDITOR_CALLTIP_OPT_FX0=fx0=[STARTVALS] [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% odesolve]
GUI_EDITOR_CALLTIP_OPT_GAMMA=distrib=gamma [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_GAUSS=distrib=gauss [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_GAUSSIAN=type=gaussian [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% smooth]
GUI_EDITOR_CALLTIP_OPT_GETITEMS=getitems=ITEMCOMMAND [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_GRAPHS=graphs [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% close]
GUI_EDITOR_CALLTIP_OPT_GREETING=greeting [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_GREY=colorscheme=grey [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_GRID=grid[=TYPE]
GUI_EDITOR_CALLTIP_OPT_GRIDSTYLE=gridstyle=STYLE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_HAAR=type=haar [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fwt]
GUI_EDITOR_CALLTIP_OPT_HBARS=hbars[=WIDTH] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_HEAD=head=LINENUMBER
GUI_EDITOR_CALLTIP_OPT_HEROS=heros [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_HEROSCN=heroscn [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_HIDDEN=state=hidden [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_HINTS=hints [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_HIRES=hires[=MODE] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_HLINES=hlines=(POS,STRING) [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_HORIZONTAL=type=horizontal [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_HOT=colorscheme=hot [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_HTML=html
GUI_EDITOR_CALLTIP_OPT_ICON=icon=ICON
GUI_EDITOR_CALLTIP_OPT_ID=id=ID [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_IGNORE=ignore
GUI_EDITOR_CALLTIP_OPT_IGNORECASE=ignorecase [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% sort]
GUI_EDITOR_CALLTIP_OPT_IMAGES=images [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% close]
GUI_EDITOR_CALLTIP_OPT_INDEX=index [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% sort]
GUI_EDITOR_CALLTIP_OPT_INFOICON=icon=infoicon [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_INTERPOLATE=interpolate [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_INVERSE=inverse [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fft/fwt]
GUI_EDITOR_CALLTIP_OPT_ITEM=item=ITEMID [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_ITER=iter=VAL
GUI_EDITOR_CALLTIP_OPT_KEEPDIM=keepdim [%%GUI_EDITOR_CALLTIP_COMMON_FILEREAD%%]
GUI_EDITOR_CALLTIP_OPT_LABEL=label[=LABELSTRING] [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_LAST=last=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% progress]
GUI_EDITOR_CALLTIP_OPT_LBORDER=lborder=(POS,STRING) [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_LCONT=lcont[=NUM] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_LEGEND=legend=POSITION [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_LEGENDSTYLE=legendstyle=LEGENDSTYLE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_LIGHT=light[=MODE] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_LINES=lines[=VAL]
GUI_EDITOR_CALLTIP_OPT_LINESIZES=linesizes=VALS [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_LINESTYLES=linestyles=STYLES [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_LISTDIALOG=type=listdialog [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_LNUMCTRL=lnumctrl[=VAL]
GUI_EDITOR_CALLTIP_OPT_LOADEMPTYCOLS=loademptycols [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_LOADPATH=loadpath[=PATH] [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_LOGIC=logic
GUI_EDITOR_CALLTIP_OPT_LOGSCALE=logscale
GUI_EDITOR_CALLTIP_OPT_LYAPUNOV=lyapunov [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% odesolve]
GUI_EDITOR_CALLTIP_OPT_MAIN=main [Namespace]
GUI_EDITOR_CALLTIP_OPT_MAP=colorscheme=map [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_MARKS=marks=SIZE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_MASK=mask
GUI_EDITOR_CALLTIP_OPT_MAX=max[=VAL]
GUI_EDITOR_CALLTIP_OPT_MAXLINE=maxline=STRING [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_MEAN=mean=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_MED=med [%%GUI_EDITOR_CALLTIP_COMMON_MAF%%]
GUI_EDITOR_CALLTIP_OPT_MEDIUM=hires=medium [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_MEMORY=memory [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% clear]
GUI_EDITOR_CALLTIP_OPT_MENU=style=menu [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_MESSAGEBOX=type=messagebox [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_METHOD=method=METHOD
GUI_EDITOR_CALLTIP_OPT_MIN=min[=VAL]
GUI_EDITOR_CALLTIP_OPT_MINLEN=minlen=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% detect]
GUI_EDITOR_CALLTIP_OPT_MINLINE=minline=STRING [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_MINVAL=minval=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% detect]
GUI_EDITOR_CALLTIP_OPT_MODE=mode=MODE
GUI_EDITOR_CALLTIP_OPT_MOY=colorscheme=moy [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_MSG=msg=MESSAGE
GUI_EDITOR_CALLTIP_OPT_MULTIPLOT=multiplot=LINES,COLS
GUI_EDITOR_CALLTIP_OPT_NOALPHA=noalpha [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOALPHAMASK=noalphamask [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOANIMATE=noanimate [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOAREA=noarea [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOAXIS=noaxis [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOBACKGROUND=nobackground [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOBARS=nobars [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOBOX=nobox [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOBOXPLOT=noboxplot [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOCLOG=noclog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOCLOUDPLOT=nocloudplot [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOCOLORBAR=nocolorbar [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOCOLORMASK=nocolormask [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOCONNECT=noconnect [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOCRUST=nocrust [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% plot3d]
GUI_EDITOR_CALLTIP_OPT_NOCUT=nocut [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOERRORBARS=noerrorbars [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOFCONT=nofcont [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOFLENGTH=noflength [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOFLOW=noflow [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOGRID=nogrid [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOHBARS=nohbars [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOHIRES=nohires [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOINTERPOLATE=nointerpolate [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOLCONT=nolcont [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOLIGHT=nolight [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOLOGSCALE=nologscale [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOMARKS=nomarks [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOOPEN=noopen [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOORTHOPROJECT=noorthoproject [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOPCONT=nopcont [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOPIPE=nopipe [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOPOINTS=nopoints [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOQUOTES=noquotes
GUI_EDITOR_CALLTIP_OPT_NOREFRESH=norefresh [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% edit]
GUI_EDITOR_CALLTIP_OPT_NOREGION=noregion [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NORM=norm [%%GUI_EDITOR_CALLTIP_COMMON_MAF%%]
GUI_EDITOR_CALLTIP_OPT_NORMAL=distrib=normal [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_NOSCHEMATIC=noschematic [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOSILENT=nosilent [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOSTEPS=nosteps [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOXLOG=noxlog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOYERRORBARS=noyerrorbars [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOYLOG=noylog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOZLOG=nozlog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NQ=nq
GUI_EDITOR_CALLTIP_OPT_NUM=num [%%GUI_EDITOR_CALLTIP_COMMON_MAF%%]
GUI_EDITOR_CALLTIP_OPT_OBPS=obps=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%
GUI_EDITOR_CALLTIP_OPT_OEPS=oeps=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OGIF=ogif=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OK=buttons=ok [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_OKCANCEL=buttons=okcancel [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_ONCHANGE=onchange=EVENTHANDLER [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_ONCLICK=onclick=EVENTHANDLER [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_ONLYCOLORS=legendstyle=onlycolors [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ONLYSTYLES=legendstyle=onlystyles [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ONOPEN=onopen=EVENTHANDLER [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_OPEN=open [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OPNG=opng=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OR=or [%%GUI_EDITOR_CALLTIP_COMMON_MAF%%]
GUI_EDITOR_CALLTIP_OPT_ORDER=order=VAL
GUI_EDITOR_CALLTIP_OPT_ORIGIN=origin=TYPE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ORTHOPROJECT=orthoproject [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OSVG=osvg=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OTEX=otex=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OTIF=otif=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OVERRIDE=mode=override [%%GUI_EDITOR_CALLTIP_COMMON_FILEWRITE%%]
GUI_EDITOR_CALLTIP_OPT_OVERWRITE=mode=overwrite [%%GUI_EDITOR_CALLTIP_COMMON_FILEWRITE%%]
GUI_EDITOR_CALLTIP_OPT_PAGELLA=pagella [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_PARAMS=params=[PARAMS]
GUI_EDITOR_CALLTIP_OPT_PARTICLES=particles=PARTICLES [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% pso]
GUI_EDITOR_CALLTIP_OPT_PATTERN=pattern=FILEPATTERN
GUI_EDITOR_CALLTIP_OPT_PCONT=pcont[=NUM] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_PEEK=peek
GUI_EDITOR_CALLTIP_OPT_PERSPECTIVE=perspective=VAL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_PIPE=pipe [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_PLASMA=colorscheme=plasma [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_PLOTCOLORS=plotcolors=COLORS [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_PLOTFONT=plotfont=FONTTYPE [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_PLOTPARAMS=plotparams
GUI_EDITOR_CALLTIP_OPT_PLOTPATH=plotpath[=PATH] [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_PLUGIN=plugin=PLUGINCOMMAND [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% new]
GUI_EDITOR_CALLTIP_OPT_PLUGINS=plugins
GUI_EDITOR_CALLTIP_OPT_POINTS=points[=VAL]
GUI_EDITOR_CALLTIP_OPT_POINTSTYLES=pointstyles=STYLES [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_POISSON=distrib=poisson [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_POLAR=coords=polar [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_POLAR_PZ=coords=polar_pz [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_POLAR_RP=coords=polar_rp [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_POLAR_RZ=coords=polar_rz [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_PRD=prd [%%GUI_EDITOR_CALLTIP_COMMON_MAF%%]
GUI_EDITOR_CALLTIP_OPT_PRECISION=precision=VAL
GUI_EDITOR_CALLTIP_OPT_PROB=prob=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_PROC=proc=PROCNAME [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% new]
GUI_EDITOR_CALLTIP_OPT_PROCPATH=procpath[=PATH] [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_QUESTIONICON=icon=questionicon [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_RAINBOW=colorscheme=rainbow [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_RBORDER=rborder=(POS,STRING) [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_REAL=bgcolorscheme=real [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_RECURSIVE=recursive [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% define]
GUI_EDITOR_CALLTIP_OPT_REFRESH=refresh [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% edit]
GUI_EDITOR_CALLTIP_OPT_REGION=region [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_RESET=reset [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_RESTRICT=restrict=[RESTRICTIONS] [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fit]
GUI_EDITOR_CALLTIP_OPT_RK2=method=rk2 [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% odesolve]
GUI_EDITOR_CALLTIP_OPT_RK4=method=rk4 [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% odesolve]
GUI_EDITOR_CALLTIP_OPT_RK8PD=method=rk8pd [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% odesolve]
GUI_EDITOR_CALLTIP_OPT_RKCK=method=rkck [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% odesolve]
GUI_EDITOR_CALLTIP_OPT_RKF45=method=rkf45 [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% odesolve]
GUI_EDITOR_CALLTIP_OPT_ROTATE=rotate=THETA,PHI [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SAMPLES=samples=VAL
GUI_EDITOR_CALLTIP_OPT_SAVEPATH=savepath[=PATH] [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_SAVERR=saverr [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fit]
GUI_EDITOR_CALLTIP_OPT_SAVITZKYGOLAY=type=savitzkygolay [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% smooth]
GUI_EDITOR_CALLTIP_OPT_SCALE=scale=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_SCHEMATIC=schematic [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SCHOLA=schola [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_SCOTT=method=scott [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% hist]
GUI_EDITOR_CALLTIP_OPT_SCRIPTPATH=scriptpath[=PATH] [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_SELECTIONDIALOG=type=selectiondialog [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_SETTINGS=settings
GUI_EDITOR_CALLTIP_OPT_SHAPE=shape=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_SILENT=silent [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SIMPSON=method=simpson [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% integrate]
GUI_EDITOR_CALLTIP_OPT_SINGLE=single
GUI_EDITOR_CALLTIP_OPT_SIZE=size={x,y} [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_SLICES=slices=SLICES
GUI_EDITOR_CALLTIP_OPT_SLIDING=origin=sliding [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SP=sp [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% for, while]
GUI_EDITOR_CALLTIP_OPT_SPACE=type=space [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_SPHERICAL=coords=spherical [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SPHERICAL_PT=coords=spherical_pt [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SPHERICAL_RP=coords=spherical_rp [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SPHERICAL_RT=coords=spherical_rt [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_STATE=state[=STATE] [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_STD=std
GUI_EDITOR_CALLTIP_OPT_STEPS=steps[=VAL]
GUI_EDITOR_CALLTIP_OPT_STREAMTO=streamto={WINID,ITEMID} [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_STUDENT=distrib=student [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_STYLE=style=STYLE [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_STYLES=styles=STYLES [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SUM=sum [%%GUI_EDITOR_CALLTIP_COMMON_MAF%%]
GUI_EDITOR_CALLTIP_OPT_SV=sv [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% for, while]
GUI_EDITOR_CALLTIP_OPT_TABLES=tables [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% close]
GUI_EDITOR_CALLTIP_OPT_TABS=style=tabs [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_TARGET=target=TARGET
GUI_EDITOR_CALLTIP_OPT_TERMES=termes [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_TEXTENTRY=type=textentry [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_TEXTSIZE=textsize=VAL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_THIS=this [Namespace]
GUI_EDITOR_CALLTIP_OPT_THISFILE=thisfile [Namespace]
GUI_EDITOR_CALLTIP_OPT_TIMEAXES=timeaxes=(AXES,FORMAT) [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_TITLE=title=TITLE
GUI_EDITOR_CALLTIP_OPT_TOL=tol=VAL
GUI_EDITOR_CALLTIP_OPT_TOPLEFT=legend=topleft [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_TOPRIGHT=legend=topright [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_TOTABLE=totable[=TABLE()]
GUI_EDITOR_CALLTIP_OPT_TRANSPOSE=transpose
GUI_EDITOR_CALLTIP_OPT_TRAPEZOIDAL=method=trapezoidal [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% integrate]
GUI_EDITOR_CALLTIP_OPT_TRUNC=mode=trunc [%%GUI_EDITOR_CALLTIP_COMMON_FILEWRITE%%]
GUI_EDITOR_CALLTIP_OPT_TYPE=type=TYPE
GUI_EDITOR_CALLTIP_OPT_UBOUND=ubound=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_UNIFORM=distrib=uniform [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_UNIQUE=unique
GUI_EDITOR_CALLTIP_OPT_UNITS=units
GUI_EDITOR_CALLTIP_OPT_UP=up [Zeroes mode]
GUI_EDITOR_CALLTIP_OPT_USECUSTOMLANG=usecustomlang [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_USEESCINSCRIPTS=useescinscripts [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_VALUE=value[=VALUE] [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_VAR=var
GUI_EDITOR_CALLTIP_OPT_VERTICAL=type=vertical [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_VIEWER=viewer[=PATH/TO/VIEWER] [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_VIRIDIS=colorscheme=viridis [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_VLINES=vlines=(POS,STRING) [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_WAIT=wait [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% execute]
GUI_EDITOR_CALLTIP_OPT_WARNICON=icon=warnicon [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_WEIGHTEDLINEAR=type=weightedlinear [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% smooth]
GUI_EDITOR_CALLTIP_OPT_WIDTH=width=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_WINDOWSIZE=windowsize [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_WITH=with=FUNCTION(x,PARAMS) [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fit]
GUI_EDITOR_CALLTIP_OPT_WP=wp=PATH [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% execute]
GUI_EDITOR_CALLTIP_OPT_XERRORBARS=xerrorbars [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_XLABEL=xlabel=LABEL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_XLOG=xlog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_XOR=xor [%%GUI_EDITOR_CALLTIP_COMMON_MAF%%]
GUI_EDITOR_CALLTIP_OPT_XSCALE=xscale=VAL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_XTICKLABELS=xticklabels=LABELS [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_XTICKS=xticks=TICKSTYLE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_XVALS=xvals
GUI_EDITOR_CALLTIP_OPT_XY=slices=xy [%%GUI_EDITOR_CALLTIP_COMMON_FILEREAD%%]
GUI_EDITOR_CALLTIP_OPT_XZ=slices=xz [%%GUI_EDITOR_CALLTIP_COMMON_FILEREAD%%]
GUI_EDITOR_CALLTIP_OPT_YERRORBARS=yerrorbars [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_YESNO=buttons=yesno [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_YLABEL=ylabel=LABEL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_YLOG=ylog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_YSCALE=yscale=VAL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_YTICKLABELS=yticklabels=LABELS [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_YTICKS=yticks=TICKSTYLE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ZLABEL=zlabel=LABEL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ZLOG=zlog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ZSCALE=zscale=VAL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ZTICKLABELS=zticklabels=LABELS [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ZTICKS=zticks=TICKSTYLE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
# Constants tooltips
GUI_EDITOR_CALLTIP_CONST_G_[ASTRO]=_g = 9.80665 [m/s^2]
GUI_EDITOR_CALLTIP_CONST_C_[FIELDTHEORY]=_c = 299792458 [m/s]
GUI_EDITOR_CALLTIP_CONST_ELEK_FELDKONST_[FIELDTHEORY]=_elek_feldkonst = 8.8541878e-12 [A s/(V m)]
GUI_EDITOR_CALLTIP_CONST_N_AVOGADRO_[CHEMICAL]=_n_avogadro = 6.02214129e23 [1/mol]
GUI_EDITOR_CALLTIP_CONST_K_BOLTZ_[THERMO]=_k_boltz = 1.3806488e-23 [J/K]
GUI_EDITOR_CALLTIP_CONST_ELEM_LADUNG_[FIELDTHEORY]=_elem_ladung = 1.602176565e-19 [A s]
GUI_EDITOR_CALLTIP_CONST_H_[ATOMIC]=_h = 6.62606957e-34 [J s]
GUI_EDITOR_CALLTIP_CONST_HBAR_[ATOMIC]=_hbar = 1.05457173e-34 [J s]
GUI_EDITOR_CALLTIP_CONST_M_ELEKTRON_[PARTICLE]=_m_elektron = 9.10938291e-31 [kg]
GUI_EDITOR_CALLTIP_CONST_M_PROTON_[PARTICLE]=_m_proton = 1.67262178e-27 [kg]
GUI_EDITOR_CALLTIP_CONST_M_NEUTRON_[PARTICLE]=_m_neutron = 1.67492735e-27 [kg]
GUI_EDITOR_CALLTIP_CONST_M_MUON_[PARTICLE]=_m_muon = 1.88353148e-28 [kg]
GUI_EDITOR_CALLTIP_CONST_M_TAU_[PARTICLE]=_m_tau = 3.16747e-27 [kg]
GUI_EDITOR_CALLTIP_CONST_MAGN_FELDKONST_[FIELDTHEORY]=_magn_feldkonst = 1.25663706e-6 [V s/(A m)]
GUI_EDITOR_CALLTIP_CONST_M_ERDE_[ASTRO]=_m_erde = 5.9726e24 [kg]
GUI_EDITOR_CALLTIP_CONST_M_SONNE_[ASTRO]=_m_sonne = 1.9885e30 [kg]
GUI_EDITOR_CALLTIP_CONST_R_ERDE_[ASTRO]=_r_erde = 6.378137e6 [m]
GUI_EDITOR_CALLTIP_CONST_R_SONNE_[ASTRO]=_r_sonne = 6.9551e8 [m]
GUI_EDITOR_CALLTIP_CONST_THETA_WEINBERG_[PARTICLE]=_theta_weinberg = 0.490976214
GUI_EDITOR_CALLTIP_CONST_2PI_[MATHEMATICAL]=_2pi = 6.28318531
GUI_EDITOR_CALLTIP_CONST_PI_[MATHEMATICAL]=_pi = 3.14159265
GUI_EDITOR_CALLTIP_CONST_R_[THERMO]=_R = 8.3144622 [J/(mol K)]
GUI_EDITOR_CALLTIP_CONST_ALPHA_FS_[ATOMIC]=_alpha_fs = 7.29735257e-3
GUI_EDITOR_CALLTIP_CONST_MU_BOHR_[ATOMIC]=_mu_bohr = 9.27400968e-24 [J/T]
GUI_EDITOR_CALLTIP_CONST_MU_KERN_[ATOMIC]=_mu_kern = 5.05078353e-27 [J/T]
GUI_EDITOR_CALLTIP_CONST_M_AMU_[CHEMICAL]=_m_amu = 1.66053892e-27 [kg]
GUI_EDITOR_CALLTIP_CONST_R_BOHR_[ATOMIC]=_r_bohr = 5.29177211e-11 [m]
GUI_EDITOR_CALLTIP_CONST_GRAV_[ASTRO]=_G = 6.67384e-11 [m^3/(kg s^2)]
GUI_EDITOR_CALLTIP_CONST_COUL_NORM_[FIELDTHEORY]=_coul_norm = 8.98755179e9 [V m/(A s)]
GUI_EDITOR_CALLTIP_CONST_MU_E_[PARTICLE]=_mu_e = -9.284764620e-24 [J/T]
GUI_EDITOR_CALLTIP_CONST_MU_P_[PARTICLE]=_mu_p = 1.4106067873e8 [J/T]
GUI_EDITOR_CALLTIP_CONST_MU_N_[PARTICLE]=_mu_n = -9.662365e-27 [J/T]
GUI_EDITOR_CALLTIP_CONST_STEFAN_BOLTZMANN_[THERMO]=_stefan_boltzmann = 5.670367e-8 [J/(m^2 s K^4)]
GUI_EDITOR_CALLTIP_CONST_WIEN_[THERMO]=_wien = 2.8977729e-3 [m K]
GUI_EDITOR_CALLTIP_CONST_RYDBERG_[ATOMIC]=_rydberg = 1.0973731568508e7 [1/m]
GUI_EDITOR_CALLTIP_CONST_HARTREE_[ATOMIC]=_hartree = 4.35974465e-18 [J]
GUI_EDITOR_CALLTIP_CONST_GAMMA_P_[PARTICLE]=_gamma_p = 2.6752219e8 [1/(T s)]
GUI_EDITOR_CALLTIP_CONST_GAMMA_N_[PARTICLE]=_gamma_n = 1.83247172e8 [1/(T s)]
GUI_EDITOR_CALLTIP_CONST_GAMMA_E_[PARTICLE]=_gamma_e = 1.760859644e11 [1/(T s)]
GUI_EDITOR_CALLTIP_CONST_LANDE_E_[PARTICLE]=_lande_e = -2.00231930436182
GUI_EDITOR_CALLTIP_CONST_FEIGENBAUM_DELTA_[MATHEMATICAL]=_feigenbaum_delta = 4.6692016091
GUI_EDITOR_CALLTIP_CONST_FEIGENBAUM_ALPHA_[MATHEMATICAL]=_feigenbaum_alpha = 2.5029078751
# Editor pop-up menu
GUI_MENU_EDITOR_CUT=Cut
GUI_MENU_EDITOR_COPY=Copy
GUI_MENU_EDITOR_PASTE=Insert
GUI_MENU_EDITOR_FOLDCURRENTBLOCK=Fold this block
GUI_MENU_EDITOR_HIDECURRENTBLOCK=Hide selected lines
GUI_MENU_EDITOR_ADDBP=Add breakpoint
GUI_MENU_EDITOR_REMOVEBP=Remove breakpoint
GUI_MENU_EDITOR_CLEARBP=Remove all breakpoints
GUI_MENU_EDITOR_ADDBM=Add bookmark
GUI_MENU_EDITOR_REMOVEBM=Remove bookmark
GUI_MENU_EDITOR_CLEARBM=Remove all bookmarks
GUI_MENU_EDITOR_HIGHLIGHT=Highlight '%%1%%' permanently
GUI_MENU_EDITOR_FINDPROC=Find the definition of: '%%1%%'
GUI_MENU_EDITOR_FINDINCLUDE=Find the script: '%%1%%'
GUI_MENU_EDITOR_REFACTORING=Refactoring ...
GUI_MENU_EDITOR_RENAME_SYMBOLS=Rename symbol
GUI_MENU_EDITOR_ABSTRAHIZE_SECTION=Extract marked section
GUI_MENU_EDITOR_UPPERCASE=Convert to UPPERCASE
GUI_MENU_EDITOR_LOWERCASE=Convert to lowercase
# Toolbar strings
GUI_TB_NEW=New
GUI_TB_NEW_TTP=New file (Selection dialog)
GUI_TB_NEW_SELECT=Select the type of the new file
GUI_TB_OPEN=Open
GUI_TB_OPEN_TTP=Open a file
GUI_TB_SAVE=Save
GUI_TB_SAVE_TTP=Save the current file
GUI_TB_UNDO=Undo
GUI_TB_REDO=Redo
GUI_TB_CUT=Cut
GUI_TB_COPY=Copy
GUI_TB_PASTE=Paste
GUI_TB_SEARCH=Search
GUI_TB_REPLACE=Replace
GUI_TB_RUN=Execute
GUI_TB_RUN_TTP=Execute the current file
GUI_TB_STOP=Abort
GUI_TB_STOP_TTP=Abort the execution
GUI_TB_DEBUGGER=Debugger
GUI_TB_DEBUGGER_TTP=%%GUI_MENU_DEBUGGER_TTP%%
GUI_TB_ADD=Add
GUI_TB_ADD_TTP=Add a breakpoint at the current line
GUI_TB_REMOVE=Remove
GUI_TB_REMOVE_TTP=Remove a breakpoint from the current line
GUI_TB_CLEAR=Remove all
GUI_TB_CLEAR_TTP=Remove all breakpoints
GUI_TB_NEXTIMAGE=Next image
GUI_TB_PREVIOUSIMAGE=Previous image
GUI_TB_ANALYZER=Analyzer
GUI_TB_ANALYZER_TTP=Activates or deactivates the static code analyzer
GUI_TB_INDENTONTYPE=Indent
GUI_TB_INDENTONTYPE_TTP=Indents the lines automatically during input
GUI_TB_LINEWRAP=Line wrap
GUI_TB_LINEWRAP_TTP=%%GUI_MENU_LINEWRAP_TTP%%
# Docbrowser toolbar strings
GUI_TB_DOCBROWSER_HOME=%%DOC_HELP_START%%
GUI_TB_DOCBROWSER_INDEX=%%DOC_HELP_INDEX%%
GUI_TB_DOCBROWSER_BACK=%%DOC_HELP_BACK%%
GUI_TB_DOCBROWSER_FORWARD=%%DOC_HELP_FORWARD%%
GUI_TB_DOCBROWSER_PRINT=Print
# Printing dialogs
GUI_PRINT_ERROR=A problem was detected during printing.%%LINEBREAK%%Please check the printer settings and try again.
GUI_PRINT_ERROR_HEAD=NumeRe: Printing failed
GUI_PREVIEW_ERROR=A problem was detected during creation of the preview.%%LINEBREAK%%Please check the printer settings and try again.
GUI_PREVIEW_ERROR_HEAD=NumeRe: Preview failed
GUI_PREVIEW_HEAD=NumeRe: Printing preview
# Table viewer pop-up menu
GUI_INSERT_TABLE_ROW=Insert row
GUI_INSERT_TABLE_COL=Insert col
GUI_INSERT_TABLE_CELL=Insert cell
GUI_REMOVE_TABLE_ROW=Remove row
GUI_REMOVE_TABLE_COL=Remove col
GUI_REMOVE_TABLE_CELL=Remove cell
GUI_COPY_TABLE_CONTENTS=Copy
GUI_PASTE_TABLE_CONTENTS=Paste
GUI_PASTE_TABLE_CONTENTS_HERE=Paste here
# Code Analyzer strings
GUI_ANALYZER_TEMPLATE=%%2%%: %%3%%   <%%1%%>
GUI_ANALYZER_NOTE=Note
GUI_ANALYZER_WARN=Warning
GUI_ANALYZER_ERROR=Error
GUI_ANALYZER_NOTE_TOTAL=This file contains %%1%% note(s).
GUI_ANALYZER_WARN_TOTAL=This file contains %%1%% warning(s).
GUI_ANALYZER_ERROR_TOTAL=This file contains %%1%% error(s).
GUI_ANALYZER_THROW_ADDMESSAGE=A message, which is appended to "throw" may provide additional information.
GUI_ANALYZER_NAMESPACE_ALWAYSMAIN=This statement changes always in the namespace "main~".
GUI_ANALYZER_PROGRESS_RUNTIME=The progress display needs additional runtime.
GUI_ANALYZER_MISSINGPARENTHESIS=Missing parenthesis.
GUI_ANALYZER_MISSINGARGUMENT=Missing argument.
GUI_ANALYZER_ASSIGNMENTINARGUMENT=The argument contains an assignment operator "=", which doesn't check equality ("==").
GUI_ANALYZER_IF_ALWAYSTRUE=The argument is always true.
GUI_ANALYZER_IF_ALWAYSFALSE=The argument is always false.
GUI_ANALYZER_WHILE_ALWAYSTRUE=Ensure that this loop will terminate.
GUI_ANALYZER_WHILE_ALWAYSFALSE=This loop will never start.
GUI_ANALYZER_SWITCH_CONSTANT=This argument is constant.
GUI_ANALYZER_SWITCH_ONLY_DEFAULT=This switch case only contains an "otherwise" case.
GUI_ANALYZER_SWITCH_MISSING_CASE=This switch case does not contain any "case" statement.
GUI_ANALYZER_SWITCH_MISSING_VALUE=This "case" statement does not contain a comparison value.
GUI_ANALYZER_SWITCH_MISSING_BREAK=This "case" statement does not contain a "break" statement and will fall through.
GUI_ANALYZER_FOR_INTERVALERROR=The definition of the loop interval is wrong.
GUI_ANALYZER_MISSINGENDPROCEDURE=The end of the procedure could not be found.
GUI_ANALYZER_UNFINISHEDBLOCK=This control flow block does not have a beginning or an end.
GUI_ANALYZER_UNUSEDVARIABLE=The local variable "%%1%%" is probably unused.
GUI_ANALYZER_NOVARIABLES=No local variables were defined.
GUI_ANALYZER_RETURN_ADDSEMICOLON=Append a semicolon ";" to suppress the doubled display of the result.
GUI_ANALYZER_RETURN_ALWAYSTRUE=This statement will always return true.
GUI_ANALYZER_NOTALLOWED=This statement cannot be used at this place.
GUI_ANALYZER_ASSIGNTOVARIABLE=Pass the result of "%%1%%" to a variable to use it for further evaluations.
GUI_ANALYZER_APPENDIGNORE=Append the parameter "-ignore" to suppress needed confirmation.
GUI_ANALYZER_CANNOTREMOVEPREDEFS="data()", "table()" and "string()" cannot be removed.
GUI_ANALYZER_EMPTYEXPRESSION=An expression or a parameter is missing.
GUI_ANALYZER_USEINLINEIF=The inline if-construct (IF ? THEN : ELSE) may provide significant speed-ups.
GUI_ANALYZER_CONSTEXPR=This line is constant and consumes additional runtime.
GUI_ANALYZER_INLINING=The call of this procedure will have a greater negative effect on the performance than the advantage provided by the abstraction.
GUI_ANALYZER_PROCEDURENOTFOUND=The procedure "%%1%%" was not found.
GUI_ANALYZER_VARNAMETOOSHORT=The variable name "%%1%%" is quite short.
GUI_ANALYZER_VARNOTTYPEORIENTED=The variable name "%%1%%" is not type oriented (e.g. "nVar" or "sVar").
GUI_ANALYZER_INDICATEARGUMENT=Add an underscore as a prefix for procedure arguments to distringuish between them and local variables.
GUI_ANALYZER_HIGHCOMPLEXITY=This module has a high cyclomatic complexity (v(G) = %%1%%).
GUI_ANALYZER_MANYLINES=This module contains many lines (%%1%%).
GUI_ANALYZER_LOWCOMMENTDENSITY=Only very few comments were found in this module (Comment density %%1%% %).
GUI_ANALYZER_HIGHCOMMENTDENSITY=This module contains a high number of comments (Comment density %%1%% %).
GUI_ANALYZER_NONAMINGPROCEDURE=This procedure file does not contain a naming procedure.
GUI_ANALYZER_THISFILEPROCEDURE=This procedure is member of the "thisfile" namespace.
GUI_ANALYZER_MAGICNUMBER=This numerical literal should be replaced by a variable to make the code comprehensible.
GUI_ANALYZER_SUPPRESS_OUTPUT=Terminate this statement with a semicolon ";", to suppress the display of the result.
GUI_ANALYZER_GLOBALVARIABLE=The variable "%%1%%" seems to be a global one. It's good practice to use no or only very few global variables.
# Duplicate Code Analyzer strings
GUI_DUPCODE_TITLE=Code duplicates
GUI_DUPCODE_MATCH=Lines
GUI_DUPCODE_PERCENTAGE=Match
GUI_DUPCODE_LINES=Lines count
GUI_DUPCODE_SETTINGS=Replace for semantic analysis
GUI_DUPCODE_VARSEMANTICS=Variables
GUI_DUPCODE_STRINGSEMANTICS=String literals
GUI_DUPCODE_NUMSEMANTICS=Numeric literals
GUI_DUPCODE_FUNCTIONSEMANTICS=Tables/Custom function definitions
GUI_DUPCODE_NUMLINES=Min. code block length
GUI_DUPCODE_START=Start
GUI_DUPCODE_COPY=Copy result
GUI_DUPCODE_REPORT=Save result
GUI_DUPCODE_SAVEREPORT=NumeRe: Save result report
# Refactoring window strings
GUI_REFACTORING_COPYWINDOW_HEAD=NumeRe-Refactorer: New procedure
GUI_REFACTORING_NOTE=This procedure was extracted using a heuristic. Please verify the argument and return list.
GUI_REFACTORING_ARGUMENTLIST=The argument list contains variables, which have been found at an earlier location than the current code fragment.
GUI_REFACTORING_RETURNVALUES=The return list contains variables, which were found at a later location in the code.
# Graph viewer strings
GUI_GRAPH_EXPORT=Export graph
GUI_GRAPH_COPY=Copy graph
GUI_GRAPH_ROTATE=Rotate graph
GUI_GRAPH_ZOOM=Zoom graph
GUI_GRAPH_RESET=Reset view
GUI_GRAPH_LINE=Add line
GUI_GRAPH_RECT=Add rectangle
GUI_GRAPH_CIRCLE=Add circle
GUI_GRAPH_TEXT=Add text
GUI_GRAPH_PREVIOUS=Previous frame
GUI_GRAPH_NEXT=Next frame
GUI_GRAPH_RUN=Run animation
GUI_GRAPH_STOP=Stop animation
GUI_GRAPH_RENDERING=Rendering frames ...
GUI_GRAPH_RENDERING_DONE=Rendering finished
# Variable viewer strings
GUI_VARVIEWER=Defined variables
GUI_VARVIEWER_NAME=Name
GUI_VARVIEWER_DIM=Dim
GUI_VARVIEWER_CLASS=Class
GUI_VARVIEWER_VALUE=Value
GUI_VARVIEWER_VARS=Numerical variables
GUI_VARVIEWER_STRINGS=String variables
GUI_VARVIEWER_TABLES=Tables
GUI_VARVIEWER_CLUSTERS=Clusters
GUI_VARVIEWER_ARGUMENTS=Procedure arguments
GUI_VARVIEWER_GLOBALS=Global variables
GUI_VARVIEWER_MENU_NEWTABLE=New table ...
GUI_VARVIEWER_MENU_SHOWVALUE=Show table
GUI_VARVIEWER_MENU_RENAME=Rename table
GUI_VARVIEWER_MENU_REMOVE=Remove table
GUI_VARVIEWER_MENU_SAVE=Save table
GUI_VARVIEWER_MENU_SAVEAS=Save table as ...
GUI_VARVIEWER_NEWTABLE_QUESTION=New table(s):
GUI_VARVIEWER_NEWTABLE=NumeRe: New table
GUI_VARVIEWER_NEWNAME_QUESTION=New table name:
GUI_VARVIEWER_NEWNAME=NumeRe: Rename table
GUI_VARVIEWER_SAVENAME_QUESTION=Filename:
GUI_VARVIEWER_SAVENAME=NumeRe: Save table
# Procedure viewer strings
GUI_PROCEDUREVIEWER=Local procedures
GUI_PROCEDUREVIEWER_SIGNATURE=Procedure signature
GUI_PROCEDUREVIEWER_EMPTY=No procedures in this file
# Package dialog strings
GUI_PKGDLG_HEAD=NumeRe: Package-Creator
GUI_PKGDLG_PROPERTIES=Properties
GUI_PKGDLG_PACKAGENAME=Name of the package
GUI_PKGDLG_AUTHOR=Author
GUI_PKGDLG_VERSION=Version
GUI_PKGDLG_PLUGINCOMMAND=Plugin command
GUI_PKGDLG_FLAGS=Installation flags
GUI_PKGDLG_TYPE=Package type
GUI_PKGDLG_LICENSE=Package license
GUI_PKGDLG_PLUGINMAIN=Plugin main procedure
GUI_PKGDLG_PLUGINDESC=Description
GUI_PKGDLG_INCLUDEDOCUMENTATION=Include documentation template
GUI_PKGDLG_FILES=Files bundled in the package
GUI_PKGDLG_ADDFILES=Add files
GUI_PKGDLG_REMOVEFILES=Remove files
GUI_PKGDLG_AUTODETECTFILES=Detect dependencies
GUI_PKGDLG_SELECT_FILES=Select files for the package
GUI_PKGDLG_MISSING_MAINPROCEDURE=The main procedure of the current file is missing or not the first one. The procedure "%%1%%" is assigned to the "unknownfile~" namespace.
GUI_PKGDLG_MISSING_MAINPROCEDURE_HEAD=NumeRe: Missing main procedure
GUI_PKGDLG_INSTALLERWARNING=This is an installer script. To install the contained procedures, execute it using 'install \"<this>/%%1%%\"'.
# Dependency dialog strings
GUI_DEPDLG_HEAD=NumeRe: Procedure dependencies [%%1%%]
GUI_DEPDLG_TREE=Dependency tree of the main procedure of the current file
GUI_DEPDLG_FOLDALL=Fold all
GUI_DEPDLG_UNFOLDALL=Unfold all
GUI_DEPDLG_FOLDITEM=Fold branch
GUI_DEPDLG_UNFOLDITEM=Unfold branch
GUI_DEPDLG_EXPORTDOT=Export to %%COMMON_FILETYPE_DOT%%