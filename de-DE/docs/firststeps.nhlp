<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2019  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="firststeps">
	<title string="Erste Schritte" idxkey="firststeps" />
	<keywords>
		<keyword>first</keyword>
		<keyword>erste</keyword>
		<keyword>einf</keyword>
		<keyword>introd</keyword>
	</keywords>
	<contents>
		<h>Hallo und Willkommen bei NumeRe: Framework für Numerische Rechnungen!</h>
		NumeRe ist ausgelegt als eine Tabellenkalkulation, die durch Kommandos und Funktionen bedient wird, und ist für die (Natur-)Wissenschaftliche Arbeit optimiert. So verfügt NumeRe über die Möglichkeit, durch Scripte vordefinierte Abläufe zu automatisieren, graphische Plots in vielerlei Varianten zu erzeugen, oder einige andere Dinge.
		Dies ist eine kurze Einführung, die nicht alle Aspekte von NumeRe zeigen kann. Es gibt jedoch die Möglichkeit, zu allen Themen eine Hilfe zu erhalten: gib einfach <code>help THEMA</code> ein, um meine Hilfe zum THEMA aufzurufen, oder lass' THEMA weg, um die Hilfeübersicht anzuzeigen. Du kannst auch direkt im Baum auf der linken Seite dieses Fensters nach Artikeln suchen.
		Solltest du einmal ein Kommando oder eine Funktion nicht finden können, kannst du die <a href="nhlp://find?frame=new">Stichwortsuche</a> verwenden: <code>find BEGRIFFE</code>. Wie durch BEGRIFFE angedeutet, kannst du hier auch mehrere Begriffe angeben, die durch Leerzeichen getrennt sein müssen.
		<h>Funktionen von NumeRe</h>
		Die Benutzeroberfläche von NumeRe setzt sich aus drei wesentlichen Komponenten zusammen: dem <a href="nhlp://filetree?frame=new">Dateibaum</a>, dem <a href="nhlp://editor?frame=new">Editor</a> und der <a href="nhlp://console?frame=new">Konsole</a>. Während der Dateibaum eine Übersicht über die vorhandenen Dateien bietet, können im Editor Textdateien, Scripte und Prozeduren geschrieben werden. Die Konsole schließlich erlaubt die Interaktion mit der verarbeitenden Schicht von NumeRe - wir kommen gleich dazu.
		NumeRe ist dazu ausgelegt, dass es Befehle und mathematische Ausdrücke abarbeitet, die zuvor definiert wurden, ähnlich einer imperativen Programmiersprache. Dies kann von Hand Befehl je Befehl (bzw. Ausdruck je Ausdruck) passieren, oder die entsprechenden Routinen können zuvor in eine Datei - ein sogenanntes Script - geschrieben und von dort ausgeführt werden.
		Die graphische Benutzeroberfläche ist eine Hilfestellung, um mit der ausführenden Schicht von NumeRe einfacher arbeiten zu können. Die ausführende Schicht läuft im Hintergrund und arbeitet die Befehle und Ausdrücke, die ihr vorgegeben wurden, eine nach dem anderen ab.
		Als Framework für Numerische Rechnungen kann NumeRe natürlich vor allem eines: eingegebene Ausdrücke numerisch auswerten. Dazu kannst du den Ausdruck, der ausgewertet werden soll, im Prinzip eingeben, wie du ihn in einen beliebigen Taschenrechner eintippen würdest. Der Unterschied liegt lediglich darin, dass NumeRe mit Variablen umgehen kann und Leerstellen natürlich bedeutungslos sind. Teste es, indem du<codeblock>5*23*x + 2*x^2 - 15*cos(2)</codeblock>in die Konsole eintippst.
		Diese Variablen musst du nicht zuvor deklarieren. NumeRe erkennt auch Variablen, die mit einem Ausdruck eingegeben werden, als solche und wird sie entsprechend anlegen. Du brauchst dir also darüber keine Sorgen machen. Allerdings solltest du beachten, dass neue Variablen stets den Wert <code>void</code> haben.
		Deine Variablen können aus Buchstaben, Unterstrichen und Zahlen bestehen, jedoch dürfen sie niemals mit einer Ziffer beginnen. (Z.B.: <code>x</code>, <code>x0</code>, <code>_var_wert</code>, ...)
		Den numerischen Wert, der von NumeRe erechnet wird, wird in der nächsten Zeile als <code>ans = WERT</code> ausgegeben. Dabei wird dieser Wert eben auch der speziellen Variable <code>ans</code> zugewiesen, so dass du beim nächsten Ausdruck damit weiterrechnen kannst.
		NumeRe kann auch numerisch Differenzieren und Integrieren, sowie Extrema und Nullstellen suchen. Die dazu nötigen Kommandos sowie eine komplette Liste aller anderen findest du im <a href="nhlp://symboltree?frame=new">Symbolbaum</a> auf der linken Seite des Hauptfensters.
		<em>Tipp:</em>Weiterführende Infos findest du unter <a href="nhlp://expression?frame=new">help expression</a>, <a href="nhlp://variables?frame=new">help variables</a>, <a href="nhlp://integrate?frame=new">help integrate</a>, <a href="nhlp://diff?frame=new">help diff</a>, <a href="nhlp://extrema?frame=new">help extrema</a> und <a href="nhlp://zeroes?frame=new">help zeroes</a>
		<h>Was tue ich als erstes?</h>
		Zunächst kannst du NumeRe eingerichten: Dazu gehören vor allem die Standardpfade. Öffne die Optionen im Werkzeugemenü, wähle den Tab "Verzeichnisse" und passe die dort vorgegebenen Pfade auf deine Wünsche an. Es spielt keine Rolle, ob hierbei <code>\</code> oder <code>/</code> zum Trennen der Pfade verwendet wird.
		Der Importordner beschreibt das Verzeichnis, an dem deine Daten liegen. Falls das kein eindeutiger Ordner ist, brauchst du diesen Pfad nicht ändern, sondern kannst das Arbeitsverzeichnis entsprechend anpassen, indem du<codeblock>workpath "PFAD/ZU/DEINEN/DATEN"</codeblock>in die Konsole eingibst. Dies wird nur für die aktuelle Sitzung gespeichert und kann über den Platzhalter <code>&lt;wp&gt;</code> verwendet werden.
		Der Speicherordner ist der Pfad, wo die exportierten Daten oder anderweitig gespeicherten Daten abliegen.
		Der Scriptordner ist der standardmäßige Suchpfad für Scripte. Du kannst diesen Pfad sowie den Prozedurenordner im Moment einfach beibehalten. (Es müssten sich bereits Scripte in deinem Scriptordner befinden)
		Der Plotspeicherordner beschreibt den Pfad, wo die erzeugten Plots, also die graphischen Ausgaben von NumeRe abgelegt werden.
		Klicke auf "Anwenden" und fertig.
		<h>Fertig mit dem Einstellen. Was soll ich nun machen?</h>
		Rumprobieren wäre erst mal eine gute Idee, bevor du dich an die produktive Arbeit machst. Am besten fokussierst du dich zunächst auf die Konsole.
		<h>Vordefinierte Funktionen und Konstanten</h>
		NumeRe besitzt einen großen Satz vordefinierter Funktionen, Konstanten und Einheitenumrechnungen. Sie können im Symbolbaum auf der linken Seite gefunden werden, bzw. durch Eingabe von <code>list -units</code> in die Konsole für die Einheitenumrechnungen.
		Du kannst auch noch eigene Funktionen definieren, mit denen du dann genauso wie mit den vordefinierten umgehen kannst. Dazu musst du NumeRe zuvor erklären, was deine Funktion können soll. Die dazu nötige <a href="nhlp://define?frame=new">Definition</a> machst du dabei durch das Schema <code>define FUNKTIONSNAME(ARGUMENTE) := FUNKTIONSAUSDRUCK(ARGUMENTE)</code>, z.B. durch<codeblock>define f(x, y) := cos(x) + sin(y)</codeblock>
		<h>Erst mal etwas plotten ...</h>
		NumeRe verfügt über einen vielseitigen Plotalgorithmus, der dir eine graphische Darstellung von Funktionen oder Datensätzen in vielen Varianten ermöglicht.
		Einfache 1D-Plots (z.B. von <expr>f(x) = sin(x)</expr>) können durch die Eingabe von <code>plot FUNKTION -set OPTIONEN</code> erstellt werden. Dabei ist FUNKTION durch den Funktionsausdruck und OPTIONEN durch die gewünschten Plotoptionen zu ersetzen. Statt eines Funktionsausdrucks kann hierbei auch ein Datensatz angegeben werden.
		2D-Plots von Funktionen der Form <expr>z = f(x, y)</expr> bekommst du durch <code>mesh</code>, <code>surf</code>, <code>dens</code> oder <code>cont</code>, je nach gewünschter Darstellungsmethode.
		3D-Plots von Trajektorien oder Skalarfeldern (<expr>Phi = Phi(x, y, z)</expr>) werden durch das zusätzliche Anhängen von "3d" an ein Kommando (z.B. <code>surf3d</code>) erzeugt.
		Vektorfelder können durch <code>vect</code> bzw. <code>vect3d</code> dargestellt werden.
		<em>Tipp:</em> Weiterführende Infos findest du unter <a href="nhlp://plot?frame=new">help plot</a>, <a href="nhlp://plotoptions?frame=new">help plotoptions</a>, <a href="nhlp://plot3d?frame=new">help plot3d</a>, <a href="nhlp://mesh?frame=new">help mesh</a>, <a href="nhlp://mesh3d?frame=new">help mesh3d</a>, <a href="nhlp://vect?frame=new">help vect</a> und <a href="nhlp://vect3d?frame=new">help vect3d</a>
		Probiere in der Konsole mal einfach die folgende Zeile aus, die du mittels <code>[ENTER]</code> an die ausführende Schicht weiterreichst:<codeblock>plot sin(x)</codeblock>
		Es müsste eine graphische Ausgabe wie die folgende erzeugt werden:
		<img src="<>/docs/plotsinx.png" />
		<em>Hinweis:</em> Viele Plotoptionen sind persistent, d.h., sie bleiben so lange aktiv, wie sie nicht widerrufen werden. Sollte also einer der Plots bei dir anders aussehen, als du sie hier siehst, musst du womöglich Optionen zurücksetzen. Dazu hängst du einfach die Option <code>reset</code> an die Optionenliste an (siehe hierzu nächste Zeilen).
		Diese Ausgabe können wir auch noch verfeinern, indem wir ein paar Optionen zu der oberen Befehlszeile hinzufügen:<codeblock>plot sin(x) -set title="Sinusplot" box grid</codeblock>
		<em>Tipp:</em> Verwende die Pfeiltasten <code>[HOCH]</code> und <code>[RUNTER]</code>, um durch deine letzten Eingaben zu scrollen.
		Das müsste die folgende Ausgabe produzieren:
		<img src="<>/docs/plotsinxtitle.png" />
		Hier sehen wir den Effekt der übergebenen Optionen <code>title="TITEL"</code>, <code>box</code> und <code>grid</code>. Manche dieser Optionen (so wie <code>box</code> und <code>grid</code>) bleiben für die folgenden Plots bestehen, so lange sie nicht explizit widerrufen werden (mit den Optionen <code>nobox</code> bzw. <code>nogrid</code>). Probiere doch mal<codeblock>plot sin(x), cos(x) -set xlabel="Zeit t [s]" ylabel="Amplitude y [m]"</codeblock>
		Das sollte diese Ausgabe erzeugen, wobei die Box und das Gitter zu beachten sind, die aus dem vorherigen Plot übernommen wurden:
		<img src="<>/docs/plotsinxcosx.png" />
		Herzlichen Glückwunsch! Du hast nun gelernt, wie ein Plot erzeugt wird, wie mehr als eine Funktion geplottet wird und wie Optionen funktionieren. Weitere Details zum Plotten findest du, indem du<codeblock>help plot</codeblock>in die Konsole eingibst. Im Allgemeinen kann das <code>help</code>-Kommando in vielen Fällen bereits mit den nötigen Informationen weiterhelfen.
		<h>Nun zur Arbeit mit Datensätzen ...</h>
		Wir wollen uns nun etwas mit der Arbeit mit Datensätzen beschäftigen. Datensätze werden von NumeRe eigentlich immer als eine Tabelle interpretiert. D.h. wiederum, dass die Daten irgendwie in Form einer Tabelle vorhanden sein müssen - nach Möglichkeit mit den Datenreihen in den Spalten. Tabellen als Textdatei als *.dat oder *.txt kannst du mittels des Kommandos <code>load DATEI</code>, wobei DATEI der Dateiname des Datensatzes ist, in den Arbeitsspeicher laden. Kommentare müssen dabei durch ein <code>#</code> am Anfang der Zeile auskommentiert werden, Dezimaltrennzeichen kann der Punkt oder das Komma (oder beides) sein und die einzelnen Spalten müssen durch mindestens ein Leerzeichen oder einen Tabulator getrennt sein.
		Des Weiteren kann NumeRe auch die Tabelle aus einer CASSY(R)-LABX-Datei extrahieren, sie auswerten und ggf. in eine *.dat-Datei exportieren. Außerdem versteht NumeRe Comma Separated Value-Datafiles (*.csv), JCAMP-DX-Files (*.dx), IGOR Binary Waves (*.ibw), OpenDocument-Spreadsheets (*.ods) und Excel(R)-Mappen (*.xls und *.xlsx). Das zusätzliche "NumeRe-Datafile"-Format (*.ndat) wird standardmäßig zum Speichern verwemdet, allerdings handelt es sich dabei um ein binäres Format, das nur von NumeRe gelesen werden kann. Die Daten können aber auch in eine Text-, eine TeXdatei oder eine Excel(R)-Mappe exportiert werden, wenn das gewünscht ist.
		NumeRe kommt bereits mit ein paar Beispieldatensätzen. Probiere mal:<codeblock>load &lt;scriptpath&gt;/examples/data</codeblock>
		Es müsste eine Erfolgsmeldung ausgegeben werden, die des Weiteren die Größe des Datensatzes umfasst. Beachte auch, dass die Dateiendung <code>*.dat</code> erraten wurde. Das funktioniert mit <code>*.dat</code>, <code>*.txt</code> und <code>*.ndat</code>.
		Wenn du willst, kannst du die Datei auch im <a href="nhlp://editor?frame=new">Editor</a> ansehen. Gebe hierzu einfach<codeblock>edit &lt;scriptpath&gt;/examples/data</codeblock>in die Konsole ein.
		Was bedeutet aber eigentlich der eingegebene Befehl? Nun, <code>load</code> und <code>edit</code> sind die Kommandos und eigentlich selbsterklärend: <code>load</code> sagt NumeRe, dass die Daten aus einer Datei geladen werden sollen und <code>edit</code> sagt, dass der Benutzer eine Datei (z.B. im Editor) bearbeiten möchte.
		Im Anschluss wurde jedes Mal <code>&lt;scriptpath&gt;/examples/data</code> eingegeben. Dies bezeichnet den Pfad zu der Datei, wobei <code>&lt;scriptpath&gt;</code> eine Abkürzung (ein sogenannter "Pfadplatzhalter") für das Scriptverzeichnis von NumeRe ist, also wird die Datei "data.dat" im Unterordner "examples" des NumeRe-Scriptverzeichnisses mit diesem Ausdruck bezeichnet.
		Um die Daten in NumeRe's Speicher anzusehen, gebe<codeblock>show data()</codeblock>in die Konsole ein. Du solltest nun eine Tabelle in der Konsole sehen, die vier Spalten umfasst. <code>show</code> ist wieder das Kommando und <code>data()</code> der Ausdruck (Zeige mir den Inhalt von <code>data()</code>). Eigentlich ist <code>data()</code> bereits eine Abkürzung für <code>data(:,:)</code> und beschreibt "Alle Zeilen und alle Spalten". Wir kommen dazu später noch.
		<em>Tipp:</em> Du kannst in den Optionen auch den externen Viewer für <code>show</code> und <code>help</code> aktivieren. Dann werden die Hilfeartikel und die Datensätze in externen Fenstern angezeigt.
		Beachte, dass geladene Daten <em>immer</em> in <code>data()</code> zu finden sind. Der Dateiname hat hierauf keinen Einfluss.
		Wir wollen nun versuchen, die Verteilung der Daten zu analysieren. Dazu kannst du<codeblock>hist data() -set bins=30</codeblock>in die Konsole eingeben. Nach kurzer Zeit müsste eine Tabelle und eine graphische Darstellung wie die folgende erzeugt worden sein:
		<img src="<>/docs/hist.png" />
		Wieder sieht man, dass Box und Gitter aus den vorherigen Plots übernommen wurde. Das Kommando <code>hist</code> hat ein <a href="nhlp://hist?frame=new">Histogramm</a> aus den Daten erzeugt und mittels <code>bins=30</code> wurden 30 Rubriken für das gesamte Histogramm verwendet. Eine Rubrik ist dabei immer zwischen zwei Intervallstrichen zu verstehen, die Balken sind so schmal, damit alle vier zwischen diese Striche passen. Beachte, dass bei einem Histogramm mit vielen Rubriken manchmal nicht immer alle Intervallstriche angezeigt werden.
		Gibt man die Zahl der Rubriken nicht vor, wird NumeRe automatisch die Bins anhand der Zahl der Datenpunkte bestimmen. In diesem Fall wäre das Ergebnis jedoch nicht ansehnlich.
		Um die numerischen Werte der Verteilungen zu bekommen, kannst du<codeblock>stats data()</codeblock>verwenden. Dies gibt alle wesentlichen <a href="nhlp://stats?frame=new">Statistiken</a> der Spalten zurück. Tiefergehendere oder ausführlichere Auswertungen kann NumeRe machen, wenn du die dazu nötigen Gleichungen direkt eingibst, wobei die Daten im Arbeitsspeicher durch <code>data(ZEILE, SPALTE)</code> repräsentiert sind. Gebe einfach mal folgendes in die Konsole ein:<codeblock>7*exp(data(12, 3)^2)</codeblock>
		Wir wollen lernen, wie man Datenpunkte selbst generieren kann. Dazu kannst du die folgenden Zeilen in die Konsole eingeben:
		<codeblock>
			new zerfall()
			zerfall(:, 1) = eval -set [0:20];
			zerfall(:, 2) = eval 5*exp(-x/20) + gauss(0, 0.1) -set [0:20];
			plot zerfall()
		</codeblock>
		Mit dem ersten Kommando hast du eine neue Tabelle erzeugt. Das ist im Prinzip wie <code>data()</code> mit einem eigenen Namen. Details finden sich unter <a href="nhlp://table?frame=new">help table</a>.
		Das zweite und dritte Kommando füllt die erste bzw. zweite Spalte mit automatisch berechneten Werten. Im ersten Fall sind es 100 gleichverteilte Werte zwischen 0 und 20, im zweiten Fall sind es die Funktionswerte einer Exponentialfunktion die mit gaußförmigem Rauschen mit der Halbwertsbreite 0,1 modifiziert wurden. Die Zeilen werden mit einem Semikolon <code>;</code> abgeschlossen, damit die Ergebnisse nicht in der nächsten Zeile ausgegeben werden.
		Du solltest eine Ausgabe wie die folgende erhalten:
		<img src="<>/docs/decay.png" />
		Doch was ist hier los? Warum sind hier nur Kreuze und keine Linien mehr? Das ist eine Eigenschaft von NumeRe. NumeRe stellt nur Funktionswerte als Funktionen dar, während Datenpunkte als Punkte dargestellt werden.
		Nun wollen wir versuchen, ob wir die Parameter dieser Zerfallskurve nicht wieder aus den Daten rekonstruieren können. Dies nennt man <em>Fitten</em>. NumeRe besitzt einen Leuvenberg-Marquardt-Algorithmus, der dies erledigen kann. Gebe die folgenden Zeilen in die Konsole ein:
		<codeblock>
			fit zerfall() -with=A*exp(-B*x)
			A, 1/B
			plot zerfall(), Fit(x)	
		</codeblock>
		Was bedeuten diese Zeilen? Die erste Zeile fittet die Funktion <expr>A e^(–B x)</expr> an die Daten in <code>zerfall()</code> und modifiziert dazu <expr>A</expr> und <expr>B</expr>. Es wird eine Tabelle mit allen möglichen Werten ausgegeben, die uns an dieser Stelle nicht weiter interessieren soll. Details sind unter <a href="nhlp://fit?frame=new">help fit</a> zu finden.
		Die zweite Zeile berechnet die Werte von <expr>A</expr> und <expr>1/B</expr> und gibt diese zurück. Das sollte so etwas wie<codeblock>ans = {   5.026311,   19.85775}</codeblock>ergeben. Dies sind aber die beiden Parameter, die wir zur Erzeugung der Daten verwendet haben (mit einer kleinen Abweichung durch das Rauschen, natürlich).
		Die dritte Zeile plottet das Ergebnis. Die Funktion <code>Fit(x)</code> wird von NumeRe beim Fitten automatisch generiert und enthält die Funktion, die zum Fitten verwendet wurde. Um eine Funktion selbst zu definieren, kannst du dir die Informationen aus <a href="nhlp://define?frame=new">help define</a> ziehen.
		Du solltest die folgende Ausgabe erhalten haben:
		<img src="<>/docs/fit.png" />
		Wie zu sehen ist, verläuft die angepasste Funktion mitten durch die Datenpunkte und gleicht sie aus.
		<h>Automatisieren, Scripte &amp; Prozeduren</h>
		Wie zuvor erwähnt wurde, kann NumeRe vordefinierte Abläufe automatisieren. Dazu stehen dir einfache Programmierfunktionen zur Verfügung, die du während der Laufzeit direkt eingeben, oder aber in ein sogenanntes "NumeRe-Script" (*.nscr) auslagern kannst.
		Als Funktionen stehen dir die Zählschleife (<code>for</code>-Schleife), die bedingte Schleife (<code>while</code>-Schleife), die bedingte Verzweigung (<code>if</code>-Verzweigung) und die Auswahlverzweigung (<code>switch</code>-Verzweigung) zur Verfügung, die im Wesentlichen über dieselben Fähigkeiten wie die entsprechenden Varianten aus C/C++ verfügen.
		Scripte kannst du durch klicken auf die Toolbarfunktion "Ausführen" [F5] oder das Kommando <code>start SCRIPT</code>, wobei SCRIPT durch den Dateinamen des Scripts zu ersetzen ist, starten. Wenn ein Script gestartet wurde, werden alle Ausdrücke zeilenweise abgearbeitet, die im Script gefunden werden. Im Dateibaum unter "Scripte/examples" sollten ein paar Beispielscripte zu finden sein, sofern du sie bei Installation nicht abgewählt hast. Teste einfach mal<codeblock>start examples/amplitude</codeblock>
		Die größtmögliche Flexibilität bietet dir der integrierte Interpreter, der in der Lage ist, komplexe Automatismen, "NumeRe-Prozeduren" (*.nprc) genannt, auszuführen. Diese Prozeduren kannst du verwenden, um deine eigenen Unterprogramme in diesem Framework zu entwickeln. Auch wenn die Vielfalt der Funktionen dieser Prozeduren vielleicht noch eingeschränkt erscheinen mag, so wird sie doch stetig erweitert.
		<em>Tipp:</em> Weiterführende Infos findest du unter <a href="nhlp://for?frame=new">help for</a>, <a href="nhlp://while?frame=new">help while</a>, <a href="nhlp://if?frame=new">help if</a>, <a href="nhlp://switch?frame=new">help switch</a>, <a href="nhlp://script?frame=new">help script</a> und <a href="nhlp://procedure?frame=new">help procedure</a>
		<h>Was kommt nun?</h>
		Wenn du die bisherigen Informationen langweilig fandest, dann kannst du direkt loslegen. Wir konnten dir hier nichts mehr beibringen, du weißt offenbar schon alles.
		Im anderen Fall jedoch seiest du auf die PDF-Dokumentation verwiesen, die diesem Programm beiliegt und unter <code>&lt;&gt;/docs</code> gefunden werden kann.
	</contents>
</article>