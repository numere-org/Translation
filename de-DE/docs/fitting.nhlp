<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2016  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="fitting">
	<title string="Datenanpassung" idxkey="fit" />
	<keywords>
		<keyword>anpass</keyword>
		<keyword>fit</keyword>
		<keyword>with</keyword>
		<keyword>tol</keyword>
		<keyword>iter</keyword>
		<keyword>saverr</keyword>
		<keyword>mask</keyword>
	</keywords>
	<contents>
		<syntax>
			fit TABLE() -with=f(x,PARAMS)
			fit TABLE() -with=f(x,PARAMS) params=[PARAMS] ...
			fitw TABLE() -with=f(x,PARAMS) ...\n
			fit TABLE() -with=f(x,y,PARAMS)
			fit TABLE() -with=f(x,y,PARAMS) params=[PARAMS] ...
			fitw TABLE() -with=f(x,y,PARAMS) ...
		</syntax>
		NumeRe ist mit einem einfachen Algorithmus zur Datenanpassung ausgestattet, der gegebene, eindimensionale Funktionen mit Hilfe von Parametern an Datenreihen mit <expr>x</expr>-<expr>y</expr>- bzw. <expr>y</expr>-Datenpunkten anpasst. Dabei wird eine Funktion <expr>y = FUNC(x,PARAMS)</expr> erwartet. Außerdem kann NumeRe auch zweidimensionale Funktionen an <expr>z(x,y)</expr>-Datenpunkte anpassen. Hierfür wird eine Funktion <expr>z = FUNC(x,y,PARAMS)</expr> erwartet. Sobald die Variable <expr>y</expr> in <expr>FUNC()</expr> gefunden wird, wird automatisch ein 2D-Fit gestartet.
		<h>Fitten ohne Fehlerwerte</h>
		Der einfachste Fitmodus wird mit dem Kommando <code>fit</code> gestartet. Darauf muss die Angabe zweier Spalten in einer Tabelle, bzw. eines Spaltenbereichs für einen 2D-Fit, folgen, sowie mittels des Parameters <code>-with=FUNC(x,PARAMS)</code> bzw. <code>-with=FUNC(x,y,PARAMS)</code> die zu fittende Funktion und durch <code>-params=[PARAMS=INITIALWERTE]</code> die entsprechenden, anzupassenden Parameter:<codeblock>fit DATEN(:,J1:J2) -with=FUNC(x,PARAMS) params=[PARAMS=INITIALWERTE]</codeblock>Alle anderen Variablen, die in der Funktion <expr>FUNC()</expr> auftreten und nicht Teil der Parameterliste sind, werden als Konstanten betrachtet. NumeRe wird nur Parameter der Parameterliste anpassen.
		Die Option <code>params=PARAMS</code> kann auch weggelassen werden. Dann werden automatisch alle Variablen, die in der Funktion gefunden werden, als Parameter betrachtet (Mit Ausnahme von <expr>x</expr> und <expr>y</expr>). Startwerte sind jedoch auch hier 0 (oder aus früheren Rechnungen vorgegebene Werte).
		<em>Hinweis:</em> Sollte NumeRe mit den vorgegebenen Startwerten nicht zurecht kommen, so werden alle darin auftretenden <expr>0.0</expr> durch <expr>1.0</expr> ersetzt und ein neuer Versuch gestartet.
		Die Ergebniswerte der angepassten Parameter werden in den übergebenen Parametervariablen gespeichert, so dass damit direkt weitergearbeitet werden kann. Die verwendete Funktion wird zusätzlich in <code>Fit()</code> bzw. <code>Fitw()</code> gespeichert. Ebenfalls wird der letzte berechnete Wert für die gewichtete Summe der Residuen (<expr>chi^2</expr>) in der Variablen <code>chi</code> in der Form<exprblock>chi = sqrt(chi^2)</exprblock>abgelegt.
		<h>Fitten mit Fehlerwerten</h>
		Wenn die <expr>y</expr>- oder <expr>x</expr>-<expr>y</expr>-Werte (bzw. die <expr>z</expr>-Werte bei einem 2D-Fit) mit Fehlern versehen sind, dann können diese mittels des Kommandos <code>fitw</code> berücksichtigt werden. Dieser Modus gewichtet die Datenpunkte entsprechend ihrer Fehlerwerte. Die Syntax ist identisch zu zuvor, allerdings sind hierbei für reine <expr>y</expr>-Fehlerwerte drei Spalten oder für <expr>x</expr>-<expr>y</expr>-Fehlerwerte vier Spalten (entweder einzeln oder als Gruppe) anzugeben:<codeblock>fitw DATEN(:,J1:J2:J3:J4) -with=FUNC(x,PARAMS) params=[PARAMS=INIT.]</codeblock>Wie die meisten Leuvenberg-Marquardt-Algorithmen kann auch NumeRe nur reine <expr>y</expr>-Fehler verarbeiten. Daher werden die <expr>x</expr>-<expr>y</expr>-Fehler intern zu einem gemeinsamen Fehler gemittelt.
		<h>Ergebniswerte der Parameter</h>
		Die berechneten Fehlerwerte der angepassten Parameter können mithilfe der Option <code>saverr</code> in neue Variablen gespeichert werden, die gemäß <code>PARAM_error</code> benannt wurden (z.B. <code>Amplitude_error</code>, wenn der Parameter <code>Amplitude</code> lautet).
		<em>Hinweis:</em> Wenn die berechneten Fehlerwerte mit den Ergebnissen anderer Programme verglichen werden sollen, ist zu beachten, dass die berechneten Fehlerwerte bei <code>fit</code> asymptotisch geschätzt werden, während <code>fitw</code> sie als Standardabweichung berechnet. Numerisch unterscheiden sich diese Fehlertypen durch eine Multiplikation mit der Varianz der Residuen (reduziertes <expr>chi^2</expr>). Die Prozentwerte in Klammern beschreiben den prozentualen Anteil der Fehlerwerte an den angepassten Parameterwerten.
		<h>Einschränken des Fit-Intervalls</h>
		Gegebenenfalls kann es von Vorteil sein, nicht den Zeilenbereich des Datenobjekts sondern das Intervall der entsprechenden <expr>x</expr>-Achse (bzw. der <expr>y</expr>- oder <expr>z</expr>-Achsen) für den Fitalgorithmus einzuschränken. Dies kann erreicht werden, indem die zusätzliche Option <code>x=XMIN:XMAX</code> (bzw. <code>y=YMIN:YMAX</code>, etc.; bzw. gemeinsam durch <code>[XMIN:XMAX,YMIN:YMAX,ZMIN:ZMAX]</code>) übergeben wird, wobei XMIN und XMAX (bzw. YMIN und YMAX, etc.) die untere bzw. obere Grenze des zu fittenden Intervalls beschreiben.
		<h>Analyse und Speichern des Ergebnisses</h>
		NumeRe protokolliert die Ergebnisse auch automatisch in <code>&lt;savepath&gt;/numerefit.log</code>, damit die Ergebnisse auch zu einem späteren Zeitpunkt verfügbar sind. Diese Datei ist auf 100 000 Zeilen beschränkt und wird ggf. auf 20 000 Zeilen gekürzt. Außerdem wird die Qualität der Anpassung analysiert und NumeRe wird ggf. auch Verbesserungsvorschläge machen. Die Verbesserungsvorschläge beruhen auf dem Wert der Varianz der Residuen, wobei hier analysiert wird, inwieweit das Ergebnis mit dem Erwartungswert einer normalverteilten Streuung übereinstimmt, sowie dem Gesamtwert der prozentualen Fehlerwerte der angepassten Parameter. Diese Analyse kann einen optischen Vergleich der angepassten Funktion mit den Datenpunkten nicht ersetzen, sondern nur unterstützen.
		<h>Parameterüberblick</h>
		Die Parameter und Optionen sind hier noch einmal zusammengefasst:
		<list>
			<item node="-with=FUNC(x,[y,]PAR)">Gibt die an die Daten anzupassende Funktion FUNC() an</item>
			<item node="-params=[PAR=INI]">Deklariert die anzupassenden Parameter PAR inklusive ihrer Initialwerte INI</item>
			<item node="-restrict=[RESTRICT]">Deklariert Einschränkungen RESTRICT für die Parameter PAR. Diese müssen in Form eines oder mehrer logischer Ausdrücke für die Parameter angegeben werden. Details finden sich unter <a href="nhlp://restrict?frame=new">help restrict</a></item>
			<item node="-saverr">Speichert die berechneten Fehlerwerte in neuen Variablen ab</item>
			<item node="-mask">Unterdrückt die Ausgabe der Ergebniswerte und das Kürzen der Protokolldatei. Die Ergebnisse werden dennoch darin hinterlegt</item>
			<item node="-export=[FILENAME]">Erlaubt den Export der zurückgegebenen Tabelle in eine TeX-Datei. Der Dateiname kann mittels FILENAME angegeben werden, anderenfalls wird der Export in <code>&lt;savepath&gt;/fit.tex</code> angelegt. Diese Ausgabe wird nicht von <code>mask</code> beeinflusst</item>
			<item node="-x=XMIN:XMAX">Schränkt das <expr>x</expr>-Intervall für den Fitalgorithmus auf [XMIN,XMAX] ein</item>
			<item node="-y=YMIN:YMAX">Schränkt das <expr>y</expr>-Intervall für den Fitalgorithmus auf [YMIN,YMAX] ein</item>
			<item node="-z=ZMIN:ZMAX">Schränkt das <expr>y</expr>-Intervall für den 2D-Fitalgorithmus auf [ZMIN,ZMAX] ein</item>
			<item node="-tol=TOLERANZEN">Legt die Toleranzen für den Algorithmus fest, ab der ein Parametersatz als konvergent betrachtet wird. Es können relative und absolute Toleranzen getrennt <code>tol={reltol,abstol}</code> oder als gemeinsamer Wert angegeben werden. Standardmäßig sind beide <expr>10^(-4)</expr></item>
			<item node="-iter=ITERATIONEN">Legt die maximale Zahl der Iterationen fest, nach denen der Fitalgorithmus abgebrochen wird. Hier ist 500 vorgegeben</item>
			<item node="-chimap=DATAGRID()">Erzeugt einen <expr>chi^2</expr>-Konvergenz-Datensatz. Das Datengitter muss bereits die korrekten Dimensionen und die entsprechenden Parameternamen als Spaltenüberschriften besitzen. Details finden sich unter <a href="nhlp://chimap?frame=new">help chimap</a></item>
		</list>
		<example desc="Anpassen einer Sinusfunktion an eine Tabelle (mit y-Fehlern):">
			fitw table(:,1:3) -with=amp*sin(f*x+phi)+off params=[amp=1,f=1,phi=0,off=0]
		</example>
	</contents>
</article>

<article id="fitting_chimap">
	<title string="chi^2-Konvergenz-Datensätze" idxkey="chimap" />
	<keywords>
		<keyword>chi</keyword>
		<keyword>Konvergenz</keyword>
	</keywords>
	<contents>
		<syntax>
			fit TABLE() -with=f(x,PARAMS) chimap=GRID() ...
			fitw TABLE() -with=f(x,PARAMS) chimap=GRID() ...\n
			fit TABLE() -with=f(x,y,PARAMS) chimap=GRID() ...
			fitw TABLE() -with=f(x,y,PARAMS) chimap=GRID() ...
		</syntax>
		Eine sehr hilfreiche Funktion zur Modelluntersuchung im Rahmen von Modellanpassungen ist der sogenannte "<expr>chi^2</expr>-Konvergenz-Datensatz" oder "<expr>chi^2</expr>-Map". Dabei werden die <expr>chi^2</expr>-Werte in einem Datensatz protokolliert, die erhalten werden, wenn ein oder zwei Parameter vorgegeben variiert und die restlichen an den Datensatz angepasst werden. Anhand der Form eines oder mehrerer entstandender Minima lassen sich Aussagen über die Konvergenz des Modells treffen. Um einen solchen Datensatz zu erhalten, ist die Option <code>chimap=DATAGRID()</code> erforderlich, wobei durch <code>DATAGRID()</code> die Variationen der Parameter vorgegeben werden müssen:
		<list>
			<item node="Spaltentitel">Die Titel der ersten Spalte(n) müssen mit den zu variierenden Parametern übereinstimmen. Stimmt nur die erste Spalte überein, wird nur dieser Parameter variiert und es wird ein 1D-Datensatz in der zweiten Spalte angelegt. Stimmen beide überein, wird ein 2D-Datensatz ab der dritten Spalte angelegt, der einem Datengitter entspricht. Die Spaltentitel dürfen jedoch nicht "x" oder "y" lauten.</item>
			<item node="Variationswerte">Die Variationswerte müssen in den ersten beiden Spalten zu finden sein, zu denen die Spaltentitel mit einem Parameter übereinstimmen. Je nach Länge dieser Spalten kann die Erzeugung des Datensatzes <em>sehr viel</em> Zeit benötigen.</item>
		</list>
		<em>Hinweis:</em> Die angepassten Parameter werden für jeden Punkt auf ihren vorgegeben Startwert zurückgesetzt. Dies geschieht ebenso nach Abschluss der Datensatzberechnung.
		<em>Wichtig:</em> Es können bei <expr>n</expr> Parametern nur <expr>n-1</expr> Parameter variiert werden. Damit kann dieser Datensatz nicht für ein einparametriges Modell erhalten werden. Für ein zweiparametriges Modell kann auch nur ein 1D-<expr>chi^2</expr>-Konvergenz-Datensatz bestimmt werden.
	</contents>
</article>

<article id="fitting_restrictions">
	<title string="Parametereinschränkungen bei Anpassungen" idxkey="restrict" />
	<keywords>
		<keyword>restrict</keyword>
		<keyword>einschränk</keyword>
		<keyword>param</keyword>
	</keywords>
	<contents>
		<syntax>
			fit TABLE() -with=f(x,PARAMS) restrict=[RESTRICTS] ...
			fitw TABLE() -with=f(x,PARAMS) restrict=[RESTRICTS] ...\n
			fit TABLE() -with=f(x,y,PARAMS) restrict=[RESTRICTS] ...
			fitw TABLE() -with=f(x,y,PARAMS) restrict=[RESTRICTS] ...
		</syntax>
		Falls für die Parameter bei einer Modellanpassung Einschränkungen für deren Wertebereich existieren, so können diese in Form <code>restrict=[PARAM_RESTRICTS]</code> angegeben werden. <code>PARAM_RESTRICTS</code> sind dabei durch einen oder mehrere logische Ausdrücke für die Parameter anzugeben, z.B. <code>restrict=[a&lt;1,b!=2.5]</code>. Die Reihenfolge spielt keine Rolle und logische Ausdrücke können auch mehrere Parameter zugleich umfassen. Allerdings kann die Konvergenz des Algorithmus dadurch u.U. noch stärker von den vorgegebenen Startwerten abhängen. Ein paar Beispiele für Parametereinschränkungen:
		<list>
			<item node="A">Parameter A darf nicht 0 sein</item>
			<item node="A &gt;= 0">Parameter darf nicht negativ sein</item>
			<item node="A &gt; 0.5 && A &lt; 1.5">Parameter A ist ungefähr 1.0</item>
			<item node="A &gt; rint(A)-0.25 && A &lt; rint(A)+0.25">Parameter A sollte eine ganze Zahl sein</item>
		</list>
	</contents>
</article>