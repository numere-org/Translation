<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2018  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="rekurs_oprt">
	<title string="Mathematische und Zeichenketten-Operatoren" idxkey="rekursiv, operator" />
	<keywords>
		<keyword>*=</keyword>
		<keyword>+=</keyword>
		<keyword>-=</keyword>
		<keyword>/=</keyword>
		<keyword>operat</keyword>
		<keyword>rekurs</keyword>
		<keyword>recurs</keyword>
	</keywords>
	<contents>
		Mathematische oder Zeichenketten-Operationen benötigen einen definierten Satz an Operationen, die durch die unten aufgelisteten Operatoren repräsentiert werden. Dabei können viele Operationen sowohl mit numerischen Werten als auch mit Zeichenketten durchgeführt werden. Einige Operationen sind auch rekursiv verfügbar.
		NumeRe kann mit den folgenden rekursiven Operatoren umgehen: <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>^=</code> und <code>**=</code>. Diese Operatoren sind Abkürzungen der Form:<codeblock>VAR += AUSDRUCK &lt;=&gt; VAR = VAR + (AUSDRUCK)</codeblock>und analog für die anderen Operatoren.
		Speziell ist auch der Vektorinitialisierer in seinen beiden Formen: <code>{A : B}</code> und <code>{A : C : B}</code>. Diese Operatoren generieren einen Vektor, der sich aus einer Expansion der Elemente von <code>A</code> bis <code>B</code> ergibt. Dabei ist<codeblock>{A : B} = {A, A+1, A+2, ..., A+n, (B)}\n{A : C : B} = {A, A+C, A+2C, ..., A+nC, (B)}</codeblock><code>B</code> ist die Grenze der Inkrementierung. Wenn <code>B</code> durch die Operation nicht erreicht werden kann, wird es nicht in den Vektor übernommen, sondern nur das letzte Element davor. <code>B</code> kann auch kleiner als <code>A</code> sein. Dann wird im ersteren Fall automatisch dekrementiert. Es können auch mehrere Expansionen und einfache Vektoren durch Komma kombiniert werden:<codeblock>{a, b, A : B, c, C : E : D, ...} = {a, b, A, A+1, ..., (B), c, C, C+E, ..., (D), ...}</codeblock>
		Die folgenden Operatoren sind verfügbar:
		<table>
			<tr>
				<td><em>Operation</em></td><td><em>Operatorsymbol</em></td><td><em>Rekursiv</em></td><td><em>numerisch</em></td><td><em>Zeichenkette</em></td>
			</tr>
			<tr>
				<td>Addition/Verknüpfung</td><td><code>A + B</code></td><td><code>A += B</code></td><td>X</td><td>X</td>
			</tr>
			<tr>
				<td>Subtraktion</td><td><code>A - B</code></td><td><code>A -= B</code></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Multiplikation</td><td><code>A * B</code></td><td><code>A *= B</code></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Division</td><td><code>A / B</code></td><td><code>A /= B</code></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Exponent</td><td><code>A ^ B</code></td><td><code>A ^= B</code></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Modulo</td><td><code>A % B</code></td><td></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Matrixmultiplikation</td><td><code>A ** B</code></td><td><code>A **= B</code></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Zuweisung</td><td><code>A = B</code></td><td></td><td>X</td><td>X</td>
			</tr>
			<tr>
				<td>Fakultät</td><td><code>A!</code></td><td></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Doppelfakultät</td><td><code>A!!</code></td><td></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Logisches NICHT</td><td><code>!A</code></td><td></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Logisches UND</td><td><code>A && B</code></td><td></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Logisches ODER</td><td><code>A || B</code></td><td></td><td>X</td><td></td>
			</tr>		
			<tr>
				<td>Logisches XOR</td><td><code>A ||| B</code></td><td></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Binäres UND</td><td><code>A & B</code></td><td></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Binäres ODER</td><td><code>A | B</code></td><td></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Gleich</td><td><code>A == B</code></td><td></td><td>X</td><td>X</td>
			</tr>
			<tr>
				<td>Ungleich</td><td><code>A != B</code></td><td></td><td>X</td><td>X</td>
			</tr>
			<tr>
				<td>Kleiner als</td><td><code>A &lt; B</code></td><td></td><td>X</td><td>X</td>
			</tr>
			<tr>
				<td>Größer als</td><td><code>A &gt; B</code></td><td></td><td>X</td><td>X</td>
			</tr>
			<tr>
				<td>Kleiner oder gleich</td><td><code>A &lt;= B</code></td><td></td><td>X</td><td>X</td>
			</tr>
			<tr>
				<td>Größer oder gleich</td><td><code>A &gt;= B</code></td><td></td><td>X</td><td>X</td>
			</tr>
			<tr>
				<td>Intervall</td><td><code>A : B</code></td><td></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Zeichenketten-Parser</td><td><code>#A</code></td><td></td><td>X</td><td>X</td>
			</tr>
			<tr>
				<td>Logische Klammern</td><td><code>(A)</code></td><td></td><td>X</td><td>X</td>
			</tr>
			<tr>
				<td>Listen-/Vektorklammern</td><td><code>{A, B, ...}</code></td><td></td><td>X</td><td>X</td>
			</tr>
			<tr>
				<td>Vektorinitialisierer mit Abstand 1</td><td><code>{A : B}</code></td><td></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Vektorinitialisierer mit C != 1</td><td><code>{A : C : B}</code></td><td></td><td>X</td><td></td>
			</tr>
			<tr>
				<td>Zeichenkette</td><td><code>"A"</code></td><td></td><td>X</td><td>X</td>
			</tr>
			<tr>
				<td>If-Else-Konstrukt</td><td><code>A ? B : C</code></td><td></td><td>X</td><td>X</td>
			</tr>
			<tr>
				<td>Eingabeaufforderung</td><td><code>??</code></td><td></td><td>X</td><td>X</td>
			</tr>
			<tr>
				<td>Zeilenumbruch</td><td><code>\\</code></td><td></td><td>X</td><td>X</td>
			</tr>
		</table>
	</contents>
</article>
