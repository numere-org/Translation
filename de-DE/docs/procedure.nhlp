<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2016  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="procedure">
	<title string="NumeRe-Prozeduren" idxkey="procedure" />
	<keywords>
		<keyword>$</keyword>
		<keyword>proced</keyword>
		<keyword>endproced</keyword>
		<keyword>program</keyword>
		<keyword>prozed</keyword>
	</keywords>
	<contents>
		Neben der Möglichkeit, <a href="nhlp://script?frame=new">Scripte</a> auszuführen, ist NumeRe auch mit der mächtigen Fähigkeit ausgestattet, <em>komplexe Prozeduren</em> durchzuführen. Diese Prozeduren haben in etwa den Stellenwert einer Funktion in der gewöhnlichen Programmierung mit C/C++ oder anderen Programmiersprachen. So können auch komplexe Aufgaben mithilfe von Prozeduren gelöst werden, da selbige u.A. auch rekursiv aufgerufen werden können.
		<h>Syntax</h>
		Prozedurdefinitionen werden durch das Schlüsselwort <code>procedure</code> eingeleitet und durch <code>endprocedure</code> abgeschlossen. Auf das einleitende Schlüsselwort <code>procedure</code> muss der Name der Prozedur mit einem vorangestellten <code>$</code> und die Argumentliste angegeben werden. Direkt danach können nach <code>::</code> noch <em>optionale Flags</em> übergeben werden, die auf die gesamte Prozedur Einfluss haben. Zwischen den Schlüsselwörtern <code>procedure</code> und <code>endprocedure</code> befindet sich dann der Rumpf der Prozedur, in welchem die eigentlichen Befehle abgearbeitet werden:
		<codeblock>
			procedure $PROZEDURNAME(ARGLIST) :: FLAGS    ## Prozedurenkopf
			\tPROZEDURENRUMPF                          ## Ausdrücke und Befehle
			endprocedure                                 ## Prozedurenfuß
		</codeblock>
		<h>Argumente und Referenzen</h>
		Die Argumentliste der Prozedur muss Komma-getrennt sein. Dabei kann für jedes Argument ein Standardwert vorgegeben werden, der verwendet wird, wenn kein Wert für dieses Argument an die Prozedur übergeben wird: <code>ARG1 = STANDARDWERT1, ARG2, ARG3 = STANDARDWERT2, ...</code> Wenn ein Argument eine <a href="nhlp://table?frame=new">Tabelle</a> sein soll, so muss dieses Argument mit Klammern deklariert werden (<code>TABLE() = STANDARDTABLE(), ...</code>), soll es ein <a href="nhlp://cluster?frame=new">Cluster</a> sein, sind geschweifte Klammern nötig (<code>CLUSTER{}</code>, hierbei kann entweder ein globales Standard-Cluster oder eine Liste mit Standardwerten angegeben werden via <code>CLUSTER{} = {VAL1, VAL2, ...}</code>).
		Beim ersten Aufruf der Prozedur wird diese intern übersetzt, damit alle weiteren Aufrufe schneller durchgeführt werden können. Dabei wird der Typ der Prozedurargumente beachtet und die Prozedur entsprechend optimiert. Ein Aufruf der Prozedur mit verschiedenen Variablentypen kann dann zu einem Fehler führen. In diesem Fall muss die Prozedur als <code>template</code> geflagt werden.
		Die Inhalte der Argumente werden immer in interne Variablen kopiert. Jede Änderung eines Argumentwertes innerhalb einer Prozedur hat daher keinen Einfluss auf den Wert der Quellvariable. Wenn gewünscht ist, dass der Inhalt der Quellvariablen innerhalb der Prozedur modifiziert werden kann, muss das entsprechende Argument als <em>Referenz</em> deklariert werden. Das erreicht man, indem an das Argument ein zusätzliches Und-Symbol (<code>&amp;</code>) angehängt wird:<codeblock>procedure $PROZEDURNAME(ARG&)</codeblock>Es ist nicht möglich Literalkonstanten als Referenzen zu übergeben. Nur Variablen können referenziert werden. Der <a href="nhlp://debugger?frame=new">NumeRe-Debugger</a> wird Referenzen ebenfalls entsprechend markieren.
		<em>Hinweis:</em> In älteren Versionen von NumeRe wurden Argumente direkt in den Code kopiert und waren damit automatisch Referenzen. Das galt allerdings auch für Literalkonstanten, was für Überraschungen sorgen konnte, da diese nicht direkt überschrieben werden können. Aus ebendiesem und Gründen der leichteren Les- und Wartbarkeit wurden die zu deklarierenden Referenzen (<code>&amp;</code>) eingefügt. Das alte Verhalten kann allerdings wiederhergestellt werden, wenn die Prozedur als <code>macro</code> geflagt wird.
		<h>Lokale und globale Variablen</h>
		Neue Variablen, die innerhalb von Prozeduren deklariert werden, sind <em>automatisch global</em> und können von allen Prozeduren verwendet werden. Wenngleich das bequem erscheint und manchmal unumgänglich ist, so sollte es doch wegen möglicher Nebeneffekte vermieden und stattdessen auf lokale Variablen zurückgegriffen werden.
		Um lokale Variablen zu deklarieren, müssen die <a href="nhlp://proccmd?frame=new">Kommandos</a> <code>var</code> (numerische Variablen), <code>str</code> (Zeichenketten), <code>tab</code> (Tabellen) und <code>cst</code> (Cluster) verwendet werden. Es können durch eine Komma-separierte Liste auch gleich mehrere Variablen pro Kommando deklariert werden. Abgesehen von <code>tab</code> können dabei auch gleich Initialwerte für die neuen Variablen in der Form <code>VAR = VALUE, VAR = VALUE, ...</code> deklariert werden. Ebenso können diese Kommandos mehrmals pro Prozedur auftreten.
		<h>Dateistruktur</h>
		Prozeduren müssen einzeln als "NumeRe-Prozedur" (*.nprc) im Prozedurenordner vorliegen, wobei der Dateiname mit dem Prozedurennamen übereinstimmen muss. Wer sicher gehen will, kann die Prozedur(en) auch in ein NumeRe-Script in einen <code>&lt;install&gt; ... &lt;endinstall&gt;</code>-Block schreiben und das Script mit dem zusätzlichen Parameter <code>install</code> oder durch <code>install SCRIPT</code> ausführen. NumeRe wird dann automatisch eine (oder mehrere) NumeRe-Prozedur(en) mit dem passenden Dateinamen und am richtigen Ort anlegen. (NumeRe kann auch Prozeduren aus anderen Ordnern laden, wenn der absolute oder relative Dateipfad in <em>einfachen</em> Anführungszeichen als Prozedurname angegeben wird: <code>$'PFAD_ZUR_PROZEDUR'(VARLIST)</code>. Wegen der Fehleranfälligkeit solch langer Dateinamen wird allerdings davon abgeraten.)
		Es können auch mehrere Prozeduren in eine Datei gefasst werden, so lange eine davon den Namen der Datei trägt. Die weiteren Prozeduren können dann aus der namensgebenden Prozedur mit der speziellen Syntax <code>$thisfile~...</code> (s.u.) aufgerufen werden.
		<h>Flags</h>
		Als Flags für den Prozedurenkopf existieren die folgenden:
		<list>
			<item node="private">Eine Prozedur mit diesem Flag kann <em>nur</em> von einer Prozedur aus dem gleichen Namensraum aufgerufen werden. Eine derartige Deklaration macht z.B. Sinn, wenn eine Prozedur eine Voraussetzung besitzt, die von einer anderen Prozedur zuvor erfüllt werden muss. (Prozeduren, die mittels <code>$thisfile~...</code> (s.u.) aufgerufen werden und nicht Namensgeber der Datei sind, sind implizit <code>private</code>)</item>
			<item node="explicit">Dieser Flag verhindert, dass in der Prozedur Plugins verwendet werden. Dies kann bei zeitkritischen Berechnungen von Vorteil sein, oder um zu verhindern, dass in der eigenen Plugindeklaration eine Endlosschleife auftritt.</item>
			<item node="inline">Eine als <code>inline</code> geflagte Prozedur kann innerhalb einer Schleife schneller ausgeführt werden. Allerdings darf eine "inline-Prozedur" keine Schleifen, Prozeduren oder Plugins enthalten. Dieser Flag ist nur eine Empfehlung für NumeRe. NumeRe wird versuchen, die Inhalte der Prozedur bei der Ausführung in Schleifen in diese zu kopieren, sofern dies möglich ist. Wenn es nicht möglich ist, sind die Laufzeitvorteile nur gering. Die folgenden Kommandos verhindern das Inlining: <code>cst, tab, namespace, ifndefined, define, lclfunc, redefine, undefine</code>. In Zukunft wird es zusätzlich erforderlich sein, diesem Prozedurentyp Tabellen als Referenzen zu übergeben</item>
			<item node="mask">Eine mit <code>mask</code> geflagte Prozedur unterdrückt alle Systemausgaben während ihrer eigenen Ausführung und der aller von ihr aufgerufenen Prozeduren.</item>
			<item node="template">Der <code>template</code>-Flag erlaubt die Verwendung dieser Prozeduren mit verschiedenen Variablentypen als Argumente. Anderenfalls kann die Prozedur nur mit dem Typ verwendet werden, mit dem sie aufgerufen wurde.</item>
			<item node="macro">Deaktiviert das Kopieren der Argumentwerte in interne Variablen und kopiert stattdessen die kompletten Argumente in den Code (<em>Veraltet und wird ggf. in Zukunft entfernt</em>).</item>
			<item node="test">Markiert die aktuelle Prozedur als ein Software-Test. Syntaxfehler, Ausdrucksfehler und fehlerhafte Ausdrücke mit <code>assert</code> werden hier nicht als Fehler sondern nur als Warnung angezeigt, so dass der Code trotz eines Fehlerfalls weiter ausgeführt werden kann. Dieser Flag sollte nicht für produktiven Code verwendet werden. Während der Ausführung werden die Teststatistiken in dem automatisch erzeugten Cluster <code>TESTINFO{}</code> abgelegt.</item>
			<item node="event">Der <code>event</code>-Flag optimiert die Prozedur zur Verwendung mit GUI-Events (<a href="nhlp://window?frame=new"><code>window</code></a>). Zusätzlich wird automatisch <code>mask</code> verwendet. Dieser Flag stellt auch sicher, dass Events auch in neueren Versionen mit eigentlich längeren Prozedursignaturen lauffähig bleiben.</item>
		</list>
		<h>Eine Prozedur aufrufen</h>
		Prozeduren können durch das <code>$</code> mit darauffolgendem Prozedurennamen und der Variablenliste aufgerufen werden. Dies kann sowohl direkt in der NumeRe-Konsole, als auch in einer Schleife oder einem Script passieren. NumeRe wird dann den bisherigen Programmablauf unterbrechen und die gewünschte Prozedur ausführen. Falls die Prozedur einen Rückgabewert (Signalisiert durch das Kommando <code>return</code>) besitzt, kann dieser auch an eine Variable zugewiesen oder damit gerechnet werden.
		<h>Namensräume</h>
		Ähnlich wie C++ ist NumeRe mit sogenannten Namensräumen ausgestattet, die verwendet werden können, um Namenskonflikte mit anderen Prozeduren zu vermeiden oder um ganze Projekte zu untergliedern. Die Syntax, um eine Prozedur aus einem bestimmten Namensraum aufzurufen, lautet <codeblock>$NAMENSRAUM~PROZEDUR(ARGUMENTE)</codeblock>Diese Namensräume werden durch Unterordner im Standard-Prozedurordner, die nach dem jeweiligen Namensraum benannt sind, umgesetzt (und nicht etwa durch <code>procedure $NAMENSRAUM~PROZEDUR(ARGLIST) ...</code>). Der Namensraum <code>main</code> ist der globale Namensraum (oder der Standard-Prozedurordner); der Namensraum <code>this</code> ist der Namensraum der aktuellen Prozedur. Eine Sonderstellung nimmt der Namensraum <code>thisfile</code> ein: dieser Namensraum ist auf die aktuelle Datei beschränkt. Alle Prozeduren in dieser Datei, die nicht den Namen der Datei tragen, sind außerdem automatisch <code>private</code>.
		Mit dem Kommando <code>namespace NSP</code> kann der Namensraum NSP für die nachfolgenden Prozeduren aktiviert werden, um nicht bei jeder Prozedur den Namensraum angeben zu müssen. Prozeduren aus anderen Namenräumen können allerdings immer noch aufgerufen werden, indem der Namensraum direkt bei der Prozedur angegeben wird.
		Falls eine Prozedur mithilfe eines Scripts oder der direkten Konsoleneingabe erzeugt werden soll und falls selbige in einem anderen Namensraum als <code>main</code> liegen soll, muss dieser im Prozedurkopf durch<codeblock>procedure $NAMENSRAUM~PROZEDUR(ARGLIST)\n\t...\nendprocedure</codeblock>angegeben werden. (Dies dient jedoch nur zur Identifikation des Namenraumes und wird nicht in die Prozedur-Datei geschrieben.)
		<h>Dokumentation</h>
		Um Prozeduren zu dokumentieren und die Informationen später in ein <a href="nhlp://latex?frame=new">PDF</a> umzuwandeln (dabei wird der gesamte Abhängigkeitsbaum in eine gemeinsame Datei dokumentiert), orientiert NumeRe sich am <em>Doxygen</em>-Standard und definiert zwei spezielle Zeichensequenzen, um Dokumentationen von den üblichen Kommentaren abzusetzen: <code>##! ...</code> leitet einen Zeilen-Dokumentations-Kommentar ein und <code>#*! ... *#</code> umschließt einen Dokumentations-Kommentar-Block.
		Dokumentationskommentare, die direkt über oder unter den Prozedurkopf geschrieben werden, verwendet NumeRe auch als Tooltip-Hilfe für die jeweilige Prozedur. Dabei haben die Kommentare, die <em>über</em> dem Kopf sind, Vorrang vor denen unter dem Kopf der Prozedur.
		Zusätzlich können in Dokumentations-Kommentaren die folgenden Signalwörter verwendet werden, um den Bezug klarer zu machen. Außerdem werden sie im späteren PDF in spezielle Textelemente umgewandelt.
		<list>
			<item node="\procedure PROCNAME">(Nur PDF) Definiert den neuen Abschnitt PROCNAME für die aktuelle Prozedur und zeigt auch die direkt aufgerufenen Prozeduren an</item>
			<item node="\param NAME (DEF) DESC">Definiert den Parameter NAME mit dem optionalen Standardwert DEF und der Beschreibung DESC. Generiert eine Tabelle im PDF und wird im Tooltip als Liste angezeigt</item>
			<item node="\return TYPE DESC">Definiert den Rückgabewert vom Typ TYPE und der Beschreibung DESC. Generiert eine Tabelle im PDF und wird im Tooltip als <code>$PROCNAME(PARAM) :: FLAGS -> TYPE</code> angezeigt. Es können mehrere Rückgabewerte definiert werden, die dann als <code>-> {TYPE1,TYPE2,...}</code> im Tooltip zu sehen sind. Dabei kann TYPE auch von geschweiften Klammern umschlossen sein, um den vektoriellen Charakter auszudrücken. Als Konvention wird <code>VAL</code> für einen numerischen Wert, <code>STR</code> für eine Zeichenkette, <code>CST</code> für ein Cluster, <code>TAB</code> für eine Tabelle (bzw. <code>MAT</code> für Matrix) und <code>ARG</code> für ein Rückgabewert, der von den Argumenttypen abhängt, verwendet</item>
			<item node="\remark REM">Die Dokumentation mit einer entsprechenden Bemerkung REM versehen</item>
		</list>
		Wenn der Cursor auf einem Prozedurkopf verweilt, kann mit der entsprechenden Funktion im Werkzeuge-Menü oder [CTRL-ALT-B] eine Maske für den Dokumentationsblock für die aktuelle Prozedur automatisch generiert werden, in der nur noch die eigentliche Beschreibung der entsprechenden Elemente eingefügt werden muss. Diese Funktion kann jedoch aufgrund der Vielfältigkeit der Rückgabewerte ebendiese <em>nicht</em> detektieren.
		<h>Weitere Informationen</h>
		In Prozeduren können auch Teile von Scripten durch die Syntax <code>@SCRIPT</code> eingeladen werden. Dies entspricht dem identischen Ausdruck, der in einem Script verwendet werden kann. Ebenso sind hier die Parameter <code>@SCRIPT: globals</code> und <code>@SCRIPT: defines</code> verfügbar.
		In Prozeduren kann neben den Pfadplatzhaltern <code>&lt;loadpath&gt;</code>, <code>&lt;scriptpath&gt;</code>, etc. auch der spezielle Platzhalter <code>&lt;this&gt;</code> verwendet werden, der das Verzeichnis, in welchem sich die Prozedur befindet, beinhält.
		<em>Wichtig:</em> Neben den üblichen Kommandos und Ausdrücken kann der Rumpf einer Prozedur noch spezielle Kommandos mit prozedurenspezifischer Bedeutung enthalten. Diese sind unter <a href="nhlp://proccmd?frame=new">help proccmd</a> aufgelistet.
		<em>Wichtig:</em> Prozeduren können nicht beliebig tief rekursiv aufgerufen werden, da der Aufrufstapelspeicher begrenzt ist. Je nach Rechnerarchitektur und Rechenaufwand der Prozedur sind bis zu 1800 Rekursionen möglich. Danach bricht NumeRe mit einem entsprechenden Fehler ab.
		Die Auswertung kann auch mit der <code>ESC</code>-Taste abgebrochen werden, falls sie zu viel Zeit in Anspruch nimmt.
		Prozeduren können auch verwendet werden, um die Funktionalität von NumeRe mithilfe von Plugins (welche durch ein Kommando aufgerufen werden können) zu erweitern. Die Deklaration eines solchen Plugins kann jedoch nur innerhalb eines <code>&lt;install&gt; ... &lt;endinstall&gt;</code>-Blocks in einem NumeRe-Script geschehen. (Siehe hierzu <a href="nhlp://plugin?frame=new">help plugin</a>)
		<example desc="Eine Prozedur, die eine Datenanalyse automatisiert (wird in NumeRe aufgerufen durch <code>$analyse_data(DATAFILENAME)</code>):" type="verbatim">
			|   procedure $analyse_data(datafile)
			|       if (!data())
			|           load to_string(datafile)
			|       else
			|           return false
			|       endif
			|       stats data() -export="stats_" + to_string(datafile)
			|       hist data() -export="hist_" + to_string(datafile) bins=32
			|       return true;
			|   endprocedure	
		</example>
		<em>Siehe auch:</em> <a href="nhlp://plugin?frame=self">help plugin</a>, <a href="nhlp://install?frame=self">help install</a>, <a href="nhlp://cluster?frame=self">help cluster</a>, <a href="nhlp://if?frame=self">help if</a>, <a href="nhlp://for?frame=self">help for</a>, <a href="nhlp://while?frame=self">help while</a>, <a href="nhlp://switch?frame=self">help switch</a> und <a href="nhlp://script?frame=self">help script</a>
	</contents>
</article>

<article id="procedure_commands">
	<title string="Prozedur-Kommandos" idxkey="proccmd" />
	<keywords>
		<keyword>proccmd</keyword>
		<keyword>proccomman</keyword>
		<keyword>readli</keyword>
		<keyword>return</keyword>
		<keyword>readli</keyword>
		<keyword>namesp</keyword>
		<keyword>localvars</keyword>
		<keyword>throw</keyword>
		<keyword>var</keyword>
		<keyword>str</keyword>
		<keyword>tab</keyword>
		<keyword>cst</keyword>
		<keyword>this</keyword>
		<keyword>msg</keyword>
		<keyword>main</keyword>
	</keywords>
	<contents>
		Der Rumpf einer Prozedur kann die üblichen Kommandos und Ausdrücke beinhalten, die auch direkt in die Konsole eingegeben werden könnten. Zusätzlich gibt es aber noch spezielle Kommandos mit prozedurenspezifischer Bedeutung:
		<list>
			<item node="var VARIABLEN">Damit werden prozedureninterne Variablen deklariert, die nur innerhalb der aktuellen Prozedur verwendet werden sollen und können (sie sind auch dann eindeutig, wenn die Prozedur sich selbst rekursiv aufruft). Es können auch gleich die Initialwerte der Variablen in der Form <code>var VAR1 = WERT, VAR2 = WERT, ...</code> angegeben werden.</item>
			<item node="str STRINGVARS">Dies deklariert prozedureninterne Zeichenkettenvariablen, die nur in der aktuellen Prozedur verwendet werden können. Auch hier können die Initialwerte der Variablen in der Form <code>str SVAR1 = ZEICHENKETTE, SVAR2 = ZEICHENKETTE</code> angegeben werden.</item>
			<item node="tab TABLES">Dies deklariert prozedureninterne Tabellen, die nur in der aktuellen Prozedur verwendet werden können. Es können auch gleich die Initialwerte der Variablen in der Form <code>tab TAB1() = {WERTE}, TAB2() = OTHERTAB(), ...</code> angegeben werden.</item>
			<item node="cst CLUSTER">Dies deklariert prozedureninterne Cluster, die nur in der aktuellen Prozedur verwendet werden können. Es können auch gleich die Initialwerte der Variablen in der Form <code>cst CST1{} = {WERTE}, CST2{} = {WERTE}, ...</code> angegeben werden.</item>
			<item node="return WERT">Erreicht NumeRe während der Auswertung dieses Kommando, so verlässt NumeRe die Prozedur an dieser Stelle (egal, ob dieses Kommando inmitten oder am Ende einer Prozedur erscheint. Kommandos, die in den darauffolgenden Zeilen stehen, werden nicht mehr ausgeführt). <code>return</code> kann auch mehrfach in einer Prozedur verwendet werden, z.B. um den Rückgabewert von einer Bedingung abhängig zu machen. Ebenso ist dieses Kommando nicht zwingend erforderlich; Prozeduren geben standardmäßig den Wert <code>true</code> zurück, wenn kein <code>return</code> oder ein <code>return</code> ohne Wert gefunden wurde. WERT kann dabei alle Variablentypen umfassen, die NumeRe kennt. (<em>Hinweis:</em> <code>return TAB()</code> wird nur eine Tabelle zurückgeben, wenn der Rückgabewert auch von einer Tabelle aufgenommen wird. Sonst wird <code>TAB()</code> als <code>true</code> (nicht-leere Tabelle) oder <code>false</code> (leere Tabelle) interpretiert.) Ein spezieller Wert ist <code>void</code>. Dieser teilt NumeRe mit, dass die Prozedur definitiv keinen Rückgabewert besitzt.</item>
			<item node="readline">Bietet die Möglichkeit, (im Gegensatz zu <code>??</code>) eine formatierte Eingabe abzufragen. Parameter sind <code>-asstr</code> (wandelt die Eingabe direkt in eine Zeichenkette um), <code>-msg=NACHRICHT</code> (Schreibt die NACHRICHT an den Anfang der Zeile, z.B. als Erläuterung) und <code>-dflt=STANDARD</code> (Definiert einen Defaultwert STANDARD). Die Eingabe kann durch <code>VAR = readline</code> bzw. <code>string() = readline -asstr</code> direkt in eine Variable oder das <code>string()</code>-Objekt gespeichert werden.</item>
			<item node="namespace NSP">Wechselt an dieser Stelle in den Namensraum NSP. Wenn für NSP <code>main</code> oder nichts angegeben wird, wechselt NumeRe in den globalen Namensraum; mit <code>this</code> in den Namensraum der aktuellen Prozedur. <code>thisfile</code> beschränkt den Namensraum auf die aktuelle Datei.</item>
			<item node="throw">Wenn ein Ereignis auftritt, das in einer Prozedur nicht vorgesehen ist (was z.B. ein unsinniger Wert sein kann), so dass die weitere Auswertung unnötig/fehlerhaft wird, kann dieses Kommando verwendet werden, um sofort alle Prozeduren zu beenden. Die Wirkungsweise entspricht einer Exception in C++ (und wird intern auch so ausgewertet). Es kann eine eigene Fehlermeldung ausgegeben werden, wenn diese als Zeichenkette angehängt wird. (<code>throw "FEHLERMELDUNG"</code>)</item>
		</list>
	</contents>
</article>