<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2017  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="additionalcommands">
	<title string="Zusätzliche Kommandos" idxkey="about, hline, warn, close, assert, clc, qrcode" />
	<keywords>
		<keyword>about</keyword>
		<keyword>hline</keyword>
		<keyword>credits</keyword>
		<keyword>info</keyword>
		<keyword>single</keyword>
		<keyword>warn</keyword>
		<keyword>close</keyword>
		<keyword>assert</keyword>
		<keyword>clc</keyword>
		<keyword>qrcode</keyword>
	</keywords>
	<contents>
		<syntax>
			about\n
			hline
			hline -single\n
			warn MESSAGE\n
			close -PAR\n
			assert EXPRESSION\n
			clc\n
			qrcode STR
			qrcode STR -set file=FILENAME ...
		</syntax>
		Neben den eher Auswertungs-orientierten Kommandos beherrscht NumeRe	ein paar weitere Kommandos, die mehr der reinen Benutzerschnittstelle zugeordnet werden können. Das sind unter anderem die Kommandos <a href="nhlp://help?frame=new"><code>help</code></a> und <a href="nhlp://find?frame=new"><code>find</code></a>, sowie die folgenden Kommandos:
		<list>
			<item node="about">Dieses Kommando (und die Synonyme <code>credits</code> und <code>info</code>) zeigen rechtliche Informationen zu NumeRe und zur Version an.</item>
			<item node="hline">Dieses Kommando zeichnet eine horizontale Doppellinie im Terminal. Wird der Parameter <code>-single</code> angehängt, wird eine einfache Linie gezeichnet.</item>
			<item node="warn">Dieses Kommando zeigt die übergebene Zeichenkette als eine Warnung im Terminal an. Dies sollte nur für tatsächliche Warnungen verwendet werden, da die Warnungen sich auf die Laufzeit des Codes auswirken.</item>
			<item node="close">Dieses Kommando schließt zuvor geöffnete Fenster, die durch Parameter mittels <code>close -PAR</code> ausgewählt werden: <code>-graphs</code> schließt alle Graphen, <code>-docs</code> alle Hilfe-Fenster, <code>-tables</code> alle Tabellen, <code>-images</code> alle ImageViewer und <code>-all</code> alle Fenster aus dieser Liste.</item>
			<item node="assert">Das Kommando <code>assert EXPR</code> ist zur Verwendung in Software-Tests gedacht. Es prüft den Ausdruck <code>EXPR</code> auf logische Wahrheit und gibt ihn anschließend zurück. Ist der Ausdruck hingegen falsch, so wird ein Fehler geworfen. Damit kann eine Testbedingung komfortabel realisiert werden. In Kombination mit dem <a href="nhlp://procedure?frame=new">Prozedur</a>-Flag <code>test</code> können umfangreiche Software-Tests implementiert werden.</item>
			<item node="clc">Dieses Kommando bereinigt das Terminal und setzt es auf den Anfangszustand zurück.</item>
			<item node="qrcode">Erzeugt einen QR-Code mit dem Inhalt der übergebenen Zeichenkette. Der QR-Code wird als SVG unter <code>&lt;savepath&gt;/qrcode.svg</code> gespeichert, wenn kein dedizierter Dateiname mittels <code>file=FILENAME</code> angegeben wird. Mit der Option <code>color={R,G,B}</code> kann die Farbe des QR-Codes und mit <code>level=LEVEL</code> (0-3) das Level der Fehlerkorrektur definiert werden.</item>
		</list>
	</contents>
</article>


<article id="declare">
	<title string="Konstantendeklarationen" idxkey="declare" />
	<keywords>
		<keyword>declare</keyword>
		<keyword>enum</keyword>
	</keywords>
	<contents>
		<syntax>
			declare SYMBOL := VAL, ...
			declare enum -&gt; {VAL1, ...}, ...
		</syntax>
		Das Kommando <code>declare</code> deklariert eine oder mehrere Datei-spezifische Konstanten für das aktuelle Script oder die aktuelle Prozedurdatei. Die Syntax ist dabei wie folgt, wobei für die Werte sowohl numerische Werte als auch Zeichenketten oder ganze Ausdrücke verwendet werden können.
		<codeblock>declare CONST1 := VALUE1, CONST2 := VALUE2, ...</codeblock>
		Zusätzlich können auch automatisch enumerierte Konstanten erzeugt werden. Dabei können zusätzlich zur automatischen Nummerierung, die mit dem Wert 1 startet, auch ganzzahlige Konstanten oder vorherige Konstanten als Werte verwendet werden. Werte, die keine ganzzahlige Literalkonstanten sind, werden hierbei ignoriert. Entstehen dabei etwaige Offsets, so werden die übernommen und ab diesem Wert weitergezählt:
		<codeblock>
			declare enum -&gt; {VAL1, VAL2, VAL3, ...}
			declare enum -&gt; {VAL1 = 10, VAL2, VAL3 = VAL2, ...}
		</codeblock>
		Die Werte ersetzen zum Zeitpunkt des Einlesens der Datei die verwendeten Konstanten. In einer Prozedurdatei kann dieses Kommando an jeder Stelle erscheinen (auch außerhalb von Prozeduren) und gilt ab seinem Auftreten für die darauffolgenden Zeilen. Durch die Verwendung von Konstanten kann ein Code sehr viel lesbarer werden, wie bei der Verwendung expliziert Literalkonstanten.
	</contents>
</article>


<article id="include">
	<title string="Einbinden weiterer Dateien" idxkey="include" />
	<keywords>
		<keyword>include</keyword>
	</keywords>
	<contents>
		<syntax>
			include FILE
			include FILE :: TYPE
		</syntax>
		Mit dem Kommando <code>include</code> können Informationen aus einer externen Datei in die aktuelle ausführbare Datei eingebunden werden:
		<codeblock>include FILE</codeblock>
		Die Datei <code>FILE</code> wird relativ zur aktuellen Datei gesucht. Dateinamen mit Leerzeichen müssen in Anführungszeichen angegeben werden. Es werden durch dieses Kommando globale Ausdrücke, Definitionen und Deklarationen an dieser Stelle importiert (in Prozedurdateien sollte dieses Kommando daher innerhalb einer Prozedur verwendet werden).
		Nach einem zusätzlichen <code>::</code> kann die Art die importierten Informationen eingeschränkt werden, z.B.<codeblock>include FILE :: declarations</codeblock>um nur Deklarationen zu importieren. Mit <code>globals</code> werden globale Ausdrücke und mit <code>definitions</code> werden Definitionen importiert. Es können mehrere Argumente zugleich verwendet werden.
	</contents>
</article>