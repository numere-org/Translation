#***************************************************************************************************
 * NUMERE-PROZEDUR: $handleEvent()
 * =================================================================================================
 * Hinzugefügt: %%2%% *#

## Get the item IDs from the window layout
include "appmain.nlyt" :: declarations

###! \procedure handleEvent
##! Handle all events originating from the "%%1%%" app window.
##!
##! \param _nWinId  The window ID
##! \param _nItemId  The ID of the firing item
##! \param _event{}  The event key-value list filled with information about the current event
procedure $handleEvent(_nWinId, _nItemId, _event{}) :: event
	var fValue, nValue
	str sValue
	cst values{}, idx{}
	##~ Füge hier deine Kommandos und Ausdrücke ein.
	|
	## Handle the events by their IDs
	switch (_nItemId)
	case nABOUT:
		dialog "%%1%% ist eine NumeRe-App" -set type=messagebox title="Über %%1%%" icon=infoicon buttons=ok;
		break
		##~ Dies sind die Eventhandler zu den Beispiel-Elementen. Lösche oder ersetze sie
	case nADD:
		## Add a coordinate
		sValue = window _nWinId -get value item=nXVALS;
		sValue = sValue + "\t" + window _nWinId -get value item=nYVALS;
		
		## Ensure that we have at least some reasonable values
		if (sValue != "\t")
			values{} = window _nWinId -get value item=nTREELIST;
			
			## Append the coordinates
			if (!num(values{}))
				values{} = sValue;
			else
				values{nlen+1} = sValue;
			endif
			
			## Update the controls and the grapher
			window _nWinId -set value=values{} item=nTREELIST;
			$thisfile~plotArray(_nWinId, values{});
		endif
		
		break
	case nDELETE:
		## Delete the currently selected point
		fValue = window _nWinId -get selection item=nTREELIST;
		
		## Ensure that we have a selection
		if (fValue)
			values{} = window _nWinId -get value item=nTREELIST;
			nValue = num(values{});
			
			## Remove the point from the list
			if (!nValue)
				return void;
			elseif (nValue == 1)
				window _nWinId -set value="" item=nTREELIST;
				return void;
			else
				idx{} = logtoidx({1:nValue} != fValue);
				values{} = values{idx{}};
			endif
			
			## Update controls and the grapher
			window _nWinId -set value=values{} item=nTREELIST;
			$thisfile~plotArray(_nWinId, values{});
		endif
		
		break
	case nRESET:
		## Reset the points list
		window _nWinId -set value="" item=nTREELIST;
		break
	endswitch
	
	## Event handler typically return nothing
	return void;
endprocedure


##! \procedure plotArray
##! Plot the list of points in the grapher
##!
##! \param _nWinId  The window ID
##! \param _array{}  The points to be plotted
procedure $plotArray(_nWinId, _array{}) :: explicit mask
	tab tArray()
	
	## Split the points at the tab char and assign them to different columns
	_array{} = split(_array{}, "\t");
	tArray(:, 1) = _array{{1:2:nlen}};
	tArray(:, 2) = _array{{2:2:nlen}};
	
	## Ensure that we can convert the columns to numerical values
	if (tArray().convert({1,2}, "value") != "value")
		dialog "Es befinden sich ungültige Einträge in der Koordinatenliste" -set type=messagebox title="%%1%%: Ungültige Koordinaten" icon=erroricon buttons=ok;
		return void;
	endif
	
	## Plot the coordinate
	plot tArray() "Koordinaten" -set box streamto={_nWinId, nGRAPHER} connect
	
	return void;
endprocedure

##~ Ergänze hier weitere lokale Prozeduren


#**Ende der Datei
 * NumeRe: Framework für Numerische Rechnungen | Freie numerische Software unter der GNU GPL v3
 * https://www.numere.org/
 **************************************************************************************************#
