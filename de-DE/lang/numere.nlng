#
# NumeRe: Framework für Numerische Rechnungen
# Copyright (C) 2018  Erik Haenel et al.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ========================================================================
# LANGUAGE FILE: numere.nlng
# LANGUAGE: de-DE
#
# PARSERFUNCS:
#======================================
PARSERFUNCS_LISTFUNC_HEADLINE=Vordefinierte Funktionen
PARSERFUNCS_LISTFUNC_TYPE_NUM=Numerik
PARSERFUNCS_LISTFUNC_TYPE_MAT=Matrix und Vektor
PARSERFUNCS_LISTFUNC_TYPE_TRIGONOMETRIC=Trigonometrie
PARSERFUNCS_LISTFUNC_TYPE_HYPERBOLIC=Hyperbelfunktionen
PARSERFUNCS_LISTFUNC_TYPE_POLYNOMIAL=Polynome
PARSERFUNCS_LISTFUNC_TYPE_STATS=Statistik
PARSERFUNCS_LISTFUNC_TYPE_STRING=Zeichenketten
PARSERFUNCS_LISTFUNC_TYPE_LOGIC=Logik
PARSERFUNCS_LISTFUNC_TYPE_TIME=Zeit
PARSERFUNCS_LISTFUNC_TYPE_RANDOM=Zufall
PARSERFUNCS_LISTFUNC_TYPE_PHYSICS=Physik
PARSERFUNCS_LISTFUNC_TYPE_ANGULAR=Winkel
PARSERFUNCS_LISTFUNC_TYPE_DISTRIB=Distributionen
PARSERFUNCS_LISTFUNC_TYPE_LOGARITHMIC=Logarithmen
PARSERFUNCS_LISTFUNC_TYPE_COORDS=Koordinaten
PARSERFUNCS_LISTFUNC_TYPE_DRAW=Zeichnungen
PARSERFUNCS_LISTFUNC_TYPE_DEFINE=Eigene Definitionen
PARSERFUNCS_LISTFUNC_TYPE_GUI=Graphische Oberflächen
PARSERFUNCS_LISTFUNC_TYPE_CMPLX=Komplexe Zahlen
# Funktionentabelle
DEFINED_FOR_ALL=Definiert für alle reellen oder komplexen Zahlen
DEFINED_FOR_ALL_C_RANGE_R=Definiert für alle komplexen Zahlen oder für reelle Zahlen im Bereich
DEFINED_REAL=Definiert für alle reellen Zahlen
DEFINED_NATURAL=Definiert für natürliche Zahlen
PARSERFUNCS_LISTFUNC_FUNC_ABS_[NUM]=						abs(x)                                                      VAL      - Betrag der reellen oder komplexen Zahl x
PARSERFUNCS_LISTFUNC_FUNC_ACOSH_[NUM_HYPERBOLIC]=			acosh(x)                                                    VAL      - Areakosinus Hyperbolicus von x. %%DEFINED_FOR_ALL_C_RANGE_R%% [1,inf) (Synonym: "arcosh(x)")
PARSERFUNCS_LISTFUNC_FUNC_ACOS_[NUM_TRIGONOMETRIC]=			acos(x)                                                     VAL      - Arkuskosinus von x. %%DEFINED_FOR_ALL_C_RANGE_R%% [-1,1] (Synonym: "arccos(x)")
PARSERFUNCS_LISTFUNC_FUNC_ACSCH_[NUM_HYPERBOLIC]=			acsch(x)                                                    VAL      - Areakosekans Hyperbolicus von x. %%DEFINED_FOR_ALL_C_RANGE_R%% [1,inf]
PARSERFUNCS_LISTFUNC_FUNC_ACSC_[NUM_TRIGONOMETRIC]=			acsc(x)                                                     VAL      - Arkuskosekans von x. %%DEFINED_FOR_ALL_C_RANGE_R%% [-1,1]
PARSERFUNCS_LISTFUNC_FUNC_AI_[NUM_PHYSICS]=					Ai(x)                                                       VAL      - Airyfunktion Ai(x). %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_ALPHA_STABLE_RD_[RANDOM_DISTRIB]= alpha_stable_rd(fScl,fAlpha)                                VAL      - Liefert eine Zufallszahl aus der stabilen Levy-Alpha-Verteilung mit Skalenparameter fScl und Exponent fAlpha.
PARSERFUNCS_LISTFUNC_FUNC_AND_[LOGIC]=						and(x,y,z,...)                                              LOG      - Verknüpft die Argumente mit dem "&&"-Operator
PARSERFUNCS_LISTFUNC_FUNC_ARCV_[DRAW]=						arcv(P,[D,]D,a,sStyle="")                                   {}       - Zeichnet einen Kreisbogen des Winkels a um den Punkt P vom Punkt P+D an. Die optionale Richtung D gibt den Normalvektor des Kreisbogens an, Standard ist die z-Achse. Der Umlaufsinn ist entgegen des Uhrzeigers. Der Stil der Kreisbogenlinie kann mittels sStyle geändert werden.
PARSERFUNCS_LISTFUNC_FUNC_ARC_[DRAW]=						arc(P,[D,]P,a,sStyle="")                                    {}       - Zeichnet einen Kreisbogen des Winkels a um den Punkt P vom Punkt P an. Die optionale Richtung D gibt den Normalvektor des Kreisbogens an, Standard ist die z-Achse. Der Umlaufsinn ist entgegen des Uhrzeigers. Der Stil der Kreisbogenlinie kann mittels sStyle geändert werden.
PARSERFUNCS_LISTFUNC_FUNC_ASCII_[STRING]=					ascii(sToParse)                                            {VAL}     - Gibt die ASCII-Zeichenwerte der Zeichen in sToParse zurück
PARSERFUNCS_LISTFUNC_FUNC_ASECH_[NUM_HYPERBOLIC]=			asech(x)                                                    VAL      - Areasekans Hyperbolicus von x. %%DEFINED_FOR_ALL_C_RANGE_R%% [1,inf]
PARSERFUNCS_LISTFUNC_FUNC_ASEC_[NUM_TRIGONOMETRIC]=			asec(x)                                                     VAL      - Arkussekans von x. %%DEFINED_FOR_ALL_C_RANGE_R%% [-1,1]
PARSERFUNCS_LISTFUNC_FUNC_ASINH_[NUM_HYPERBOLIC]=			asinh(x)                                                    VAL      - Areasinus Hyperbolicus von x. %%DEFINED_FOR_ALL%% (Synonym: "arsinh(x)")
PARSERFUNCS_LISTFUNC_FUNC_ASIN_[NUM_TRIGONOMETRIC]=			asin(x)                                                     VAL      - Arkussinus von x. %%DEFINED_FOR_ALL_C_RANGE_R%% [-1,1] (Synonym: "arcsin(x)")
PARSERFUNCS_LISTFUNC_FUNC_ASSEMBLE_[MAT]=					assemble(mRows,mCols,mValues)                               MAT      - Erstellt eine neue Matrix aus den Werten der dritten Matrix mValues. Dabei werden für die Zielindices die Zeilenindices aus der Matrix mRows und die Spaltenindices aus der Matrix mCols simultan entnommen. Alle drei Matrizen müssen identische Dimensionen haben oder Skalare sein.
PARSERFUNCS_LISTFUNC_FUNC_AS_DATE_[TIME]=					as_date(nYear,nMonth=1,nDay=1)                              VAL      - Kombiniert die einzelnen Werte zu einem gemeinsamen Datum. Das Ergebnis kann auf ein Ergebnis von as_time() addiert werden, um einen vollständigen Zeit-Datumswert zu erhalten
PARSERFUNCS_LISTFUNC_FUNC_AS_TIME_[TIME]=					as_time(nHours,nMinutes=0,nSeconds=0,nMilli=0,nMicro=0)     VAL      - Kombiniert die einzelnen Werte zu einem gemeinsamen Zeitwert bezogen auf den 1.1.1970 (UNIX Epoch) bzw. einer Dauer in Sekunden. Das Ergebnis kann auf ein Ergebnis von as_date() addiert werden, um einen vollständigen Zeit-Datumswert zu erhalten.
PARSERFUNCS_LISTFUNC_FUNC_ATANH_[NUM_HYPERBOLIC]=			atanh(x)                                                    VAL      - Areatangens Hyperbolicus von x. %%DEFINED_FOR_ALL_C_RANGE_R%% (-1,1) (Synonym: "artanh(x)")
PARSERFUNCS_LISTFUNC_FUNC_ATAN_[NUM_TRIGONOMETRIC]=			atan(x)                                                     VAL      - Arkustangens von x. %%DEFINED_FOR_ALL%% (Synonym: "arctan(x)")
PARSERFUNCS_LISTFUNC_FUNC_AVG_[STATS]=						avg(x,y,z,...)                                              VAL      - Mittelwert aus x,y,z,... %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_BASETODEC_[STRING]=				basetodec(sBase,sBaseVal)                                   VAL      - Konvertiert die Zahl sBaseVal (als Zeichenkette angegeben) aus der Basis sBase ins Dezimalsystem und gibt diese als numerischen Wert zurück. Als Werte für die Basis sBase existieren: %%ITEMIZE%%"hex": hexadezimal %%ITEMIZE%%"oct": Oktal %%ITEMIZE%%"bin": binär
PARSERFUNCS_LISTFUNC_FUNC_BESSEL_[NUM_PHYSICS]=				bessel(n,x)                                                 VAL      - Besselfunktion erster Gattung der Ordnung n am Ort x. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_BETA_[NUM]=					    beta(x,y)                                                   VAL      - Berechnet den Wert der Betafunktion an den Stellen x und y mit x,y aus R \ {-n}
PARSERFUNCS_LISTFUNC_FUNC_BETHEWEIZSAECKER_[PHYSICS]=		betheweizsaecker(nN,nZ)                                     VAL      - Kernbindungsenergie eines Nuklids (nN,nZ) in MeV aus der Bethe-Weizsäcker-Massenformel. %%DEFINED_NATURAL%% nN, nZ > 0
PARSERFUNCS_LISTFUNC_FUNC_BINOM_[NUM]=						binom(n,k)                                                  VAL      - Binomialkoeffizient von n und k. %%DEFINED_NATURAL%% >= 0
PARSERFUNCS_LISTFUNC_FUNC_BI_[NUM_PHYSICS]=					Bi(x)                                                       VAL      - Airyfunktion Bi(x). %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_CARTTOCYL_[MAT_COORDS]=			carttocyl(mCoords)                                          MAT      - Konvertiert die zwei oder drei Spalten der Matrix mCoords von kartesischen (x,y,z) zu zylindrischen Koordinaten (rho,phi,z). Erfordert den matop Modus
PARSERFUNCS_LISTFUNC_FUNC_CARTTOPOL_[MAT_COORDS]=			carttopol(mCoords)                                          MAT      - Konvertiert die zwei oder drei Spalten der Matrix mCoords von kartesischen (x,y,z) zu polaren Koordinaten (rho,phi,theta). Erfordert den matop Modus
PARSERFUNCS_LISTFUNC_FUNC_CAUCHY_CDF_P_[DISTRIB]= 			cauchy_cdf_p(x,fScl)                                        VAL      - Liefert den Wert der kumulativen Verteilungsfunktion bei x für die Cauchy-Verteilung mit dem Skalenparameter fScl.
PARSERFUNCS_LISTFUNC_FUNC_CAUCHY_CDF_Q_[DISTRIB]= 			cauchy_cdf_q(x,fScl)                                        VAL      - Liefert den Wert der komplementären kumulativen Verteilungsfunktion an x für die Cauchy-Verteilung mit dem Skalenparameter fScl.
PARSERFUNCS_LISTFUNC_FUNC_CAUCHY_INV_P_[DISTRIB]= 			cauchy_inv_p(p,fScl)                                        VAL      - Gibt den Wert der inversen kumulativen Verteilungsfunktion an p für die Cauchy-Verteilung mit dem Skalenparameter fScl zurück.
PARSERFUNCS_LISTFUNC_FUNC_CAUCHY_INV_Q_[DISTRIB]= 			cauchy_inv_q(q,fScl)                                        VAL      - Liefert den inversen Wert der komplementären kumulativen Verteilungsfunktion bei q für die Cauchy-Verteilung mit dem Skalenparameter fScl.
PARSERFUNCS_LISTFUNC_FUNC_CAUCHY_PDF_[DISTRIB]= 			cauchy_pdf(x,fScl)                                          VAL      - Liefert den Wert der Dichte der Verteilungsfunktion bei x für die Cauchy-Verteilung mit dem Skalenparameter fScl.
PARSERFUNCS_LISTFUNC_FUNC_CAUCHY_RD_[RANDOM_DISTRIB]= 		cauchy_rd(fScl)                                             VAL      - Liefert eine Zufallszahl aus der Cauchy-Verteilung mit Skalenparameter fScl.
PARSERFUNCS_LISTFUNC_FUNC_CHAR_[STRING]=					char(sStr,nPos)                                             STR      - Gibt das Zeichen aus der Zeichenkette sStr an der Stelle nPos zurück
PARSERFUNCS_LISTFUNC_FUNC_CIRCLE_[DRAW]=					circle(P,r,sStyle="")                                       {}       - Zeichnet einen Kreis um den Punkt P mit dem Radius r. Die Füllung und der Stil des Kreises kann mittels sStyle geändert werden. polygon() mit n >= 30 erzielt ähnliche Ergebnisse und erlaubt ein Kippen des "Kreises".
PARSERFUNCS_LISTFUNC_FUNC_CIRCSHIFT_[MAT]=					circshift(mMat,n,nDim=0)                                    MAT      - Verschiebt alle Elemente der Matrix mMat um n Positionen entlang Richtung der Matrixdimension nDim (wählen Sie 0 für Zeile und 1 für Spalte).
PARSERFUNCS_LISTFUNC_FUNC_CL2_[NUM]=					    Cl2(x)                                                      VAL      - Berechnet den Wert der Clausenfunktion an der Stelle x. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_CLOCK_[TIME]=						clock()                                                     VAL      - Gibt die Zahl der Prozessorclicks seit dem Start von NumeRe zurück. Die Länge eines Clicks ist abhängig von der Hardware, häufig aber 1 Millisekunde
PARSERFUNCS_LISTFUNC_FUNC_CMP_[STATS]=						cmp(x,y,z,...,fCmpVal,nCmpType)                             VAL      - Vergleicht x,y,z,... mit fCmpVal und gibt ein Ergebnis entsprechend nCmpType = {-4,-3,-2,-1,0,1,2,3,4} zurück: %%ITEMIZE%%nCmpType = 0: Index des Elements, das gleich fCmpVal ist %%ITEMIZE%%nCmpType = -1: Index des größten Elements, das kleiner oder gleich fCmpVal ist %%ITEMIZE%%nCmpType = 1: Index des kleinsten Elements, fCmpValdas größer oder gleich fCmpVal ist %%ITEMIZE%%nCmpType = -2 bzw. nCmpType = 2: Werte der Elemente wie in nCmpType = -1 bzw nCmpType = 1 beschrieben %%ITEMIZE%%nCmpType = -3 bzw. nCmpType = 3: Index des ersten Elements, das kleiner bzw. größer als oder gleich fCmpVal ist%%ITEMIZE%%nCmpType = -4 bzw. nCmpType = 4: Werte der Elemente wie in nCmpType = -3 bzw nCmpType = 3 beschrieben.%%ITEMIZE_END%%Wird kein passendes Element gefunden, gibt die Funktion "nan" zurück. Definiert auf ganz R
PARSERFUNCS_LISTFUNC_FUNC_CNT_[STATS]=						cnt(x,y,z,...)                                              VAL      - Gibt die Zahl aller Argumente zurück (auch der ungültigen). Kann auch auf Zeichenketten angewendet werden; gibt in diesem Fall aber mindestens 1 zurück.
PARSERFUNCS_LISTFUNC_FUNC_COMPLEX_[NUM_CMPLX]=				complex(fRe,fIm)                                            VAL      - Erzeugt eine komplexe Zahl aus den angegeben Real- fRe und Imaginärteilen fIm. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_CONEV_[DRAW]=						conev(P,D,r,r,sStyle="")                                    {}       - Zeichnet einen Kegelmantel von P nach P+D mit Radius r. Mit dem zweiten Radius r wird ein Kegelstumpf dargestellt. Mittels sStyle kann durch @ die Darstellung der Deckelflächen erzwungen werden. Durch 4, 6 oder 8 wird eine 4-, 6- oder 8-Seite Pyramide(nstumpf) anstatt des Kegels gezeichnet.
PARSERFUNCS_LISTFUNC_FUNC_CONE_[DRAW]=						cone(P,P,r,r,sStyle="")                                     {}       - Zeichnet einen Kegelmantel von P nach P mit Radius r. Mit dem zweiten Radius r wird ein Kegelstumpf dargestellt. Mittels sStyle kann durch @ die Darstellung der Deckelflächen erzwungen werden. Durch 4, 6 oder 8 wird eine 4-, 6- oder 8-Seite Pyramide(nstumpf) anstatt des Kegels gezeichnet.
PARSERFUNCS_LISTFUNC_FUNC_CONJ_[NUM_CMPLX]=					conj(z)                                                     VAL      - Gibt die komplex-konjugierte Zahl zur komplexen Zahl z zurück. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_COORDSTOGRID_[MAT_COORDS]=		coordstogrid(mGrid,mCoords)                                 MAT      - Bildet die ein oder zwei Spalten der Matrix mCoords in den Gitterkoordinaten der Matrix mGrid ab: x -> idx bzw. (x,y) -> (row,col), wobei die berechneten Gitterkoordinaten ebenfalls Fließkommazahlen sind. Dies kann verwendet werden, um Werte aus dem zugehörigen Datengitter z.B. mit 'interpolate(grid,coords)' zu interpolieren. Erfordert den matop Modus
PARSERFUNCS_LISTFUNC_FUNC_CORREL_[MAT]=						correl(mMat1,mMat2)                                         MAT      - Berechnet die Korrelationsmatrix aus den beiden Argumenten. Wenn die beiden Argumente nicht die gleichen Dimensionen haben, werden sie um die entsprechende Zahl an Zeilen und Spalten durch 0 ergänzt. Wenn die Argumente identisch sind, wird die Autokorrelationsmatrix berechnet. Die berechnete Ergebnismatrix hat die Dimensionen 2n-1 x 2m-1, wobei das Element MAT(n,m) die Korrelation der Nullverschiebung bezeichnet
PARSERFUNCS_LISTFUNC_FUNC_COSH_[NUM_HYPERBOLIC]=			cosh(x)                                                     VAL      - Kosinus Hyperbolicus von x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_COS_[NUM_TRIGONOMETRIC]=			cos(x)                                                      VAL      - Kosinus von x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_COT_[NUM_TRIGONOMETRIC]=			cot(x)                                                      VAL      - Kotangens von x. %%DEFINED_FOR_ALL_C_RANGE_R%% R \ {n*PI}. n ist eine ganze Zahl.
PARSERFUNCS_LISTFUNC_FUNC_COVAR_[MAT]=						covar(mMat1,mMat2)                                          VAL      - Berechnet die Kovarianz der beiden Argumente. Die Argumente müssen dieselben Dimensionen haben
PARSERFUNCS_LISTFUNC_FUNC_CROSS_[MAT]=						cross(mMat)                                                 VEC      - Berechnet das n-dimensionale Kreuzprodukt der Vektoren, welche die n-1 Spalten der Matrix mMat bilden.
PARSERFUNCS_LISTFUNC_FUNC_CSCH_[NUM_HYPERBOLIC]=			csch(x)                                                     VAL      - Kosekans Hyperbolicus von x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_CSC_[NUM_TRIGONOMETRIC]=			csc(x)                                                      VAL      - Kosekans von x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_CUBOID_[DRAW]=					cuboid(P,D,D,D,sStyle="")                                   {}       - Funktion zum Darstellen eines Spats: zeichnet einen Würfel mit der linken unteren Ecke bei P, von wo aus gleichzeitig ein Koordinatensystem ausgeht. Die Richtung D beschreibt die x-Richtung des Spats. Die y-Richtung wird orthogonal dazu gewählt, wobei die z-Koordinate identisch ist. Die z-Richtung wird aus den ersteren beiden Berechnet. Wenn eine zweite Richtung gegeben ist, so beschreibt diese die y-Richtung des Spats; die z-Richtung wird orthogonal zu den ersteren gewählt. Die dritte Richtung beschreibt schließlich auch die z-Richtung des Spats.
PARSERFUNCS_LISTFUNC_FUNC_CUMPRD_[MAT]=                     cumprd(mMat,nDim=0)                                         MAT      - Berechnet das kumulative Produkt der Elemente in der Matrix mMat. Ist mMat ein Vektor, so gibt die Funktion einen Vektor zurück. Ist mMat eine Matrix, so bestimmt der optionale Parameter nDim (standardmäßig 0) das Verhalten:%%ITEMIZE%%nDim = 0: Funktion rollt die Matrix zeilenweise aus und berechnet das kumulative Produkt der Vektorkomponenten%%ITEMIZE%%nDim = 1: Funktion berechnet das kumulative Produkt entlang der Zeilen%%ITEMIZE%%nDim = 2: Funktion berechnet das kumulative Produkt entlang der Spalten%%ITEMIZE_END%%Erfordert den matop Modus.
PARSERFUNCS_LISTFUNC_FUNC_CUMSUM_[MAT]=                     cumsum(mMat,nDim=0)                                         MAT      - Berechnet die kumulative Summe der Elemente in der Matrix mMat. Ist mMat ein Vektor, so gibt die Funktion einen Vektor zurück. Ist mMat eine Matrix, so bestimmt der optionale Parameter nDim (standardmäßig 0) das Verhalten:%%ITEMIZE%%nDim = 0: Funktion rollt die Matrix zeilenweise aus und berechnet die kumulative Summe der Vektorkomponenten%%ITEMIZE%%nDim = 1: Funktion berechnet die kumulative Summe entlang der Zeilen%%ITEMIZE%%nDim = 2: Funktion berechnet die kumulative Summe entlang der Spalten%%ITEMIZE_END%%Erfordert den matop Modus.
PARSERFUNCS_LISTFUNC_FUNC_CURVE_[DRAW]=						curve(P,D,P,D,sStyle="")                                    {}       - Zeichnet eine "Bezier"-Linie von P nach P. Die Richtungsvektoren D geben die jeweilige Krümmung der Kurve an. Zu beachten ist, dass das Koordinatensystem beim zweiten Punkt um PI gedreht ist (Ggf. sind zusätzliche Vorzeichen beim zweiten Richtungsvektor nötig). Farbe, Form und Linienenden können mittels sStyle geändert werden.
PARSERFUNCS_LISTFUNC_FUNC_CUTOFF_[MAT]=				    	cutoff(mMat,fThreshold,nMode=0)                             MAT      - Wendet ein CutOff auf die Eingangsmatrix mMat an. Dabei gibt das fThreshold den Grenzwert und nMode den Modus an. Für den Modus nMode kann gewählt werden:%%ITEMIZE%%nMode = 1: fThreshold wird prozentual interpretiert und alle Werte überhalb des Wertes werden abgeschnitten%%ITEMIZE%%nMode = -1: alle Werte unterhalb eines prozentual angegebenen Wertes werden abgeschnitten%%ITEMIZE%%nMode = 2: alle Werte überhalb des absolut angegebenen Wertes werden abgeschnitten%%ITEMIZE%%nMode = -2: alle Werte unterhalb des absolut angegebenen Grenzewerts werden abgeschnitten%%ITEMIZE%%nMode = 0: es wird prozentual angegeben wie viel Prozent der Ergebnisse um den Mittelwert erhalten bleiben sollen%%ITEMIZE_END%%Erfordert den matop Modus.
PARSERFUNCS_LISTFUNC_FUNC_CYLTOCART_[MAT_COORDS]=			cyltocart(mCoords)                                          MAT      - Konvertiert die zwei oder drei Spalten der Matrix mCoords von zylindrischen (rho,phi,z) zu kartesischen Koordinaten (x,y,z). Erfordert den matop Modus
PARSERFUNCS_LISTFUNC_FUNC_CYLTOPOL_[MAT_COORDS]=			cyltopol(mCoords)                                           MAT      - Konvertiert die zwei oder drei Spalten der Matrix mCoords von zylindrischen (rho,phi,z) zu polaren Koordinaten (rho,phi,theta). Erfordert den matop Modus
PARSERFUNCS_LISTFUNC_FUNC_DATE_[TIME]=						date(nTimeVal,nType)                                        VAL      - Formatiert nTimeVal gemäß nType:%%ITEMIZE%%nType = 0: YYYYMMDDhhmmss%%ITEMIZE%%nType = 1: YYYY%%ITEMIZE%%nType = 2: MM%%ITEMIZE%%nType = 3: DD%%ITEMIZE%%nType = 4: hh%%ITEMIZE%%nType = 5: mm%%ITEMIZE%%nType = 6: ss%%ITEMIZE%%nType = -1: YYYYMMDD%%ITEMIZE%%nType = -2: hhmmss%%ITEMIZE_END%%Die Zeit ist stets in UTC
PARSERFUNCS_LISTFUNC_FUNC_DBLFACT_[NUM]=					dblfact(n)                                                  VAL      - Doppelfakultät der natürlichen Zahl n [n!! = n*(n-2)*(n-4)*...]. %%DEFINED_NATURAL%% >= 0
PARSERFUNCS_LISTFUNC_FUNC_DECTOBASE_[STRING]=				dectobase(sBase,nDecVal)                                    STR      - Konvertiert die Zahl nDecVal aus dem Dezimalsystem in die Basis und gibt das Ergebnis als Zeichenkette zurück. Als Werte für die Basis sBase existieren: %%ITEMIZE%%"hex": hexadezimal %%ITEMIZE%%"oct": Oktal %%ITEMIZE%%"bin": binär
PARSERFUNCS_LISTFUNC_FUNC_DEGREE_[ANGULAR]=					degree(x)                                                   VAL      - Gradwert von x [rad]. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_DET_[MAT]=						det(mSqMat)                                                 VAL      - Berechnet die Determinante der Matrix mSqMat, falls die Matrix quadratisch ist.
PARSERFUNCS_LISTFUNC_FUNC_DIAGONALIZE_[MAT]=				diagonalize(mSqMat)                                         MAT      - Diagonalisiert die quadratische Matrix mSqMat, wobei die Eigenwerte komplex sein können
PARSERFUNCS_LISTFUNC_FUNC_DIAG_[MAT]=						diag(x,y,z,...)                                             MAT      - Erzeugt eine Diagonalmatrix mit den Elementen x,y,z,... auf der Hauptdiagonalen.
PARSERFUNCS_LISTFUNC_FUNC_DROP_[DRAW]=						drop(P,D,s,a,sStyle="")                                     {}       - Zeichnet einen dreidimensionalen Tropfen am Punkt P, der in die Richtung D geneigt ist. Die optionalen Parameter s und a können verwendet werden, um die Form des Tropfens zu verändern. Die Farbe kann mittels sStyle geändert werden und die Plotoption light macht den 3D-Effekt sichtbar.
PARSERFUNCS_LISTFUNC_FUNC_EIGENVALS_[MAT]=					eigenvals(mSqMat)                                           MAT      - Berechnet die Eigenwerte der quadratischen Matrix mSqMat und gibt diese in Form eines Vektors zurück. Die Eigenwerte können auch bei reellen Matrizen komplex sein
PARSERFUNCS_LISTFUNC_FUNC_EIGENVECTS_[MAT]=					eigenvects(mSqMat)                                          MAT      - Berechnet die Eigenvektoren der quadratischen Matrix mSqMat und gibt diese in Form einer Matrix mit den Eigenvektoren als Spalten zurück. Die Eigenvektoren können auch bei reellen Matrizen komplex sein
PARSERFUNCS_LISTFUNC_FUNC_ELLIPSEV_[DRAW]=					ellipsev(P,D,r,sStyle="")                                   {}       - Generiert eine Ellipse mit den Brennpunkten P und P+D und dem Ellipsenradius r. Die Füllung und der Stil kann durch sStyle geändert werden.
PARSERFUNCS_LISTFUNC_FUNC_ELLIPSE_[DRAW]=					ellipse(P,P,r,sStyle="")                                    {}       - Generiert eine Ellipse mit den Brennpunkten P und P und dem Ellipsenradius r. Die Füllung und der Stil kann durch sStyle geändert werden.
PARSERFUNCS_LISTFUNC_FUNC_ELLIPTICD_[NUM]=					ellipticD(x,k)                                              VAL      - Wert des elliptischen Integrals D(x,k) an der Stelle x mit 0 <= k < 1. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_ELLIPTICE_[NUM]=					ellipticE(x,k)                                              VAL      - Wert des elliptischen Integrals E(x,k) an der Stelle x mit 0 <= k < 1. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_ELLIPTICF_[NUM]=					ellipticF(x,k)                                              VAL      - Wert des elliptischen Integrals F(x,k) an der Stelle x mit 0 <= k < 1. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_ELLIPTICPI_[NUM]=					ellipticPi(x,n,k)                                           VAL      - Wert des elliptischen Integrals Pi(x,n,k) an der Stelle x mit 0 <= k < 1. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_ENDSWITH_[STRING]=				endswith(sStr,sEnd)                                         LOG      - Gibt true zurück, wenn der string sStr mit sEnd endet. Sonst, false.
PARSERFUNCS_LISTFUNC_FUNC_ERFC_[DISTRIB]=					erfc(x)                                                     VAL      - Wert der komplementären gauß'schen Fehlerfunktion (erfc(x) := 1-erf(x)) an der Stelle x. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_ERF_[DISTRIB]=					erf(x)                                                      VAL      - Wert der gauß'schen Fehlerfunktion an der Stelle x. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_EVT_CHANGESTATE_[GUI]=			evt_changestate(nId,sState)                                 {}       - GUI-Event-Handler: Ändert den Status des Elements mit der ID nId in den neuen Status sState. GUI-Event-Handler können nur direkt in einem Layout-Script verwendet werden und die Argumente müssen Literale (also keine Variablen) sein
PARSERFUNCS_LISTFUNC_FUNC_EVT_CLOSE_[GUI]=					evt_close()                                                 {}       - GUI-Event-Handler: Schließt das aktuelle Fenster. GUI-Event-Handler können nur direkt in einem Layout-Script verwendet werden
PARSERFUNCS_LISTFUNC_FUNC_EVT_COPYVALUES_[GUI]=				evt_copyvalues(nFromId,nToId1,...)                          {}       - GUI-Event-Handler: Kopiert die Werte des Elements mit der ID nFromId in die Elemente mit den IDs nToId1, ... . GUI-Event-Handler können nur direkt in einem Layout-Script verwendet werden und die Argumente müssen Literale (also keine Variablen) sein
PARSERFUNCS_LISTFUNC_FUNC_EVT_ENDDIALOG_[GUI]=				evt_enddialog(sReturnValue)                                 {}       - GUI-Event-Handler: Beendet den Dialog-Modus des aktuellen Fensters mit sReturnValue als Rückgabewert. Falls das aktuelle Fenster nicht im Dialog-Modus ist, wird es stattdessen geschlossen. GUI-Event-Handler können nur direkt in einem Layout-Script verwendet werden und die Argumente müssen Literale (also keine Variablen) sein
PARSERFUNCS_LISTFUNC_FUNC_EVT_SENDVALTOITEM_[GUI]=			evt_sendvaltoitem(nToId1,...)                               {}       - GUI-Event-Handler: Kopiert die Werte des Event-auslösenden Elements in die Elemente mit den IDs nToId1, ... . GUI-Event-Handler können nur direkt in einem Layout-Script verwendet werden und die Argumente müssen Literale (also keine Variablen) sein
PARSERFUNCS_LISTFUNC_FUNC_EXP_[NUM_LOGARITHMIC]=			exp(x)                                                      VAL      - Exponentialfunktion von x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_FACEV_[DRAW]=						facev(P,D,D,D,sStyle="")                                    {}       - Zeichnet ein Viereck. Dabei können zwei bis vier Ecken angegeben werden. Bei zwei Ecken zeichnet NumeRe ein Quadrat, bei drei Ecken ein Parallelogramm und bei allen vier Ecken ein allgemeines Viereck. Die ersten beiden Richtungsvektoren sind die untere und linke Kante und der letzte die Diagonale. Die Füllung des Vierecks kann mit sStyle beeinflusst werden.
PARSERFUNCS_LISTFUNC_FUNC_FACE_[DRAW]=						face(P,P,P,P,sStyle="")                                     {}       - Zeichnet ein Viereck. Dabei können zwei bis vier Ecken angegeben werden. Bei zwei Ecken zeichnet NumeRe ein Quadrat, bei drei Ecken ein Parallelogramm und bei allen vier Ecken ein allgemeines Viereck. Die Ecken sind dabei von unten links an entgegen des Uhrzeigersinns numeriert. Die Füllung des Vierecks kann mit sStyle beeinflusst werden.
PARSERFUNCS_LISTFUNC_FUNC_FACTORIAL_[NUM]=					factorial(n)                                                VAL      - Fakultät der natürlichen Zahl n [n! = n*(n-1)*(n-2)*...*1]. %%DEFINED_NATURAL%% >= 0
PARSERFUNCS_LISTFUNC_FUNC_FILTER_[MAT]=						filter(mMat,mKernel,nMode)                                  MAT      - Wendet den Filter-Kernel mKernel auf die Matrix mMat an. nMode legt das Verhalten am Rand der Matrix fest.%%ITEMIZE%%nMode = 0: Werte werden konstant fortgesetzt (boundary clamp)%%ITEMIZE%%nMode = 1: Werte werden am Rand reflektiert fortgesetzt (boundary reflection)
PARSERFUNCS_LISTFUNC_FUNC_FINDCOLUMN_[STRING]=				findcolumn(sTable,sHeadline)                               {VAL}     - Gibt die Indices aller Spalten in der Tabelle in sTable (als Zeichenkette, z.B. durch TABLE().name) zurück, deren Spaltenüberschriften mit sHeadline übereinstimmen
PARSERFUNCS_LISTFUNC_FUNC_FINDFILE_[STRING_LOGIC]=			findfile(sFile,sPath="<>")                                  LOG      - Gibt true zurück, wenn die Datei sFile existiert, sonst false. Die Datei muss in Form einer Zeichenkette angegeben werden. sPath ist ein optionaler Standardsuchpfad, der standardmäßig auf den NumeRe-Stammordner weist
PARSERFUNCS_LISTFUNC_FUNC_FINDPARAM_[STRING]=				findparam(sPar,sLine,cFollowing="")                         VAL      - Gibt die Position zurück, an der der Parameter sPar in der Zeichenkette sLine enthalten ist, und 0, falls er nicht gefunden werden kann. Falls sPar von einem speziellen Zeichen gefolgt werden soll (z.B. '='), kann dies für cFollowing angegeben werden, anderenfalls kann cFollowing weggelassen werden. Wenn cFollowing angegeben wird, wird die Position um die Anzahl an Leerzeichen zwischen sPar und cFollowing nach rechts verschoben zurückgegeben.
PARSERFUNCS_LISTFUNC_FUNC_FINDTOKEN_[STRING]=				findtoken(sString,sToken,sSep=" \t")                        VAL      - Gibt die Position zurück, an der der Token sToken in sString gefunden wurde, und 0, falls er nicht gefunden werden kann. sSep ist eine optionale Zeichenkette, die die Trennzeichen definiert. Diese sind standardmäßig das Leerzeichen und der Tabulator.
PARSERFUNCS_LISTFUNC_FUNC_FIRSTCH_[STRING]=					firstch(sStr)                                               STR      - Gibt das erste Zeichen in der Zeichenkette sStr zurück
PARSERFUNCS_LISTFUNC_FUNC_FISHER_F_CDF_P_[DISTRIB]= 		fisher_f_cdf_p(x,nNu1,nNu2)                                 VAL      - Liefert die kumulative Verteilungsfunktion bei x der Fisher's F-Verteilung mit nNu1 und nNu2 Freiheitsgraden
PARSERFUNCS_LISTFUNC_FUNC_FISHER_F_CDF_Q_[DISTRIB]= 		fisher_f_cdf_q(x,nNu1,nNu2)                                 VAL      - Liefert die komplementäre kumulative Verteilungsfunktion bei x der Fisher's F-Verteilung mit nNu1 und nNu2 Freiheitsgraden
PARSERFUNCS_LISTFUNC_FUNC_FISHER_F_INV_P_[DISTRIB]= 		fisher_f_inv_p(p,nNu1,nNu2)                                 VAL      - Liefert die Umkehrung der kumulativen Verteilungsfunktion bei p der F-Verteilung nach Fisher mit den Freiheitsgraden nNu1 und nNu2
PARSERFUNCS_LISTFUNC_FUNC_FISHER_F_INV_Q_[DISTRIB]= 		fisher_f_inv_q(q,nNu1,nNu2)                                 VAL      - Liefert die Umkehrung der komplementären kumulativen Verteilungsfunktion bei q der F-Verteilung nach Fisher mit den Freiheitsgraden nNu1 und nNu2
PARSERFUNCS_LISTFUNC_FUNC_FISHER_F_PDF_[DISTRIB]= 			fisher_f_pdf(x,nNu1,nNu2)                                   VAL      - Liefert die Dichte der Verteilungsfunktion bei x der Fisher's F-Verteilung mit nNu1 und nNu2 Freiheitsgraden
PARSERFUNCS_LISTFUNC_FUNC_FISHER_F_RD_[RANDOM_DISTRIB]= 	fisher_f_rd(nNu1,nNu2)                                      VAL      - Liefert eine Zufallszahl aus der Fisher's F-Verteilung mit nNu1 und nNu2 Freiheitsgraden
PARSERFUNCS_LISTFUNC_FUNC_FLOOR_[NUM]=						floor(x)                                                    VAL      - Rundet x stets auf die nächsttiefere Ganzzahl ab. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_GAMMA_[NUM_DISTRIB]=				gamma(x)                                                    VAL      - Wert der Gamma-Funktion an der Stelle x. %%DEFINED_FOR_ALL_C_RANGE_R%% R \ {-n, 0}, wobei n eine natürliche Zahl ist
PARSERFUNCS_LISTFUNC_FUNC_GAUSS_[NUM_RANDOM_DISTRIB]=		gauss(x0,fSigma)                                            VAL      - Generiert eine (reelle und normalverteilte) Zufallszahl, wobei x0 der Mittelwert und fSigma die Halbwertsbreite der Verteilung sind
PARSERFUNCS_LISTFUNC_FUNC_GCD_[NUM]=						gcd(n,k)                                                    VAL      - Berechnet den größten gemeinsamen Teiler der Ganzzahlen n und k
PARSERFUNCS_LISTFUNC_FUNC_GETENVVAR_[STRING]=				getenvvar(sVarName)                                         STR      - Gibt den Wert der Umgebungsvariablen sVarName zurück oder einen leeren String, falls die entsprechende Variable nicht existiert
PARSERFUNCS_LISTFUNC_FUNC_GETFILEDIFF_[STRING]=				getfilediff(sFilePath1,sFilePath2)                         {STR}     - Berechnet die zeilenweisen Unterschiede der beiden Dateien unter sFilePath1 und sFilePath2 und gibt diese als Unified Diff zurück
PARSERFUNCS_LISTFUNC_FUNC_GETFILEINFO_[STRING]=				getfileinfo(sFilePath)                                     {STR}     - Gibt Meta-Informationen zu der angegebenen Datei in sFilePath als eine Schlüssel-Wert-Liste zurück. Enthalten sind die Werte von getfileparts(), sowie die Dateigröße in Bytes, Attribute und die Zeitstempel für Erstellung und letzte Modifikation der Datei
PARSERFUNCS_LISTFUNC_FUNC_GETFILELIST_[STRING]=				getfilelist(sScheme,asPath=false)                          {STR}     - Gibt eine Liste aller Dateien, auf die das Namensschema sScheme zutrifft, als Zeichenketten zurück. sScheme kann%%ITEMIZE%%zusätzliche Platzhalter (? oder *)%%ITEMIZE%%mit "|" verknüpfte Auswahlbausteine ("<EIN|BAUSTEIN>")%%ITEMIZE_END%%enthalten. Es wird nur der Name inkl. Endung und nicht der gesamte Pfad zurückgegeben. asPath ist ein optionaler Parameter und gibt mit asPath = true die entsprechenden Pfade mit zurück
PARSERFUNCS_LISTFUNC_FUNC_GETFILEPARTS_[STRING]=			getfileparts(sFilePath)                                    {STR}     - Splittet sFilePath in Laufwerksbuchstaben, Dateipfad, Dateiname und Dateierweiterung auf. Wenn der Pfad ein Netzwerkpfad ist, so ist der Laufwerksbuchstabe leer. Ist es ein Dateiordner und keine Datei, so ist der Name und die Dateierweiterung leer
PARSERFUNCS_LISTFUNC_FUNC_GETFOLDERLIST_[STRING]=			getfolderlist(sScheme,asPath=false)                        {STR}     - Gibt eine Liste aller Ordner, auf die das Namensschema sScheme zutrifft, als Zeichenketten zurück. sScheme kann%%ITEMIZE%%zusätzliche Platzhalter (? oder *)%%ITEMIZE%%mit "|" verknüpfte Auswahlbausteine ("<EIN|BAUSTEIN>")%%ITEMIZE_END%%enthalten. Es wird nur der Name des Ordners und nicht der gesamte Pfad zurückgegeben. asPath ist ein optionaler Parameter und gibt mit asPath = true die entsprechenden Pfade mit zurück
PARSERFUNCS_LISTFUNC_FUNC_GETINDICES_[STRING]=				getindices(sTable,nMode=0)                                 {VAL}     - Gibt die Indices eines in Form einer Zeichenkette übergebenen Datenobjektzugriffs in Form I1,I2,J1,J2 zurück. nMode ist ein optionaler Parameter und bestimmt die Interpretation der Indizes:%%ITEMIZE%%nMode = 0: als Matrix%%ITEMIZE%%nMode = 1: spaltenweise%%ITEMIZE%%nMode = 2: zeilenweise%%ITEMIZE%%nMode = -1: unmodifizerte Indices%%ITEMIZE_END%%Bsp.: getindices("data(5:,3)",-1) = 5,-1,3,0
PARSERFUNCS_LISTFUNC_FUNC_GETKEYVAL_[STRING]=				getkeyval({sKeyVals},sKey,sDef="",strict=false)             ARG      - Gibt den Wert zum zugehörigen Schlüssel sKey aus der Schlüssel-Wert-Liste sKeyVals zurück. sDef beschreibt den Standardwert, wenn der Schlüssel nicht gefunden wurde. Ist strict true, dann wird eine Warnung ausgegeben, wenn der Schlüssel nicht gefunden wurde. strict ist standardmäßig false und optional
PARSERFUNCS_LISTFUNC_FUNC_GETLASTERROR_[STRING]=			getlasterror()                                             {STR}     - Gibt den letzten von einem try-catch-Block verarbeiteten Fehler in der Form {TYP, NACHRICHT} zurück, wobei TYP stets einem der bekannten Fehlertypen von try-catch als Zeichenkette entspricht
PARSERFUNCS_LISTFUNC_FUNC_GETMATCHINGPARENS_[STRING]=		getmatchingparens(sLine)                                    VAL      - Gibt die Position der passenden schließenden Klammer in sLine zurück. Wenn das erste Zeichen keine Klammer ist, wird die passende Klammer zur als erstes gefundenen bestimmt
PARSERFUNCS_LISTFUNC_FUNC_GETOMPTHREADS_[NUM]=				getompthreads()                                             VAL      - Gibt die Zahl der maximal möglichen OpenMP-Threads zurück. Das entspricht im Allgemeinen der Zahl der logischen CPU-Kerne.
PARSERFUNCS_LISTFUNC_FUNC_GETOPT_[STRING]=					getopt(sLine,nPos)                                          STR      - Gibt den Wert eines Parameters in der Zeichenkette sLine, dessen Wert an der Stelle nPos beginnt (z.B. nach "="), als Zeichenkette zurück. Leerzeichen zwischen nPos und der tatsächlichen Position des Werts werden ignoriert.
PARSERFUNCS_LISTFUNC_FUNC_GETUILANG_[STRING]=				getuilang()                                                 STR      - Gibt Informationen zur Benutzersprache zurück
PARSERFUNCS_LISTFUNC_FUNC_GETVERSIONINFO_[STRING_TIME]=		getversioninfo()                                           {STR}     - Gibt Informationen zur aktuellen NumeRe-Version als Schlüssel-Wert-Liste zurück. Die Informationen umfassen den Versionsnamen, das Build-Datum, die vollständige Versionsnummer, die Version als Dateibezeichner (z.B. für den Installer) und die Architektur (32 bit bzw. 64 bit)
PARSERFUNCS_LISTFUNC_FUNC_HCAT_[MAT]=						hcat(mLeft,mRight)                                          MAT      - Verkettet die zwei Matrizen horizontal. Es werden also die Spalten der zweiten Matrix an die Spalten der ersten Matrix angefügt. Diese Operation setzt voraus, dass beide Matrizen die gleiche Zeilenzahl haben, da ansonsten die Operation nicht durchführbar ist.
PARSERFUNCS_LISTFUNC_FUNC_HEAVISIDE_[NUM_DISTRIB]=			heaviside(x)                                                VAL      - Heaviside-(Theta)-Funktion. 0 für x < 0, 1 sonst. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_HERMITE_[NUM_POLYNOMIAL]=			hermite(n,x)                                                VAL      - numerischer Wert der Hermite-Polynome der Ordnung n >= 0 an der Stelle x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_IDENTITY_[MAT]=					identity(n)                                                 MAT      - Erzeugt eine n-dimensionale, quadratische Einheitsmatrix.
PARSERFUNCS_LISTFUNC_FUNC_IDXTOLOG_[LOGIC]=					idxtolog(x,y,z,...)                                        {VAL}     - Wandelt Indexwerte in einer Matrix in Logikwerte um. Wird ein Vektor übergeben, so gibt die Funktion ein Vektor zurück mit den true in den Zeilen, auf denen die Indices weisen. Wird eine Matrix mit zwei Spalten übergeben, dann gibt die Funktion eine Matrix zurück mit true als Elemente, auf welche die Zeilen- as der ersten und die Spaltenindices aus der zweiten Spalte weisen
PARSERFUNCS_LISTFUNC_FUNC_IMAG_[NUM_CMPLX]=					imag(z)                                                     VAL      - Gibt den Imaginärteil der übergebenen komplexen Zahl z zurück. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_IMY_[NUM_POLYNOMIAL]=				imY(l,m,fTheta,fPhi)                                        VAL      - [Veraltet] Imaginärteil der Kugelflächenfunktionen der Ordnung l >= 0 mit m = [-l,l] unter den Winkeln fTheta im Intervall [0,PI] und fPhi im Intervall [0,2*PI)
PARSERFUNCS_LISTFUNC_FUNC_INTERPOLATE_[MAT_COORDS]=			interpolate(mVals,mGrid)                                    MAT      - Interpoliert Werte aus der Matrix mVals bilinear unter Verwendung der Zeilen- und Spaltenwerte der Matrix mGrid, bzw. interpoliert Werte des Vektors mVals linear aus den Indexwerten des Vektors mGrid. Die Zeilen- und Spalten- oder Indexwerte können Fließkommazahlen sein. Wenn die zweite Matrix mehr als zwei Spalten hat, wird die erste Spalte als Zeilen- und alle weiteren als Spaltenwerte interpretiert. Es wird dann eine Matrix mit der Größe (row x col) erzeugt. Erfordert den matop Modus
PARSERFUNCS_LISTFUNC_FUNC_INVERT_[MAT]=						invert(mSqMat)                                              MAT      - Invertiert die Matrix mSqMat, falls eine Inverse der Matrix existiert. invert() prüft auch, ob die Dimensionen der übergebenen Matrix übereinstimmen.
PARSERFUNCS_LISTFUNC_FUNC_IS_ALNUM_[STRING_LOGIC]=			is_alnum(sToParse)                                         {LOG}     - Bestimmt für jedes Zeichen in sToParse, ob es sich um ein alphanumerisches Zeichen handelt oder nicht
PARSERFUNCS_LISTFUNC_FUNC_IS_ALPHA_[STRING_LOGIC]=			is_alpha(sToParse)                                         {LOG}     - Bestimmt für jedes Zeichen in sToParse, ob es sich um ein alphabetisches Zeichen handelt oder nicht
PARSERFUNCS_LISTFUNC_FUNC_IS_BLANK_[STRING_LOGIC]=			is_blank(sToParse)                                         {LOG}     - Bestimmt für jedes Zeichen in sToParse, ob es sich um ein Zeichen ohne Glyphe handelt oder nicht
PARSERFUNCS_LISTFUNC_FUNC_IS_CLUSTER_[STRING_LOGIC]=		is_cluster(sObject)                                         LOG      - Gibt true zurück, wenn sObject ein Cluster ist, sonst false
PARSERFUNCS_LISTFUNC_FUNC_IS_CNTRL_[STRING_LOGIC]=			is_cntrl(sToParse)                                         {LOG}     - Bestimmt für jedes Zeichen in sToParse, ob es sich um ein Steuerungszeichen handelt oder nicht
PARSERFUNCS_LISTFUNC_FUNC_IS_DATA_[STRING_LOGIC]=			is_data(sObject)                                            LOG      - Gibt true zurück, wenn sObject ein Datenobjekt (eine Tabelle oder ein Cluster) ist, sonst false
PARSERFUNCS_LISTFUNC_FUNC_IS_DIGIT_[STRING_LOGIC]=			is_digit(sToParse)                                         {LOG}     - Bestimmt für jedes Zeichen in sToParse, ob es sich um ein numerisches Zeichen handelt oder nicht
PARSERFUNCS_LISTFUNC_FUNC_IS_DIRPATH_[STRING_LOGIC]=		is_dirpath(sPath)                                           LOG      - Gibt true zurück, wenn sPath ein valider Ordnerpfad ist, anderenfalls false
PARSERFUNCS_LISTFUNC_FUNC_IS_FILEPATH_[STRING_LOGIC]=		is_filepath(sPath)                                          LOG      - Gibt true zurück, wenn sPath ein valider Dateipfad ist, anderenfalls false
PARSERFUNCS_LISTFUNC_FUNC_IS_GRAPH_[STRING_LOGIC]=			is_graph(sToParse)                                         {LOG}     - Bestimmt für jedes Zeichen in sToParse, ob es sich um ein graphisches Zeichen handelt oder nicht
PARSERFUNCS_LISTFUNC_FUNC_IS_LOWER_[STRING_LOGIC]=			is_lower(sToParse)                                         {LOG}     - Bestimmt für jedes Zeichen in sToParse, ob es sich um ein Kleinbuchstaben handelt oder nicht
PARSERFUNCS_LISTFUNC_FUNC_IS_NAN_[LOGIC]=					is_nan(x)                                                   LOG      - Gibt true zurück, wenn x den Wert nan hat, sonst false
PARSERFUNCS_LISTFUNC_FUNC_IS_PRINT_[STRING_LOGIC]=			is_print(sToParse)                                         {LOG}     - Bestimmt für jedes Zeichen in sToParse, ob es sich um ein druckbares Zeichen handelt oder nicht
PARSERFUNCS_LISTFUNC_FUNC_IS_PUNCT_[STRING_LOGIC]=			is_punct(sToParse)                                         {LOG}     - Bestimmt für jedes Zeichen in sToParse, ob es sich um ein Interpunktionszeichen handelt oder nicht
PARSERFUNCS_LISTFUNC_FUNC_IS_SPACE_[STRING_LOGIC]=			is_space(sToParse)                                         {LOG}     - Bestimmt für jedes Zeichen in sToParse, ob es sich um ein Leerzeichen handelt oder nicht
PARSERFUNCS_LISTFUNC_FUNC_IS_STRING_[STRING_LOGIC]=			is_string(EXPR)                                             LOG      - Gibt true zurück, wenn EXPR Zeichenketten enthält, sonst false
PARSERFUNCS_LISTFUNC_FUNC_IS_TABLE_[STRING_LOGIC]=			is_table(sObject)                                           LOG      - Gibt true zurück, wenn sObject eine Tabelle ist, sonst false
PARSERFUNCS_LISTFUNC_FUNC_IS_UPPER_[STRING_LOGIC]=			is_upper(sToParse)                                         {LOG}     - Bestimmt für jedes Zeichen in sToParse, ob es sich um ein Großbuchstaben handelt oder nicht.
PARSERFUNCS_LISTFUNC_FUNC_IS_XDIGIT_[STRING_LOGIC]=			is_xdigit(sToParse)                                        {LOG}     - Bestimmt für jedes Zeichen in sToParse, ob es sich um ein Zeichen für das Hexadezimalsystem handelt oder nicht
PARSERFUNCS_LISTFUNC_FUNC_IVL_[NUM_DISTRIB]=				ivl(x,x0,x1,nLeft,nRight)                                   VAL      - Intervall-Funktion: definiert ein Interval von x0 bis x1 mit wählbaren Grenztypen nLeft und nRight:%%ITEMIZE%%nLeft/nRight = 0: ignoriert die Grenze%%ITEMIZE%%nLeft/nRight = 1: geschlossene Intervallgrenze%%ITEMIZE%%nLeft/nRight = 2: offene Intervalgrenze%%ITEMIZE_END%%Die Funktion gibt 0 für x außerhalb und 1 für x innerhalb des Intervalls zurück und kann damit multiplikativ mit einem Ausdruck verknüpft werden. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_JUSTIFY_[STRING]=					justify({sToJustify},nAlign=-1)                            {STR}     - Richtet die Zeichenketten in dem Zeichenkettenvektor sToJustify durch ein- oder beidseitiges Ergänzen von Leerzeichen entsprechend der Ausrichtung nAlign aus:%%ITEMIZE%%nAlign = -1: links ausgerichtet (standard)%%ITEMIZE%%nAlign = 0: zentriert%%ITEMIZE%%nAlign = 1: rechts ausgerichtet%%ITEMIZE_END%%Bereits vorhandene, umschließende Leerzeichen werden vor der Ausrichtung entfernt.
PARSERFUNCS_LISTFUNC_FUNC_LAGUERRE_A_[NUM_POLYNOMIAL]=		laguerre_a(n,k,x)                                           VAL      - numerischer Wert der assoziierten Laguerre-Polynome der Ordnung n >= 0 mit k = [0,n] an der Stelle x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_LAGUERRE_[NUM_POLYNOMIAL]=		laguerre(n,x)                                               VAL      - numerischer Wert der Laguerre-Polynome der Ordnung n >= 0 an der Stelle x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_LANDAU_PDF_[RANDOM_DISTRIB]= 		landau_pdf(x)                                               VAL      - Gibt den Wert der Dichte der Landau-Verteilung an der Stelle x zurück.
PARSERFUNCS_LISTFUNC_FUNC_LANDAU_RD_[RANDOM_DISTRIB]= 		landau_rd()                                                 VAL      - Gibt eine Zufallszahl der Landau-Verteilung zurück.
PARSERFUNCS_LISTFUNC_FUNC_LAPLACE_CDF_P_[DISTRIB]= 			laplace_cdf_p(x,fWidth)                                     VAL      - Gibt den Wert der kumulativen Verteilungsfunktion bei x für die Laplace-Verteilung mit der Breite fWidth zurück.
PARSERFUNCS_LISTFUNC_FUNC_LAPLACE_CDF_Q_[DISTRIB]= 			laplace_cdf_q(x,fWidth)                                     VAL      - Liefert den Wert der komplementären kumulativen Verteilungsfunktion an x für die Laplace-Verteilung mit der Breite fWidth.
PARSERFUNCS_LISTFUNC_FUNC_LAPLACE_INV_P_[DISTRIB]= 			laplace_inv_p(p,fWidth)                                     VAL      - Gibt den Wert der inversen kumulativen Verteilungsfunktion an p für die Laplace-Verteilung mit der Breite fWidth zurück.
PARSERFUNCS_LISTFUNC_FUNC_LAPLACE_INV_Q_[DISTRIB]= 			laplace_inv_q(q,fWidth)                                     VAL      - Gibt den inversen Wert der komplementären kumulativen Verteilungsfunktion in q für die Laplace-Verteilung mit der Breite fWidth zurück.
PARSERFUNCS_LISTFUNC_FUNC_LAPLACE_PDF_[DISTRIB]= 			laplace_pdf(x,fWidth)                                       VAL      - Gibt den Wert der Dichte der Verteilungsfunktion bei x für die Laplace-Verteilung mit der Breite fWidth zurück.
PARSERFUNCS_LISTFUNC_FUNC_LAPLACE_RD_[RANDOM_DISTRIB]= 		laplace_rd(fWidth)                                          VAL      - Liefert eine Zufallszahl aus der Laplace-Verteilung mit der Breite fWidth.
PARSERFUNCS_LISTFUNC_FUNC_LASTCH_[STRING]=					lastch(sStr)                                                STR      - Gibt das letzte Zeichen in der Zeichenkette sStr zurück
PARSERFUNCS_LISTFUNC_FUNC_LCM_[NUM]=						lcm(n,k)                                                    VAL      - berechnet das kleinste gemeinsame Vielfache der Ganzzahlen n und k
PARSERFUNCS_LISTFUNC_FUNC_LEGENDRE_A_[NUM_POLYNOMIAL]=		legendre_a(l,m,x)                                           VAL      - numerischer Wert der assoziierten Legendre-Polynome der Ordnung l >= 0 mit m = [-l,l] an der Stelle x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_LEGENDRE_[NUM_POLYNOMIAL]=		legendre(n,x)                                               VAL      - numerischer Wert der Legendre-Polynome der Ordnung n >= 0 an der Stelle x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_LI2_[NUM]=					    Li2(x)                                                      VAL      - Berechnet den Dilogarithmus von x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_LINEV_[DRAW]=						linev(P,D,sStyle="")                                        {}       - Zeichnet eine gerade Linie von P nach P+D. Falls nur ein Punkt angegeben wird, wird der fehlende Punkt in den Ursprung gelegt. Die Farbe, Form und die Enden der Linie können mittels sStyle beeinflusst werden.
PARSERFUNCS_LISTFUNC_FUNC_LINE_[DRAW]=						line(P,P,sStyle="")                                         {}       - Zeichnet eine gerade Linie von P nach P. Falls nur ein Punkt angegeben wird, wird der fehlende Punkt in den Ursprung gelegt. Die Farbe, Form und die Enden der Linie können mittels sStyle beeinflusst werden.
PARSERFUNCS_LISTFUNC_FUNC_LN_[NUM_LOGARITHMIC]=				ln(x)                                                       VAL      - natürlicher Logarithmus von x. %%DEFINED_FOR_ALL_C_RANGE_R%% (0,inf)
PARSERFUNCS_LISTFUNC_FUNC_LOCATE_[STRING]=					locate({sWhere},sToFind,nTolerance=0)                      {VAL}     - Gibt die Indices der Clusterkomponenten in sWhere zurück, in denen sToFind gemäß nTolerance gefunden werden kann:%%ITEMIZE%%nTolerance = 0: Es werden nur Komponenten gefunden, die mit sToFind komplett übereinstimmen%%ITEMIZE%%nTolerance = 1: Es werden umschließende Leerräume ignoriert%%ITEMIZE%%nTolerance = 2: Es werden die ersten nichtleeren Zeichen der einzelnen Komponenten verglichen%%ITEMIZE%%nTolerance = 3: Es werden die letzten nichtleeren Zeichen der einzelnen Komponenten verglichen%%ITEMIZE%%nTolerance = 4: sToFind kann nur ein Teil der Komponente sein%%ITEMIZE%%nTolerance = 5: Es werden die einzelnen Zeichen von sToFind in den Komponenten ähnlich zu strmatch() gesucht%%ITEMIZE_END%%Falls nichts gefunden wird, wird false zurückgegeben
PARSERFUNCS_LISTFUNC_FUNC_LOG10_[NUM_LOGARITHMIC]=			log10(x)                                                    VAL      - Logarithmus zur Basis 10 von x. Kann durch 'log(x)' abgekürzt werden. %%DEFINED_FOR_ALL_C_RANGE_R%% (0,inf)
PARSERFUNCS_LISTFUNC_FUNC_LOG2_[NUM_LOGARITHMIC]=			log2(x)                                                     VAL      - Logarithmus zur Basis 2 von x. %%DEFINED_FOR_ALL_C_RANGE_R%% (0,inf)
PARSERFUNCS_LISTFUNC_FUNC_LOGTOIDX_[LOGIC]=					logtoidx(x,y,z,...)                                        {VAL}     - Wandelt Logikwerte in einer Matrix in Indexwerte um. Wird ein Vektor übergeben, so gibt die Funktion ein Vektor zurück mit den Indices zu den Elementen, welche true sind. Wird eine Matrix übergeben, dann gibt die Funktion eine zweispaltige Matrix zurück, mit den Zeilen- in der ersten und den Spaltenindices in der zweiten Spalte
PARSERFUNCS_LISTFUNC_FUNC_LOG_B_[NUM_LOGARITHMIC]=			log_b(fBase,x)                                              VAL      - Logarithmus zur Basis fBase von x. %%DEFINED_FOR_ALL_C_RANGE_R%% (0,inf) und fBase in (0,inf)
PARSERFUNCS_LISTFUNC_FUNC_LOG_[NUM_LOGARITHMIC]=			log(x)                                                      VAL      - Logarithmus zur Basis 10 von x. Alias für 'log10(x)'. %%DEFINED_FOR_ALL_C_RANGE_R%% (0,inf)
PARSERFUNCS_LISTFUNC_FUNC_MATFCF_[MAT]=						matfcf({x},{y},{z},...)                                     MAT      - Erzeugt eine Matrix aus den Spalten {x},{y},{z},... Werden für die maximale Dimension nicht ausreichend Elemente vorgegeben, so werden die fehlenden aus den vorhandenen logisch ergänzt.
PARSERFUNCS_LISTFUNC_FUNC_MATFC_[MAT]=						matfc({x},{y},{z},...)                                      MAT      - Erzeugt eine Matrix aus den Spalten {x},{y},{z},... Werden für die maximale Dimension nicht ausreichend Elemente vorgegeben, so werden die fehlenden durch 0 ergänzt.
PARSERFUNCS_LISTFUNC_FUNC_MATFLF_[MAT]=						matflf({x},{y},{z},...)                                     MAT      - Erzeugt eine Matrix aus den Zeilen {x},{y},{z},... Werden für die maximale Dimension nicht ausreichend Elemente vorgegeben, so werden die fehlenden aus den vorhandenen logisch ergänzt.
PARSERFUNCS_LISTFUNC_FUNC_MATFL_[MAT]=						matfl({x},{y},{z},...)                                      MAT      - Erzeugt eine Matrix aus den Zeilen {x},{y},{z},... Werden für die maximale Dimension nicht ausreichend Elemente vorgegeben, so werden die fehlenden durch 0 ergänzt.
PARSERFUNCS_LISTFUNC_FUNC_MAXPOS_[STATS]=					maxpos(x,y,z,...)                                           VAL      - Index des Maximums aus x,y,z,... %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_MAX_[STATS]=						max(x,y,z,...)                                              ARG      - Maximum aus x,y,z,... %%DEFINED_REAL%%. Kann auch auf Zeichenketten angewendet werden (verwendet Zeichenkettenlogik)
PARSERFUNCS_LISTFUNC_FUNC_MED_[STATS]=						med(x,y,z,...)                                              VAL      - Median aus x,y,z,... %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_MINPOS_[STATS]=					minpos(x,y,z,...)                                           VAL      - Index des Minimums aus x,y,z,... %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_MIN_[STATS]=						min(x,y,z,...)                                              ARG      - Minimum aus x,y,z,... %%DEFINED_REAL%%. Kann auch auf Zeichenketten angewendet werden (verwendet Zeichenkettenlogik)
PARSERFUNCS_LISTFUNC_FUNC_MOVAVG_[MAT]=						movavg(mMat,n,m=n)                                          MAT      - Schiebt ein gleitendes, rechteckiges Fenster der Größe (2*n+1)*(2*m+1) über jeden Eintrag in der Matrix mMat. Die Matrix wird innerhalb des Fensters gemittelt, so dass für jeden Eintrag in mMat ein Eintrag in der Ergebnismatrix verfügbar ist. Der Parameter m ist optional und ist standardmäßig gleich n. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_MOVMAX_[MAT]=						movmax(mMat,n,m=n)                                          MAT      - Schiebt ein gleitendes, rechteckiges Fenster der Größe (2*n+1)*(2*m+1) über jeden Eintrag in der Matrix mMat. Innerhalb des Fensters wird das Maximum ermittelt, so dass für jeden Eintrag in mMat ein Eintrag in der Ergebnismatrix verfügbar ist. Der Parameter m ist optional und ist standardmäßig gleich n. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_MOVMED_[MAT]=						movmed(mMat,n,m=n)                                          MAT      - Schiebt ein gleitendes, rechteckiges Fenster der Größe (2*n+1)*(2*m+1) über jeden Eintrag in der Matrix mMat. Innerhalb des Fensters wird der Median ermittelt, so dass für jeden Eintrag in mMat ein Eintrag in der Ergebnismatrix verfügbar ist. Der Parameter m ist optional und ist standardmäßig gleich n. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_MOVMIN_[MAT]=						movmin(mMat,n,m=n)                                          MAT      - Schiebt ein gleitendes, rechteckiges Fenster der Größe (2*n+1)*(2*m+1) über jeden Eintrag in der Matrix mMat. Innerhalb des Fensters wird das Minimum ermittelt, so dass für jeden Eintrag in mMat ein Eintrag in der Ergebnismatrix verfügbar ist. Der Parameter m ist optional und ist standardmäßig gleich n. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_MOVNORM_[MAT]=					movnorm(mMat,n,m=n)                                         MAT      - Schiebt ein gleitendes, rechteckiges Fenster der Größe (2*n+1)*(2*m+1) über jeden Eintrag in der Matrix mMat. Innerhalb des Fensters wird die euklidsche Vektornorm der Matrix berechnet, so dass für jeden Eintrag in mMat ein Eintrag in der Ergebnismatrix verfügbar ist. Der Parameter m ist optional und ist standardmäßig gleich n. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_MOVNUM_[MAT]=						movnum(mMat,n,m=n)                                          MAT      - Schiebt ein gleitendes, rechteckiges Fenster der Größe (2*n+1)*(2*m+1) über jeden Eintrag in der Matrix mMat. Innerhalb des Fensters werden die gültigen Werte gezählt, so dass für jeden Eintrag in mMat ein Eintrag in der Ergebnismatrix verfügbar ist. Der Parameter m ist optional und ist standardmäßig gleich n. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_MOVPRD_[MAT]=						movprd(mMat,n,m=n)                                          MAT      - Schiebt ein gleitendes, rechteckiges Fenster der Größe (2*n+1)*(2*m+1) über jeden Eintrag in der Matrix mMat. Die Matrix wird innerhalb des Fensters multipliziert, so dass für jeden Eintrag in mMat ein Eintrag in der Ergebnismatrix verfügbar ist. Der Parameter m ist optional und ist standardmäßig gleich n. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_MOVSTD_[MAT]=						movstd(mMat,n,m=n)                                          MAT      - Schiebt ein gleitendes, rechteckiges Fenster der Größe (2*n+1)*(2*m+1) über jeden Eintrag in der Matrix mMat. Innerhalb des Fensters wird die Standardabweichung der Matrix berechnet, so dass für jeden Eintrag in mMat ein Eintrag in der Ergebnismatrix verfügbar ist. Der Parameter m ist optional und ist standardmäßig gleich n. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_MOVSUM_[MAT]=						movsum(mMat,n,m=n)                                          MAT      - Schiebt ein gleitendes, rechteckiges Fenster der Größe (2*n+1)*(2*m+1) über jeden Eintrag in der Matrix mMat. Die Matrix wird innerhalb des Fensters summiert, so dass für jeden Eintrag in mMat ein Eintrag in der Ergebnismatrix verfügbar ist. Der Parameter m ist optional und ist standardmäßig gleich n. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_NEUMANN_[NUM_PHYSICS]=			neumann(n,x)                                                VAL      - Neumannfunktion (Besselfunktion zweiter Gattung) der Ordnung n am Ort x. %%DEFINED_REAL%% R \ {0}
PARSERFUNCS_LISTFUNC_FUNC_NORMALIZE_[MAT]=					normalize(mMat)                                             MAT      - Normiert die Werte der Matrix mMat auf den Bereich [-1,1] (die Matrix wird durch ihren absolutes Maximum dividiert)
PARSERFUNCS_LISTFUNC_FUNC_NORM_[NUM_STATS_COORDS]=			norm(x,y,z,...)                                             VAL      - Berechnet die Norm des Vektors: ||(x,y,z,...)|| := sqrt(x^2+y^2+z^2+...). %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_NUM_[STATS]=						num(x,y,z,...)                                              VAL      - Zahl der gültigen Argumente x,y,z,... Kann auch auf Zeichenketten angewendet werden und zählt jede nicht-leere Zeichenkette
PARSERFUNCS_LISTFUNC_FUNC_ONE_[MAT]=						one(n,m=n)                                                  MAT      - Erzeugt eine n x m-Matrix, die mit Einsen gefüllt ist. Wenn nur ein Argument angegeben wird, wird eine symmetrische Matrix erzeugt.
PARSERFUNCS_LISTFUNC_FUNC_OR_[LOGIC]=						or(x,y,z,...)                                               LOG      - Verknüpft die Argumente mit einem "||"-Operator
PARSERFUNCS_LISTFUNC_FUNC_PCT_[STATS]=						pct(x,y,z,...,p)                                            VAL      - p-tes Perzentil aus x,y,z,... %%DEFINED_REAL%% und 0 < p < 1
PARSERFUNCS_LISTFUNC_FUNC_PERLIN_[NUM_RANDOM_DISTRIB]=		perlin(x,y=0,z=0,fSeed=0,fFreq=1,fOct=6,fPers=0.5)          VAL      - Berechnet den köhärenten Perlin-Noise an der Stelle {x,y=0,z=0} mit%%ITEMIZE%%einem Random fSeed=0%%ITEMIZE%%der Frequenz fFreq=1 [1..16]%%ITEMIZE%%der Zahl der Oktaven fOct=6 [1..6]%%ITEMIZE%%einer Persistenz von fPers=0.5 [0..1].%%ITEMIZE_END%%Wenn weniger als alle 7 Argumente angegeben werden, werden die angegebenen Standardwerte verwendet. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_PHI_[ANGULAR_COORDS]=				phi(x,y)                                                    VAL      - Berechnet den Winkel zwischen der x-Achse und dem Vektor (x,y). %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_POINT_[DRAW]=						point(P,sStyle="")                                          {}       - Zeichnet einen Punkt an die Stelle P. Die Form des Punktes und seine Farbe kann mittels sStyle beeinflusst werden.
PARSERFUNCS_LISTFUNC_FUNC_POLTOCART_[MAT_COORDS]=			poltocart(mCoords)                                          MAT      - Konvertiert die zwei oder drei Spalten der Matrix mCoords von polaren (rho,phi,theta) zu kartesischen Koordinaten (x,y,z). Erfordert den matop Modus
PARSERFUNCS_LISTFUNC_FUNC_POLTOCYL_[MAT_COORDS]=			poltocyl(mCoords)                                           MAT      - Konvertiert die zwei oder drei Spalten der Matrix mCoords von polaren (rho,phi,theta) zu zylindrischen Koordinaten (rho,phi,z). Erfordert den matop Modus
PARSERFUNCS_LISTFUNC_FUNC_POLYGONV_[DRAW]=					polygonv(P,D,n,sStyle="")                                   {}       - Zeichnet ein regelmäßiges n-Eck um den Punkt P vom Punkt P+D an. Die Füllung und der Stil des n-Ecks kann mittels sStyle geändert werden.
PARSERFUNCS_LISTFUNC_FUNC_POLYGON_[DRAW]=					polygon(P,P,n,sStyle="")                                    {}       - Zeichnet ein regelmäßiges n-Eck um den Punkt P vom Punkt P an. Die Füllung und der Stil des n-Ecks kann mittels sStyle geändert werden.
PARSERFUNCS_LISTFUNC_FUNC_POLYLENGTH_[MAT]=					polylength(mPoly)                                           VAL      - Berechnet die Länge des Polygonzuges, der durch die Zeilen der Matrix mPoly definiert wird, wobei jede Zeile einen Vertex und jede Spalte eine 2 bis n-D Vektorkomponente repräsentiert. Der Polygonzug wird als offen angenommen. Um den Umfang eines geschlossenen Polygons zu berechnen, muss der erste Vertex in die letzte Zeile dupliziert werden. Erfordert den matop Modus
PARSERFUNCS_LISTFUNC_FUNC_POLYNOMIAL_[NUM_POLYNOMIAL]=		polynomial(x,a0,a1,a2,...)                                  VAL      - Berechnet den Wert des Polynoms a0+a1*x+a2*x^2+... an der Stelle x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_PRD_[NUM_STATS]=					prd(x,y,z,...)                                              VAL      - Produkt der Argumente x,y,z,... %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_PSI_N_[NUM]=					    psi_n(n,x)                                                  VAL      - Berechnet den Wert der Polygammafunktion der Ordnung n >= 0 and der Stelle x. %%DEFINED_REAL%% x > 0
PARSERFUNCS_LISTFUNC_FUNC_PSI_[NUM]=					    psi(x)                                                      VAL      - Berechnet den Wert der Digammafunktion an der Stelle x. %%DEFINED_REAL%% R \ {0}
PARSERFUNCS_LISTFUNC_FUNC_RADIAN_[ANGULAR]=					radian(fAlpha)                                              VAL      - Bogenmaßwert von Winkel fAlpha [Grad]. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_RAND_[NUM_RANDOM_DISTRIB]=		rand(x0,x1)                                                 VAL      - Generiert eine (reelle und gleichverteilte) Zufallszahl im Intervall [x0,x1). %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_RANGE_[NUM]=						range(x,fLeft,fRight)                                       VAL      - Schränkt x auf das Intervall [fLeft,fRight] ein. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_RAYLEIGH_CDF_P_[DISTRIB]= 		rayleigh_cdf_p(x,fSigma)                                    VAL      - Gibt den Wert der kumulativen Verteilungsfunktion bei x für die Rayleigh-Verteilung mit dem Skalenparameter fSigma zurück.
PARSERFUNCS_LISTFUNC_FUNC_RAYLEIGH_CDF_Q_[DISTRIB]= 		rayleigh_cdf_q(x,fSigma)                                    VAL      - Gibt den komplementären Wert der kumulativen Verteilungsfunktion an x für die Rayleigh-Verteilung mit dem Skalenparameter fSigma zurück.
PARSERFUNCS_LISTFUNC_FUNC_RAYLEIGH_INV_P_[DISTRIB]= 		rayleigh_inv_p(p,fSigma)                                    VAL      - Gibt den Wert der inversen kumulativen Verteilungsfunktion an p für die Rayleigh-Verteilung mit dem Skalenparameter fSigma zurück.
PARSERFUNCS_LISTFUNC_FUNC_RAYLEIGH_INV_Q_[DISTRIB]= 		rayleigh_inv_q(q,fSigma)                                    VAL      - Gibt den Kehrwert der komplementären kumulativen Verteilungsfunktion bei q für die Rayleigh-Verteilung mit dem Skalenparameter fSigma zurück.
PARSERFUNCS_LISTFUNC_FUNC_RAYLEIGH_PDF_[DISTRIB]= 			rayleigh_pdf(x,fSigma)                                      VAL      - Gibt den Wert der Dichte der Verteilungsfunktion bei x für die Rayleigh-Verteilung mit dem Skalenparameter fSigma zurück.
PARSERFUNCS_LISTFUNC_FUNC_RAYLEIGH_RD_[RANDOM_DISTRIB]= 	rayleigh_rd(fSigma)                                         VAL      - Liefert eine Zufallszahl aus der Rayleigh-Verteilung mit dem Skalenparameter fSigma.
PARSERFUNCS_LISTFUNC_FUNC_REAL_[NUM_CMPLX]=					real(z)                                                     VAL      - Gibt den Realteil der übergebenen komplexen Zahl z zurück. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_RECT_[NUM_DISTRIB]=				rect(x,x0,x1)                                               VAL      - Rechteckfunktion: 1 für x in [x0,x1]; 0 sonst. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_REGEX_[STRING]=					regex(sRegEx,sStr,nPos=1,nLen=sStr.len)                    {VAL}     - Wendet den regulären Ausdruck sRegEx (ECMAScript-Syntax) auf die Zeichenkette sStr an und gibt die Position und Länge der ersten Übereinstimmung zurück. Die Variablen nPos und nLen sind optional und geben Startpunkt (nPos) und Länge (nLen) der zu untersuchenden Zeichenkette an
PARSERFUNCS_LISTFUNC_FUNC_REPEAT_[STRING]=					repeat(sStr,nTimes)                                         STR      - Gibt nTimes Kopien von sStr zurück
PARSERFUNCS_LISTFUNC_FUNC_REPLACEALL_[STRING]=				replaceall(sToRep,sToFind,sRep,nPos1=1,nPos2=sToRep.len)    STR      - Ersetzt alle Vorkommnisse der zweiten Zeichenkette sToFind in der ersten Zeichenkette sToRep mit der dritten Zeichenkette sRep. Die Variablen nPos1 und nPos2 sind optional und geben Anfangs- (nPos1) und Endpunkt (nPos2) der Ersetzung vor
PARSERFUNCS_LISTFUNC_FUNC_REPLACE_[STRING]=					replace(sToRep,nPos,nLetters,sRep)                          STR      - Ersetzt nLetters Zeichen ab der Stelle nPos in der Zeichenkette sToRep mit der Zeichenkette sRep
PARSERFUNCS_LISTFUNC_FUNC_REPMAT_[MAT]=						repmat(mMat,n,m)                                            MAT      - Wiederholt die Matrix mMat (n x m)-mal
PARSERFUNCS_LISTFUNC_FUNC_RESHAPE_[MAT]=					reshape(mMat,n,m)                                           MAT      - Formt die Matrix mMat zu einer (n x m)-Matrix um. Die Zahl der Elemente in der alten und der neuen Matrix muss dabei identisch sein. Die Umformung geschieht zeilenweise
PARSERFUNCS_LISTFUNC_FUNC_RESIZE_[MAT]=						resize(mMat,n,m)                                            MAT      - Ändert die Größe der Matrix mMat auf (n x m). Fehlende Zeilen und Spalten werden durch 0 ersetzt
PARSERFUNCS_LISTFUNC_FUNC_RINT_[NUM]=						rint(x)                                                     VAL      - x auf eine Ganzzahl runden. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_ROOF_[NUM]=						roof(x)                                                     VAL      - rundet x auf die nächsthöhere Ganzzahl auf. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_ROUND_[NUM]=						round(x,n)                                                  VAL      - rundet x auf n Nachkommastellen. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_SBESSEL_[NUM_POLYNOMIAL_PHYSICS]=	sbessel(n,x)                                                VAL      - sphärische Besselfunktion der Ordnung n. %%DEFINED_REAL%%
PARSERFUNCS_LISTFUNC_FUNC_SECH_[NUM_HYPERBOLIC]=			sech(x)                                                    	VAL      - Sekans Hyperbolicus von x. %%DEFINED_FOR_ALL_C_RANGE_R%% [1,inf]
PARSERFUNCS_LISTFUNC_FUNC_SEC_[NUM_TRIGONOMETRIC]=			sec(x)                                                     	VAL      - Sekans von x. %%DEFINED_FOR_ALL_C_RANGE_R%% [-1,1]
PARSERFUNCS_LISTFUNC_FUNC_SELECT_[MAT]=						select(mVals,mRows,mCols)                                   MAT      - Extrahiert Werte aus der Matrix mVals. Dabei werden die Zeilenindices aus der Matrix mRows und die Spaltenindices aus der Matrix mCols simultan entnommen. mRows und mCols müssen identische Dimensionen haben oder Skalare sein. Sind diese Vektoren, so gibt die Funktion auch einen Vektor zurück.
PARSERFUNCS_LISTFUNC_FUNC_SHA256_[STRING]=					sha256(sString,asFile=false)                                STR      - Berechnet die SHA-256 der übergebenen Zeichenkette sString oder interpretiert sString als Dateinamen (asFile=true) und berechnet die SHA-256 der korrespondierenden Datei. Das Ergebnis wird als hexadezimal formatierter Wert in Form einer Zeichenkette zurück gegeben.
PARSERFUNCS_LISTFUNC_FUNC_SHUFFLE_[MAT]=					shuffle(nSel,nVal=nSel)                                     MAT      - Gibt nSel zufällig ausgewählte und eindeutige Werte aus einem 1:nVal array zurück. nVal ist ein optionaler Wert und ist standardmäßig identisch zu nSel.
PARSERFUNCS_LISTFUNC_FUNC_SIGN_[NUM]=						sign(x)                                                     VAL      - Vorzeichen von x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_SINC_[NUM_TRIGONOMETRIC]=			sinc(x)                                                     VAL      - Sinus cardinalis von x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_SINH_[NUM_HYPERBOLIC]=			sinh(x)                                                     VAL      - Sinus Hyperbolicus von x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_SIN_[NUM_TRIGONOMETRIC]=			sin(x)                                                      VAL      - Sinus von x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_SIZE_[MAT]=						size(mMat)                                                  VEC      - Gibt die Zahl der Zeilen und Spalten der Matrix mMat als Vektor zurück
PARSERFUNCS_LISTFUNC_FUNC_SLEEP_[TIME]=						sleep(nMilliSeconds)                                        VAL      - Wartet die angegebenen nMilliSeconds und gibt diesen Wert anschließend zurück
PARSERFUNCS_LISTFUNC_FUNC_SNEUMANN_[NUM_POLYNOMIAL_PHYSICS]=sneumann(n,x)                                               VAL      - sphärische Neumannfunktion der Ordnung n. %%DEFINED_REAL%% R \ {0}
PARSERFUNCS_LISTFUNC_FUNC_SOLVE_[MAT]=						solve(mEqSys)                                               VEC      - Löst das Lineare Gleichungssystem, das durch die Matrix mEqSys beschrieben wird, mittels des Gauß-Algorithmus.
PARSERFUNCS_LISTFUNC_FUNC_SPHERE_[DRAW]=					sphere(P,r,sStyle="")                                       {}       - Zeichnet eine Kugel mit Radius r an den Koordinaten P. Die Farbe kann mittels sStyle beeinflusst werden. Die Plotoption light macht den 3D-Effekt sichtbar.
PARSERFUNCS_LISTFUNC_FUNC_SPLIT_[STRING]=					split(sToSplit,cSep,keepEmpty=false)                       {STR}     - Teilt die Zeichenkette sToSplit an den Zeichen cSep in einzelne Zeichenketten auf. Mit keepEmpty = true werden auch leere Zeichenketten zurückgegeben, anderenfalls werden sie unterdrückt
PARSERFUNCS_LISTFUNC_FUNC_SQRT_[NUM]=						sqrt(x)                                                     VAL      - Wurzel aus x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_STARTSWITH_[STRING]=				startswith(sStr,sStart)                                     LOG      - Gibt true zurück, wenn der string sStr mit sStart beginnt. Sonst, false.
PARSERFUNCS_LISTFUNC_FUNC_STD_[STATS]=						std(x,y,z,...)                                              VAL      - Standardabweichung von x,y,z,... %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_STRFNDALL_[STRING]=				strfndall(sToFind,sWhere,nPos1=1,nPos2=sWhere.len)         {VAL}     - Gibt alle Positionen, an denen sToFind in sWhere ab dem Zeichen nPos1 bis nPos2 auftritt, zurück. nPos1 und nPos2 sind optionale Startwerte für die erste und letzte Position und standardmäßig ist nPos1 = 1 und nPos2 = strlen(sWhere). Falls nichts gefunden wird, wird false zurückgegeben
PARSERFUNCS_LISTFUNC_FUNC_STRFND_[STRING]=					strfnd(sToFind,sWhere,nPos=1)                               VAL      - Gibt die Position des ersten Auftretens von sToFind in sWhere ab dem Zeichen nPos zurück. nPos ist ein optionaler Startwert für die erste Position und standardmäßig ist nPos = 1. Falls nichts gefunden wird, wird false zurückgegeben
PARSERFUNCS_LISTFUNC_FUNC_STRING_CAST_[STRING]=				string_cast(EXPR)                                           STR      - Wandelt EXPR ungeachtet möglicher Rechenoperationen oder Zeichenkettenausdrücke in eine Zeichenkette um (#(EXPR) würde zunächst den numerischen Wert von EXPR auswerten)
PARSERFUNCS_LISTFUNC_FUNC_STRIP_[STRING]=					strip(sStr,sPref,sSuff,stripAll=false)                      STR      - Entfernt den Präfix sPref und den Suffix sSuff von der Zeichenkette sStr, wenn sie nicht-leer sind. stripAll ist optional und entfernt ebenfalls sich wiederholende Prä- und Suffixes für stripAll = true.
PARSERFUNCS_LISTFUNC_FUNC_STRJOIN_[STRING]=					strjoin({sStrings},sSep="",keepEmpty=false)                 STR      - Verkettet die nicht-leeren Zeichenketten sStrings in eine gemeinsame Zeichenkette, wobei die optionale Zeichenkette sSep als Separator zwischen die nicht-leeren Zeichenketten aus sStrings eingefügt wird. Wird keepEmpty auf true gesetzt, werden auch Separatoren für leere Zeichenketten ergänzt
PARSERFUNCS_LISTFUNC_FUNC_STRLEN_[STRING]=					strlen(sStr)                                                VAL      - Gibt die Anzahl an Zeichen in der Zeichenkette sStr zurück
PARSERFUNCS_LISTFUNC_FUNC_STRMATCHALL_[STRING]=				strmatchall(sChars,sWhere,nPos1=1,nPos2=sWhere.len)        {VAL}     - Sucht die ersten Auftreten aller Zeichen aus sChars in der Zeichenkette sWhere ab dem Zeichen nPos1 bis nPos2. nPos1 und nPos2 sind optionale Startwerte für die erste und letzte Position und standardmäßig ist nPos1 = 1 und nPos2 = strlen(sWhere). Falls nichts gefunden wird, wird für jedes Zeichen 0 zurückgegeben
PARSERFUNCS_LISTFUNC_FUNC_STRMATCH_[STRING]=				strmatch(sChars,sWhere,nPos=1)                              VAL      - Sucht das erste Auftreten eines Zeichens aus sChars in der Zeichenkette sWhere ab dem Zeichen nPos. nPos ist ein optionaler Startwert für die erste Position und standardmäßig ist nPos = 1. Falls nichts gefunden wird, wird false zurückgegeben
PARSERFUNCS_LISTFUNC_FUNC_STRRFND_[STRING]=					strrfnd(sToFind,sWhere,nPos=sWhere.len)                     VAL      - Gibt die Position des letzten Auftretens von sToFind in sWhere bis zum Zeichen nPos zurück. nPos ist ein optionaler Startwert für letzte Position und standardmäßig ist nPos = strlen(sWhere). Falls nichts gefunden wird, wird false zurückgegeben
PARSERFUNCS_LISTFUNC_FUNC_STRRMATCH_[STRING]=				strrmatch(sChars,sWhere,nPos=sWhere.len)                    VAL      - Sucht das letzte Auftreten eines Zeichens aus sChars in der Zeichenkette sWhere bis zum Zeichen nPos. nPos ist ein optionaler Startwert für letzte Position und standardmäßig ist nPos = strlen(sWhere). Falls nichts gefunden wird, wird false zurückgegeben
PARSERFUNCS_LISTFUNC_FUNC_STRUNIQUE_[STRING]=				strunique({sStrings},nMode=0)                              {STR}     - Sortiert und gibt nur eindeutige Elemente aus den Zeichenketten sStrings zurück. nMode ist optional und ist standardmäßig 0:%%ITEMIZE%%nMode = 0: Es werden alle eindeutigen Zeichenketten aus sStrings zurückgegeben%%ITEMIZE%%nMode = 1: Es wird eine Vektorkomponente pro Zeichenkette in sStrings mit den jeweils eindeutigen Zeichen zurückgegeben (auch immer der Fall, wenn nur ein String übergeben wird)%%ITEMIZE_END%%
PARSERFUNCS_LISTFUNC_FUNC_STR_NOT_MATCH_[STRING]=			str_not_match(sChars,sWhere,nPos=1)                         VAL      - Sucht das erste Auftreten eines Zeichens in der Zeichenkette sWhere, das nicht in sChars auftritt, ab dem Zeichen nPos. nPos ist ein optionaler Startwert für die erste Position und standardmäßig ist nPos = 1. Falls nichts gefunden wird, wird false zurückgegeben
PARSERFUNCS_LISTFUNC_FUNC_STR_NOT_RMATCH_[STRING]=			str_not_rmatch(sChars,sWhere,nPos=sWhere.len)               VAL      - Sucht das letzte Auftreten eines Zeichens in der Zeichenkette sWhere, das nicht in sChars auftritt, bis zum Zeichen nPos. nPos ist ein optionaler Startwert für letzte Position und standardmäßig ist nPos = strlen(sWhere). Falls nichts gefunden wird, wird false zurückgegeben
PARSERFUNCS_LISTFUNC_FUNC_STUDENT_T_CDF_P_[DISTRIB]= 		student_t_cdf_p(x,nNu)                                      VAL      - Liefert die kumulative Verteilungsfunktion bei x der Student's t-Verteilung mit nNu Freiheitsgraden
PARSERFUNCS_LISTFUNC_FUNC_STUDENT_T_CDF_Q_[DISTRIB]= 		student_t_cdf_q(x,nNu)                                      VAL      - Liefert die komplementäre kumulative Verteilungsfunktion an x der Student's t-Verteilung mit nNu Freiheitsgraden
PARSERFUNCS_LISTFUNC_FUNC_STUDENT_T_INV_P_[DISTRIB]= 		student_t_inv_p(p,nNu)                                      VAL      - Gibt die Inverse der kumulativen Verteilungsfunktion an p der Student's t-Verteilung mit nNu Freiheitsgraden zurück
PARSERFUNCS_LISTFUNC_FUNC_STUDENT_T_INV_Q_[DISTRIB]= 		student_t_inv_q(q,nNu)                                      VAL      - Liefert die Umkehrung der komplementären kumulativen Verteilungsfunktion bei q der Student's t-Verteilung mit nNu Freiheitsgraden
PARSERFUNCS_LISTFUNC_FUNC_STUDENT_T_PDF_[DISTRIB]= 			student_t_pdf(x,nNu)                                        VAL      - Liefert die Dichte der Verteilungsfunktion bei x der Student's t-Verteilung mit nNu Freiheitsgraden
PARSERFUNCS_LISTFUNC_FUNC_STUDENT_T_RD_[RANDOM_DISTRIB]= 	student_t_rd(nNu)                                           VAL      - Liefert eine Zufallszahl aus der Student's t-Verteilung mit nNu Freiheitsgraden
PARSERFUNCS_LISTFUNC_FUNC_STUDENT_T_[DISTRIB_STATS]=		student_t(n,fConfidence)                                    VAL      - Berechnet den zweiseitigen Student-Faktor t für n Messungen mit dem Konfidenzintervall 0 < fConfidence < 1
PARSERFUNCS_LISTFUNC_FUNC_SUBSTR_[STRING]=					substr(sStr,nPos,nLen=sStr.len)                             STR      - Gibt nLen Zeichen ab dem nPos-ten Zeichen aus sStr als neue Zeichenkette zurück
PARSERFUNCS_LISTFUNC_FUNC_SUM_[NUM_STATS]=					sum(x,y,z,...)                                              ARG      - Summiert x,y,z,... %%DEFINED_FOR_ALL%%. Kann auch auf Zeichenketten angewendet werden (verkettet diese)
PARSERFUNCS_LISTFUNC_FUNC_TANH_[NUM_HYPERBOLIC]=			tanh(x)                                                     VAL      - Tangens Hyperbolicus von x. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_TAN_[NUM_TRIGONOMETRIC]=			tan(x)                                                      VAL      - Tangens von x. %%DEFINED_FOR_ALL_C_RANGE_R%% R \ {-n*PI/2, n*PI/2}. n ist eine natürliche Zahl > 0.
PARSERFUNCS_LISTFUNC_FUNC_TEXTPARSE_[STRING]=               textparse(sToParse,sPattern,nPos1=1,nPos2=sToParse.len)    {ARG}     - Zerlegt sToParse anhand des Schemas sPattern in einzelne Bausteine unterschiedlicher Variablentypen. Die Variablentypen werden durch die folgenden Identifizierer in der Zeichenkette sPattern vorgegeben:%%ITEMIZE%%%s: Zeichenkette%%ITEMIZE%%%f: Reell- oder komplexwertige Zahl%%ITEMIZE%%%t: Zeit-Datumswert in UTC (in den Formaten wie er auch von Tabellen akzeptiert wird)%%ITEMIZE%%%l: Logikwert%%ITEMIZE%%%L: LaTeX-Formatierter, numerischer Wert%%ITEMIZE%%%h: hexadezimaler Wert%%ITEMIZE%%%o: octaler Wert%%ITEMIZE%%%b: binärer Wert%%ITEMIZE%%%a: beliebiger Wert, wird ignoriert und dient zum Überspringen eines Teils des Textes%%ITEMIZE_END%%Beispiel für sPattern: "TIME=%t  MSG=%s  VAL=%f". Die Parameter nPos1 und nPos2 sind optional und geben Start- und Endpunkt an
PARSERFUNCS_LISTFUNC_FUNC_TEXT_[DRAW]=						text(P,P,sText,sStyle="")                                   {}       - Druckt den Text sText an der Stelle P. Die Ausrichtung, Größe und Farbe können mittels sStyle beeinflusst werden, wobei die Ausrichtung, Größe und die Gestalt durch : von der Farbe getrennt werden müssen.%%ITEMIZE%%Die Textfarben werden wie alle anderen Farben entsprechend "help colors" bestimmt%%ITEMIZE%%Die Ausrichtung wird durch "LRCTV" (Left-Right-Centered-Align_under-Align_center_vertical) vorgegeben%%ITEMIZE%%Die Gestalt ist definiert durch "ribwou" (roman-italic-bold-wired-overline-underline)%%ITEMIZE%%Die (absolute) Textgröße kann durch die Ziffern "1-9" definiert werden%%ITEMIZE%%Mit einem zusätzlichen "@" wird eine Box um den Text gezeichnet%%ITEMIZE_END%%Das optionale zweite Koordinatenpaar kann verwendet werden, wenn der Text nicht horizontal gedruckt werden soll.
PARSERFUNCS_LISTFUNC_FUNC_THETA_[ANGULAR_COORDS]=			theta(x,y,z)                                                VAL      - Berechnet den Winkel zwischen z-Achse und dem Vektor (x,y,z). %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_TIMEFORMAT_[TIME_STRING]=			timeformat(sFormat,tTimeVal)                                STR      - Formatiert die Zeit tTimeVal gemäß dem Schema sFormat. Wenn das Schema eine leere Zeichenkette ist, wird das interne Standardformat verwendet. Die Zeichen folgenden in sFormat werden gemäß ihrer Länge durch den entsprechenden Zeitwert ersetzt:%%ITEMIZE%%Y: Jahr%%ITEMIZE%%M: Monat%%ITEMIZE%%D: Tag (als Datumswert)%%ITEMIZE%%d: Tag (als Dauer)%%ITEMIZE%%H: Stunde (in UTC)%%ITEMIZE%%h: Stunde (in der aktuellen Zeitzone)%%ITEMIZE%%m: Minute%%ITEMIZE%%s: Sekunde%%ITEMIZE%%i: Millisekunde%%ITEMIZE%%u: Mikrosekunde%%ITEMIZE_END%%Beispiel: "YY-MM-DD HH:mm:ss"
PARSERFUNCS_LISTFUNC_FUNC_TIME_[TIME]=						time()                                                      VAL      - Gibt die Zeit in Sekunden seit dem 1.1.1970 in UTC zurück. Die Präzision ist microsekundengenau
PARSERFUNCS_LISTFUNC_FUNC_TO_ANSI_[STRING]=					to_ansi(sUtf8Enc)                                           STR      - Konvertiert die UTF-8 encodierte Zeichenkette sUtf8Enc in eine ANSI encodierte Zeichenkette. Für ANSI wird die CP1252-Variante verwendet
PARSERFUNCS_LISTFUNC_FUNC_TO_CHAR_[STRING]=					to_char(x,y,z,...)                                          STR      - Interpretiert x,y,z,... als ASCII-Zeichenwerte und gibt sie als gemeinsame Zeichenkette zurück
PARSERFUNCS_LISTFUNC_FUNC_TO_CMD_[STRING]=					to_cmd(sStr)                                                CMD      - Wandelt die enthaltene Zeichenkette sStr in einen Kommandoausdruck um
PARSERFUNCS_LISTFUNC_FUNC_TO_LOWERCASE_[STRING]=			to_lowercase(sUpper)                                        STR      - Wandelt die Großbuchstaben in sUpper in Kleinbuchstaben um
PARSERFUNCS_LISTFUNC_FUNC_TO_POLAR_[NUM_CMPLX]=				to_polar(z)                                                 VAL      - Wandelt eine kartesische Darstellung (re+i*im) in die Polardarstellung (rho*exp(i*phi)) um. Die Rückgabe erfolgt pseudokartesisch als rho+i*phi. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_TO_RECT_[NUM_CMPLX]=				to_rect(z)                                                  VAL      - Wandelt eine Polardarstellung (rho*exp(i*phi), bzw. pseudokartesisch als rho+i*phi) der komplexen Zahl z in die kartesische Darstellung re+i*im um. %%DEFINED_FOR_ALL%%
PARSERFUNCS_LISTFUNC_FUNC_TO_STRING_[STRING]=				to_string(EXPR)                                             STR      - Wandelt EXPR, wenn es sich um keine Zeichenkette handelt, in eine solche um (#(EXPR) würde zunächst den numerischen Wert von EXPR auswerten)
PARSERFUNCS_LISTFUNC_FUNC_TO_TEX_[STRING]=					to_tex(fValue,nPrecision=PREC)                              STR      - Wandelt den numerischen Wert fValue in einen String im TeX-Format unter der Verwendung der Präzision nPrecision um. Standardmäßig wird die globale Präzision PREC verwendet
PARSERFUNCS_LISTFUNC_FUNC_TO_TIME_[TIME_STRING]=			to_time(sPattern,sTime)                                     VAL      - Wandelt die Zeit in sTime gemäß dem Schema sPattern in einen Zeitwert um. Wenn das Schema eine leere Zeichenkette ist, wird es automatisch detektiert. Die folgenden Zeichen in sPattern werden verwendet, um die Zeitangaben in sTime zu identifizieren:%%ITEMIZE%%Y: Jahr%%ITEMIZE%%M: Monat%%ITEMIZE%%D: Tag (als Datumswert)%%ITEMIZE%%d: Tag (als Dauer)%%ITEMIZE%%H: Stunde (in UTC)%%ITEMIZE%%h: Stunde (in der aktuellen Zeitzone)%%ITEMIZE%%m: Minute%%ITEMIZE%%s: Sekunde%%ITEMIZE%%i: Millisekunde%%ITEMIZE%%u: Mikrosekunde%%ITEMIZE_END%%Beispiel: "YY-MM-DD HH:mm:ss"
PARSERFUNCS_LISTFUNC_FUNC_TO_UPPERCASE_[STRING]=			to_uppercase(sLower)                                        STR      - Wandelt die Kleinbuchstaben in sLower in Großbuchstaben um
PARSERFUNCS_LISTFUNC_FUNC_TO_UTF8_[STRING]=					to_utf8(sAnsiEnc)                                           STR      - Konvertiert die ANSI encodierte Zeichenkette sAnsiEnc in eine UTF-8 encodierte Zeichenkette. Für ANSI wird die CP1252-Variante verwendet
PARSERFUNCS_LISTFUNC_FUNC_TO_VALUE_[STRING]=				to_value(sToEval)                                           VAL      - Wertet die Zeichenkette sToEval aus und wandelt das Ergebnis in einen Wert um
PARSERFUNCS_LISTFUNC_FUNC_TRACE_[MAT]=						trace(mSqMat)                                               VAL      - Berechnet die Spur der quadratischen Matrix mSqMat.
PARSERFUNCS_LISTFUNC_FUNC_TRANSPOSE_[MAT]=					transpose(mMat)                                             MAT      - Transponiert die Matrix mMat (Zeilen- und Spaltenindices werden vertauscht)
PARSERFUNCS_LISTFUNC_FUNC_TRIANGLEV_[DRAW]=					trianglev(P,D,D,sStyle="")                                  {}       - Zeichnet ein Dreieck. Dabei können zwei oder drei Ecken angegeben werden. Bei zwei Ecken zeichnet NumeRe ein gleichseitiges Dreieck; bei drei ein allgemeines Dreieck. Die Ecken sind dabei von unten links an entgegen des Uhrzeigersinns numeriert. Die Füllung des Dreiecks kann mit sStyle beeinflusst werden.
PARSERFUNCS_LISTFUNC_FUNC_TRIANGLE_[DRAW]=					triangle(P,P,P,sStyle="")                                   {}       - Zeichnet ein Dreieck. Dabei können zwei oder drei Ecken angegeben werden. Bei zwei Ecken zeichnet NumeRe ein gleichseitiges Dreieck; bei drei ein allgemeines Dreieck. Die Ecken sind dabei von unten links an entgegen des Uhrzeigersinns numeriert. Die Füllung des Dreiecks kann mit sStyle beeinflusst werden.
PARSERFUNCS_LISTFUNC_FUNC_UNIQUE_[MAT]=                     unique(mMat,nDim=0)                                         MAT      - Sortiert und gibt nur eindeutige Elemente zurück. Ist mMat ein Vektor, so gibt die Funktion einen Vektor zurück. Ist mMat eine Matrix, so wird mMat ausgerollt und ein Vektor zurückgegeben. nDim ist optional, ist standardmäßig 0, und wird nur verwendet, wenn mMat eine Matrix ist:%%ITEMIZE%%nDim = 0: Funktion rollt die Matrix zeilenweise aus und gibt einen Vektor mit eindeutigen Elementen zurück%%ITEMIZE%%nDim = 1: Funktion gibt eine Matrix mit eindeutigen Elementen entlang der Zeilen zurück%%ITEMIZE%%nDim = 2: Funktion gibt eine Matrix mit eindeutigen Elementen entlang der Spalten zurück%%ITEMIZE_END%%
PARSERFUNCS_LISTFUNC_FUNC_VALTOSTR_[STRING]=				valtostr(x,cFill="",n=0)                                    STR      - Wertet x aus und wandelt den Wert in eine Zeichenkette um. cFill ist ein optionales Zeichen, das verwendet wird, um x auf n Zeichen, die vorne angestellt werden, zu füllen
PARSERFUNCS_LISTFUNC_FUNC_VCAT_[MAT]=						vcat(mTop,mBot)                                             MAT      - Verkettet die zwei Matrizen vertikal. Es werden also die Zeilen der zweiten Matrix an die Zeilen der ersten Matrix angefügt. Diese Operation setzt voraus, dass beide Matrizen die gleiche Spaltenzahl haben, da ansonsten die Operation nicht durchführbar ist.
PARSERFUNCS_LISTFUNC_FUNC_VECTSHIFT_[MAT]=					vectshift(mMat,n,nDim=0)                                    MAT      - Verschiebt alle Zeilen/Spalten der Matrix mMat um n Positionen in Richtung der Matrixdimension nDim (wählen Sie 0 für Zeile und 1 für Spalte).
PARSERFUNCS_LISTFUNC_FUNC_VERSION_[TIME]=					version()                                                   VAL      - Gibt die Versionsnummer von NumeRe als Zahl in folgendendem Format zurück: Mmr.YYMM, wobei vM.m.r, YY das Jahr und MM den Monat bezeichnet. Die Dezimalen können verwendet werden, um Release Candidates oder Hotfixes zu unterscheiden. Beispiel: 113.2107
PARSERFUNCS_LISTFUNC_FUNC_WEEKDAY_[TIME]=					weekday(tTime,asString=false)                               ARG      - Gibt die Nummer des Wochentages des übergebenen Zeitwertes tTime zurück. Wenn asString den Wert true hat, wird der Wochentag als Name in der aktuell verwendeten Sprache zurückgegeben
PARSERFUNCS_LISTFUNC_FUNC_WEEKNUM_[TIME]=					weeknum(tTime)                                              VAL      - Gibt die Kalenderwochennummer des übergebenen Zeitwertes tTime entsprechend ISO 8601 zurück
PARSERFUNCS_LISTFUNC_FUNC_WEIBULL_CDF_P_[DISTRIB]= 			weibull_cdf_p(x,fScl,fExp)                                  VAL      - Liefert die kumulative Verteilungsfunktion bei x der Weibull-Verteilung mit Skalierung fScl und Exponent fExp
PARSERFUNCS_LISTFUNC_FUNC_WEIBULL_CDF_Q_[DISTRIB]= 			weibull_cdf_q(x,fScl,fExp)                                  VAL      - Liefert die komplementäre kumulative Verteilungsfunktion bei x der Weibull-Verteilung mit Skalierung fScl und Exponent fExp
PARSERFUNCS_LISTFUNC_FUNC_WEIBULL_INV_P_[DISTRIB]= 			weibull_inv_p(p,fScl,fExp)                                  VAL      - Liefert die Umkehrung der kumulativen Verteilungsfunktion bei p der Weibull-Verteilung mit Skalierung fScl und Exponent fExp
PARSERFUNCS_LISTFUNC_FUNC_WEIBULL_INV_Q_[DISTRIB]= 			weibull_inv_q(q,fScl,fExp)                                  VAL      - Liefert die Umkehrung der komplementären kumulativen Verteilungsfunktion bei q der Weibull-Verteilung mit Skalierung fScl und Exponent fExp
PARSERFUNCS_LISTFUNC_FUNC_WEIBULL_PDF_[DISTRIB]= 			weibull_pdf(x,fScl,fExp)                                    VAL      - Liefert die Dichte der Verteilungsfunktion bei x der Weibull-Verteilung mit Skalierung fScl und Exponent fExp
PARSERFUNCS_LISTFUNC_FUNC_WEIBULL_RD_[RANDOM_DISTRIB]= 		weibull_rd(fScl,fExp)                                       VAL      - Liefert eine Zufallszahl aus der Weibull-Verteilung mit Skalierung fScl und Exponent fExp
PARSERFUNCS_LISTFUNC_FUNC_XOR_[LOGIC]=						xor(x,y,z,...)                                              LOG      - Verknüpft die Argumente mit einem "|||"-Operator
PARSERFUNCS_LISTFUNC_FUNC_Y_[NUM_POLYNOMIAL]=				Y(l,m,fTheta,fPhi)                                          VAL      - Wert der Kugelflächenfunktionen der Ordnung l >= 0 mit m = [-l,l] unter den Winkeln fTheta im Intervall [0,PI] und fPhi im Intervall [0,2*PI)
PARSERFUNCS_LISTFUNC_FUNC_ZERO_[MAT]=						zero(n,m=n)                                                 MAT      - Erzeugt eine n x m-Matrix, die mit Nullen gefüllt ist. Wenn nur ein Argument angegeben wird, wird eine symmetrische Matrix erzeugt.
PARSERFUNCS_LISTFUNC_FUNC_ZETA_[NUM]=					    zeta(x)                                                     VAL      - Berechnet den Wert der Riemann'schen Zetafunktion an der Stelle x. %%DEFINED_FOR_ALL_C_RANGE_R%% R \ {1}
PARSERFUNCS_LISTFUNC_FUNC_Z_[NUM_POLYNOMIAL]=				Z(n,m,fRho,fPhi)                                            VAL      - Wert des Zernikepolynoms der Ordnung n >= 0 mit m = [-n,n] an der Stelle fRho im Intervall [0,1] unter dem Winkel fPhi im Intervall [0,2*PI)
PARSERFUNCS_LISTFUNC_TABLEHEAD=								Funktion:                                                   Typ:     Ausgabe:
# Ende Funktionentabelle
PARSERFUNCS_LISTFUNC_GETKEYVAL_WARNING=Der Schlüssel %%1%% konnte von der Funktion getkeyval() nicht in der angegeben Liste gefunden werden.
PARSERFUNCS_LISTFUNC_FOOTNOTE1=Der Typ des Rückgabewertes wird schematisch durch VAL = numerischer Wert, STR = Zeichenkette, LOG = Logikwert (true oder false), MAT = Matrix, VEC = Vektor und ARG = Typ der Argumente angegeben. Rückgabewerte in geschweiften Klammern indizieren, dass die Funktion mehrere Werte zurück gibt; leere Klammern indizieren, dass die Funktion keinen Wert zurückgibt.
PARSERFUNCS_LISTFUNC_FOOTNOTE2=Weiterführende Informationen zu den vordefinierten mathematischen Funktionen können in der NumeRe-Hilfe mittels "help func" erhalten werden.
# Methoden
PARSERFUNCS_LISTFUNC_METHODS_TYPE_DATA=Tabellen
PARSERFUNCS_LISTFUNC_METHODS_TYPE_STRING=Zeichenketten
PARSERFUNCS_LISTFUNC_METHOD_ALIASOF_[DATA]=					aliasof(sTable)                                             STR      - Wandelt die aktuelle Tabelle in einen Alias auf die Tabelle, deren Name durch die Zeichenkette sTable übergeben wurde, um. Die aktuelle Tabelle wird dabei maskiert und kann währenddessen nicht verwendet werden. Eine leere Zeichenkette deaktiviert den Alias wieder. Diese Methode gibt den Namen der referenzierten Tabelle zurück
PARSERFUNCS_LISTFUNC_METHOD_AND_[DATA]=						and                                                        {LOG}     - Wendet die Multi-Argumentfunktion "and()" auf den Datensatz an. Mit den Modifikatoren%%ITEMIZE%%.cols%%ITEMIZE%%.rows%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden
PARSERFUNCS_LISTFUNC_METHOD_ANOVAOF_[DATA]=					anovaof({nCategs},nCol,fSignif=0.05,{nRows}={1:nrows})      CST    	 - Führt eine Varianzanalyse (ANOVA) für die Kategorien der Spalten nCategs und die Werte der Spalte nCol unter Verwendung des Signifikanzwertes fSignif für die Zeilen nRows durch. Für die Berechnung werden Summen der Quadrate vom Typ 1 verwendet, dies ist relevant für Berechnungen bei mehrfaktoriellen ANOVA-Tests. Die Zeilen können vorgegeben werden und entsprechen standardmäßig der vollen Dimension. Es wird eine Schlüssel-Wert-Liste mit den berechneten relevanten Werten zurückgegeben
PARSERFUNCS_LISTFUNC_METHOD_KMEANSOF_[DATA]=					kmeansof({nCols}, nclusters, maxIterations=100, init-method="random", re-initializations=10)    {VAL}     - Klustert Daten der Tabelle anhand der Spalten nCols, erzeugt nClusters Cluster, mit maxIterations Iterationen, init_method "random" oder "kmeans++", re_initializations gibt an, wie oft kmeans mit verschiedenen random init Werten aufgerufen wird. 
PARSERFUNCS_LISTFUNC_METHOD_AT_[STRING]=					at(nPos)                                                    STR      - Gibt das Zeichen aus der Zeichenkette an der Stelle nPos zurück
PARSERFUNCS_LISTFUNC_METHOD_AVG_[DATA]=						avg                                                        {VAL}     - Wendet die Multi-Argumentfunktion "avg()" auf den Datensatz an. Mit den Modifikatoren%%ITEMIZE%%.cols%%ITEMIZE%%.rows%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden
PARSERFUNCS_LISTFUNC_METHOD_BINSOF_[DATA]=					binsof(nCol,nBins=0)                                       {VAL}     - Berechnet ein einfaches Histogramm der Daten in der Spalte nCol. Wenn die Zahl der Bins nBins nicht vorgegeben wird, wird diese mithilfe der Sturges-Regel bestimmt. Ist die Spalte kategorial, dann werden die Kategorien als Bins verwendet. Bei logischen Spalten werden die logischen Werte (true, false) als Bins verwendet
PARSERFUNCS_LISTFUNC_METHOD_CATEGORIESOF_[DATA]=			categoriesof({nCols})                                       CST      - Gibt die Kategorien der ausgewählten kategorialen Spalte(n) als Schlüssel-Wert-Liste zurück. Sind die ausgewählten Spalten nicht kategorial, wird eine leere Zeichenkette zurückgegeben
PARSERFUNCS_LISTFUNC_METHOD_CATEGORIZE_[DATA]=				categorize({nCols},{sCategories}={})                        CST      - Aktualisiert die Kategorien einer kategorialen Spalte (konvertiert sie sofern nötig). Die Zahl der neuen Kategorien muss dabei nicht mit den bisherigen Kategorien übereinstimmen. Bei Erfolg werden die neuen Kategorien der ausgewählten kategorialen Spalte(n) als Schlüssel-Wert-Liste zurückgegeben
PARSERFUNCS_LISTFUNC_METHOD_CELLS_[DATA]=					cells(nFirst,nIncr=nFirst)                                  {}       - Wählt in Kombination mit .cols oder .rows die erste (nFirst) Zeile/Spalte aus, ab der die Multi-Argumentfunktion angewendet wird und erlaubt damit die Auswahl von Tabellenzellen entlang der Auswertungsrichtung (wählt z.B. bei .rows die Zellen entlang der Zeilen aus). Mittels nIncr kann nur jede nIncr-te Spalte/Zeile ausgewählt werden. Wird nur nFirst vorgegeben, so ist nIncr == nFirst. Zeilen/Spalten können auch gezielt ausgewählt werden, wenn ein Vektor für nFirst übergeben wird: cells({VEC})
PARSERFUNCS_LISTFUNC_METHOD_CNT_[DATA]=						cnt                                                        {VAL}     - Wendet die Multi-Argumentfunktion "cnt()" auf den Datensatz an. Mit den Modifikatoren%%ITEMIZE%%.cols%%ITEMIZE%%.rows%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden
PARSERFUNCS_LISTFUNC_METHOD_COLS_[DATA]=					cols                                                        {*}      - Modifiziert die Operation der Multi-Argumentfunktion auf spaltenweises Vorgehen oder gibt die Zahl der Spalten der Tabelle zurück, wenn sie einzeln oder in Kombination mit ".grid" (für ein Datengitter) verwendet wird
PARSERFUNCS_LISTFUNC_METHOD_CONVERT_[DATA]=					convert({nCols},sType="auto")                               STR      - Konvertiert die Spalten mit den Indices {nCols} zum neuen Spaltentyp sType. sType ist eine Zeichenkette und kann eines von%%ITEMIZE%%"value" (oder einer der Subtypen)%%ITEMIZE%%"string"%%ITEMIZE%%"datetime"%%ITEMIZE%%"logical"%%ITEMIZE%%"category"%%ITEMIZE_END%%sein. Subtypen von "value" sind "value.cf32", "value.f64", "value.f32", "value.i8", "value.ui8", "value.i16", "value.ui16", "value.i32", "value.ui32", "value.i64" und "value.ui64". "auto" führt eine automatische Detektion der besten Konvertierung je Spalte aus. Ist die Konvertierung erfolgreich, wird der neue Typ als Zeichenkette zurückgegeben, anderenfalls ist die Zeichenkette leer. "auto" ist immer erfolgreich, auch wenn keine Spalte konvertiert wurde
PARSERFUNCS_LISTFUNC_METHOD_COUNTIF_[DATA]=					countif({nCols},vals{})                                    {VAL}     - Zählt die Elemente in den Spalten nCols, die mit den Werten im Cluster vals{} übereinstimmen. Für jede Spalte und jeden Wert in vals{} wird eine Summe geordnet nach den Spalten zurück gegeben
PARSERFUNCS_LISTFUNC_METHOD_COVAROF_[DATA]=					covarof(nCol1,nCol2,{nRows1}={1:nrows},{nRows2}={1:nrows})  VAL      - Berechnet die Kovarianz der Spalten nCol1 und nCol2. Die jeweiligen Zeilen können vorgegeben werden und entsprechen standardmäßig der vollen Dimension
PARSERFUNCS_LISTFUNC_METHOD_DESCRIBE_[DATA]=				describe(sDesc)                                             STR      - Aktualisiert die Beschreibung der aktuellen Tabelle mit dem Inhalt von sDesc. Bei Erfolg wird sDesc zurückgegeben
PARSERFUNCS_LISTFUNC_METHOD_DESCRIPTION_[DATA]=				description                                                 STR      - Gibt die Beschreibung der aktuellen Tabelle als Zeichenkette zurück
PARSERFUNCS_LISTFUNC_METHOD_ENDSW_[STRING]=					endsw(sEnd)  	                                            LOG      - Gibt true zurück, wenn der string sStr mit sEnd endet. Sonst, false.
PARSERFUNCS_LISTFUNC_METHOD_EVERY_[DATA]=					every(nFirst,nIncr=nFirst)                                  {}       - Wählt in Kombination mit .cols oder .rows die erste (nFirst) Spalte/Zeile aus, ab der die Multi-Argumentfunktion angewendet wird und erlaubt damit die Auswahl von Spalten/Zeilen orthogonal zur Auswertungsrichtung (wählt z.B. bei .rows die Zeilen selbst aus). Mittels nIncr kann nur jede nIncr-te Spalte/Zeile ausgewählt werden. Wird nur nFirst vorgegeben, so ist nIncr == nFirst. Spalten/Zeilen können auch gezielt ausgewählt werden, wenn ein Vektor für nFirst übergeben wird: every({VEC})
PARSERFUNCS_LISTFUNC_METHOD_FIRST_[STRING]=					first                                                       STR      - Gibt das erste Zeichen aus einer Zeichenkette zurück
PARSERFUNCS_LISTFUNC_METHOD_FNDCOLS_[DATA]=					fndcols({sNames},enableRegEx=false)                        {VAL}     - Gibt die Indices aller Spalten zurück, deren Überschriften mit sNames übereinstimmen. sNames können reguläre Ausdrücke sein, wenn enableRegEx true ist. Wird nichts gefunden, wird NaN zurückgegeben
PARSERFUNCS_LISTFUNC_METHOD_FND_[STRING]=					fnd(sToFind,nPos=1)                                         VAL      - Gibt die Position des ersten Auftretens von sToFind in der Zeichenkette ab dem Zeichen nPos zurück. nPos ist ein optionaler Startwert für die erste Position und standardmäßig ist nPos = 1. Falls nichts gefunden wird, wird false zurückgegeben
PARSERFUNCS_LISTFUNC_METHOD_GRID_[DATA]=					grid                                                        {}       - Modifiziert die Operation der Multi-Argumentfunktion, so dass der Datensatz als Datengitter interpretiert wird
PARSERFUNCS_LISTFUNC_METHOD_INDEXOF_[DATA]=					indexof(nCol,vals{})                                       {VAL}     - Gibt die Indices der Elemente in der Spalte nCol zurück, die mit den Werte im Cluster vals{} übereinstimmen. Jeder Satz von Indices ist durch ein NaN von den anderen Sätzen getrennt
PARSERFUNCS_LISTFUNC_METHOD_INSERTCELLS_[DATA]=				insertcells(nRow,nCol,nRows=1,nCols=1)                      LOG      - Fügt einen Block an nRows x nCols Zellen an der Position {nRow, nCol} in die Tabelle ein. Bereits vorhandene Zellen werden nach unten verschoben bzw. nach rechts, falls [nRow, nRow+nRows] eine gesamte Spalte abdeckt
PARSERFUNCS_LISTFUNC_METHOD_INSERTCOLS_[DATA]=				insertcols(nCol,nCols=1)                                    LOG      - Fügt nCols Spalten vor der Spalte nCol in die Tabelle ein
PARSERFUNCS_LISTFUNC_METHOD_INSERTROWS_[DATA]=				insertrows(nRow,nRows=1)                                    LOG      - Fügt nRows Reihen vor der Reihe nRow in die Tabelle ein
PARSERFUNCS_LISTFUNC_METHOD_LAST_[STRING]=					last                                                        STR      - Gibt das letzte Zeichen aus einer Zeichenkette zurück
PARSERFUNCS_LISTFUNC_METHOD_LEN_[STRING]=					len                                                         VAL      - Länge der Zeichenkette
PARSERFUNCS_LISTFUNC_METHOD_LINES_[DATA]=					lines                                                       {}       - Modifiziert die Operation der Multi-Argumentfunktion auf zeilenweises Vorgehen (Alias für ".rows")
PARSERFUNCS_LISTFUNC_METHOD_MAXPOS_[DATA]=					maxpos                                                     {VAL}     - Bestimmt die Position des Maximums in der Tabelle in Zeilen und Spalten. Mit den Modifikatoren%%ITEMIZE%%.cols (Maxima der Spalten)%%ITEMIZE%%.rows (Maxima der Zeilen)%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden. Im Fall eines mehrfachen Auftretens desselben Wertes, wird nur die zuerst gefundene Position zurückgegeben
PARSERFUNCS_LISTFUNC_METHOD_MAX_[DATA]=						max                                                        {VAL}     - Wendet die Multi-Argumentfunktion "max()" auf den Datensatz an. Mit den Modifikatoren%%ITEMIZE%%.cols%%ITEMIZE%%.rows%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden
PARSERFUNCS_LISTFUNC_METHOD_MED_[DATA]=						med                                                        {VAL}     - Wendet die Multi-Argumentfunktion "med()" auf den Datensatz an. Mit den Modifikatoren%%ITEMIZE%%.cols%%ITEMIZE%%.rows%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden
PARSERFUNCS_LISTFUNC_METHOD_MINPOS_[DATA]=					minpos                                                     {VAL}     - Bestimmt die Position des Minimums in der Tabelle in Zeilen und Spalten. Mit den Modifikatoren%%ITEMIZE%%.cols (Minima der Spalten)%%ITEMIZE%%.rows (Minima der Zeilen)%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden. Im Fall eines mehrfachen Auftretens desselben Wertes, wird nur die zuerst gefundene Position zurückgegeben
PARSERFUNCS_LISTFUNC_METHOD_MIN_[DATA]=						min                                                        {VAL}     - Wendet die Multi-Argumentfunktion "min()" auf den Datensatz an. Mit den Modifikatoren%%ITEMIZE%%.cols%%ITEMIZE%%.rows%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden
PARSERFUNCS_LISTFUNC_METHOD_MTCH_[STRING]=					mtch(sChars,nPos=1)                                         VAL      - Sucht das erste Auftreten eines Zeichens aus sChars in der Zeichenkette ab dem Zeichen nPos. nPos ist ein optionaler Startwert für die erste Position und standardmäßig ist nPos = 1. Falls nichts gefunden wird, wird false zurückgegeben
PARSERFUNCS_LISTFUNC_METHOD_NAME_[DATA]=					name                                                        STR      - Gibt den Namen der Tabelle als Zeichenkette zurück, um diesen z.B. mit "findcolumn()" zu verwenden
PARSERFUNCS_LISTFUNC_METHOD_NMTCH_[STRING]=					nmtch(sChars,nPos=1)                                        VAL      - Sucht das erste Auftreten eines Zeichens in der Zeichenkette, das nicht in sChars auftritt, ab dem Zeichen nPos. nPos ist ein optionaler Startwert für die erste Position und standardmäßig ist nPos = 1. Falls nichts gefunden wird, wird false zurückgegeben
PARSERFUNCS_LISTFUNC_METHOD_NORM_[DATA]=					norm                                                       {VAL}     - Wendet die Multi-Argumentfunktion "norm()" auf den Datensatz an. Mit den Modifikatoren%%ITEMIZE%%.cols%%ITEMIZE%%.rows%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden
PARSERFUNCS_LISTFUNC_METHOD_NRMTCH_[STRING]=				nrmtch(sChars,nPos=STRINGVAR.len)                           VAL      - Sucht das letzte Auftreten eines Zeichens in der Zeichenkette, das nicht in sChars auftritt, bis zum Zeichen nPos. nPos ist ein optionaler Startwert für letzte Position und standardmäßig ist nPos = STRINGVAR.len. Falls nichts gefunden wird, wird false zurückgegeben
PARSERFUNCS_LISTFUNC_METHOD_NUM_[DATA]=						num                                                        {VAL}     - Wendet die Multi-Argumentfunktion "num()" auf den Datensatz an.Mit den Modifikatoren%%ITEMIZE%%.cols%%ITEMIZE%%.rows%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden
PARSERFUNCS_LISTFUNC_METHOD_OR_[DATA]=						or                                                         {LOG}     - Wendet die Multi-Argumentfunktion "or()" auf den Datensatz an. Mit den Modifikatoren%%ITEMIZE%%.cols%%ITEMIZE%%.rows%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden
PARSERFUNCS_LISTFUNC_METHOD_PCORROF_[DATA]=					pcorrof(nCol1,nCol2,{nRows1}={1:nrows},{nRows2}={1:nrows})  VAL      - Berechnet die Pearson-Korrelation der Spalten nCol1 und nCol2. Die jeweiligen Zeilen können vorgegeben werden und entsprechen standardmäßig der vollen Dimension. Die Pearson-Korrelation kann nur aus numerischen Werten berechnet werden
PARSERFUNCS_LISTFUNC_METHOD_PRD_[DATA]=						prd                                                        {VAL}     - Wendet die Multi-Argumentfunktion "prd()" auf den Datensatz an. Mit den Modifikatoren%%ITEMIZE%%.cols%%ITEMIZE%%.rows%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden
PARSERFUNCS_LISTFUNC_METHOD_RANKOF_[DATA]=					rankof(nCol,cType="c",{nRows}={1:nrows})                   {VAL}     - Berechnet die Ränge der Werte in der Spalte nCol für die Zeilen nRows gemäß dem Typ cType. Die Zeilen können vorgegeben werden und entsprechen standardmäßig der vollen Dimension. Der Typ cTyp gibt vor, wie die Ränge vergeben werden:%%ITEMIZE%%cType = "c": kompetetiv, d.h. nach dem 1-2-2-4-Schema%%ITEMIZE%%cType = "f": fraktioniert, d.h. nach dem 1-2.5-2.5-4-Schema%%ITEMIZE%%cType = "d": konsekutiv-dicht, d.h. nach dem 1-2-2-3-Schema%%ITEMIZE_END%%
PARSERFUNCS_LISTFUNC_METHOD_REMOVECELLS_[DATA]=				removecells(nRow,nCol,nRows=1,nCols=1)                      LOG      - Entfernt einen Block an nRows x nCols Zellen ab der Position {nRow, nCol} aus der Tabelle. Unten nachfolgende Zellen werden dabei nach oben verschoben bzw. nach links, falls [nRow, nRow+nRows] eine gesamte Spalte abdeckt
PARSERFUNCS_LISTFUNC_METHOD_REMOVECOLS_[DATA]=				removecols({nCols})                                         LOG      - Entfernt die Spalten {nCols} aus der Tabelle. Nachfolgende Spalten werden nach links verschoben
PARSERFUNCS_LISTFUNC_METHOD_REMOVEROWS_[DATA]=				removerows({nRows})                                         LOG      - Entfernt die Reihen {nRows} aus der Tabelle. Nachfolgende Reihen werden nach oben verschoben
PARSERFUNCS_LISTFUNC_METHOD_REORDERCOLS_[DATA]=				reordercols({nCols},{nNewOrder})                            LOG      - Sortiert die Spalten {nCols} gemäß der neuen Ordnung {nNewOrder} um. Die Indices {nNewOrder} müssen dabei eine Permutation von {1:num({nCols})} sein. Liefert true, wenn eine Umsortierung möglich war
PARSERFUNCS_LISTFUNC_METHOD_REORDERROWS_[DATA]=				reorderrows({nRows},{nNewOrder})                            LOG      - Sortiert die Zeilen {nRows} gemäß der neuen Ordnung {nNewOrder} um. Die Indices {nNewOrder} müssen dabei eine Permutation von {1:num({nRows})} sein. Liefert true, wenn eine Umsortierung möglich war
PARSERFUNCS_LISTFUNC_METHOD_RFND_[STRING]=					rfnd(sToFind,nPos=STRINGVAR.len)                            VAL      - Gibt die Position des letzten Auftretens von sToFind in der Zeichenkette bis zum Zeichen nPos zurück. nPos ist ein optionaler Startwert für letzte Position und standardmäßig ist nPos = STRINGVAR.len. Falls nichts gefunden wird, wird false zurückgegeben
PARSERFUNCS_LISTFUNC_METHOD_RMTCH_[STRING]=					rmtch(sChars,nPos=STRINGVAR.len)                            VAL      - Sucht das letzte Auftreten eines Zeichens aus sChars in der Zeichenkette bis zum Zeichen nPos. nPos ist ein optionaler Startwert für letzte Position und standardmäßig ist nPos = STRINGVAR.len. Falls nichts gefunden wird, wird false zurückgegeben
PARSERFUNCS_LISTFUNC_METHOD_ROWS_[DATA]=					rows                                                        {*}      - Modifiziert die Operation der Multi-Argumentfunktion auf zeilenweises Vorgehen oder gibt die Zahl der Zeilen der Tabelle zurück, wenn sie einzeln oder in Kombination mit ".grid" (für ein Datengitter) verwendet wird
PARSERFUNCS_LISTFUNC_METHOD_SCORROF_[DATA]=					scorrof(nCol1,nCol2,{nRows1}={1:nrows},{nRows2}={1:nrows})  VAL      - Berechnet die Spearman-Korrelation der Spalten nCol1 und nCol2. Die jeweiligen Zeilen können vorgegeben werden und entsprechen standardmäßig der vollen Dimension. Die Spearman-Korrelation kann von allen Variablentypen berechnet werden. Bei der Berechnung der zugehörigen Ränge wird Groß- und Kleinschreibung berücksichtigt
PARSERFUNCS_LISTFUNC_METHOD_SHRINK_[DATA]=					shrink                                                      LOG      - Entfernt leere, anhängende Zellen und Spalten aus der Tabelle, um Speicherplatz zu sparen. Leere Zellen und Spalten, die von validen Daten umschlossen sind, werden beibehalten
PARSERFUNCS_LISTFUNC_METHOD_SIZE_[DATA]=					size                                                       {VAL}     - Bestimmt die Größe der Tabelle in Zeilen und Spalten. Mit den Modifikatoren%%ITEMIZE%%.cols (Länge der Spalten)%%ITEMIZE%%.rows (Länge der Zeilen)%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden
PARSERFUNCS_LISTFUNC_METHOD_SPLT_[STRING]=					splt(cSep,keepEmpty=false)                                 {STR}     - Teilt die Zeichenkette an den Zeichen cSep in einzelne Zeichenketten auf. Mit keepEmpty = true werden auch leere Zeichenketten zurückgegeben, anderenfalls werden sie unterdrückt
PARSERFUNCS_LISTFUNC_METHOD_STARTSW_[STRING]=				startsw(sStart)                                             LOG      - Gibt true zurück, wenn der string sStr mit sStart beginnt. Sonst, false.
PARSERFUNCS_LISTFUNC_METHOD_STD_[DATA]=						std                                                        {VAL}     - Wendet die Multi-Argumentfunktion "std()" auf den Datensatz an. Mit den Modifikatoren%%ITEMIZE%%.cols%%ITEMIZE%%.rows%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden
PARSERFUNCS_LISTFUNC_METHOD_SUB_[STRING]=					sub(nPos,nLen=STRINGVAR.len)                                STR      - Gibt nLen Zeichen ab dem Zeichen nPos aus der Zeichenkette als neue Zeichenkette zurück
PARSERFUNCS_LISTFUNC_METHOD_SUM_[DATA]=						sum                                                        {VAL}     - Wendet die Multi-Argumentfunktion "sum()" auf den Datensatz an. Mit den Modifikatoren%%ITEMIZE%%.cols%%ITEMIZE%%.rows%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden
PARSERFUNCS_LISTFUNC_METHOD_TYPEOF_[DATA]=					typeof({nCols})                                            {STR}     - Gibt den Spaltentyp der mit {nCols} indizierten Spalten als Zeichenketten zurück. Der Typ kann dabei als %%ITEMIZE%%"value" (oder einer der Subtypen)%%ITEMIZE%%"string"%%ITEMIZE%%"datetime"%%ITEMIZE%%"logical"%%ITEMIZE%%"category"%%ITEMIZE_END%%angegeben werden. Leere oder nicht vorhandene Spalten haben den Typ %%ITEMIZE%%"none"%%ITEMIZE_END%%Subtypen von "value" sind "value.cf32", "value.f64", "value.f32", "value.i8", "value.ui8", "value.i16", "value.ui16", "value.i32", "value.ui32", "value.i64" und "value.ui64".
PARSERFUNCS_LISTFUNC_METHOD_XOR_[DATA]=						xor                                                        {LOG}     - Wendet die Multi-Argumentfunktion "xor()" auf den Datensatz an. Mit den Modifikatoren%%ITEMIZE%%.cols%%ITEMIZE%%.rows%%ITEMIZE%%.grid%%ITEMIZE%%.cells()%%ITEMIZE%%.every()%%ITEMIZE_END%%kann die Funktion weiter eingeschränkt werden
PARSERFUNCS_LISTFUNC_METHOD_ZSCOREOF_[DATA]=				zscoreof(nCol,nRows={1:nrows})                             {VAL}     - Berechnet die Standardisierung der Werte bezogen auf ihre Abweichung vom Mittelwert (auch z-Score genannt) in der Spalte nCol für die Zeilen nRows. Die Zeilen können vorgegeben werden und entsprechen standardmäßig der vollen Dimension. Mittelwert und Standardabweichung werden stets bezogen auf die ausgewählten Zeilen berechnet
# Kommandotabelle
PARSERFUNCS_LISTCMD_HEADLINE=Kommandosatz
PARSERFUNCS_LISTCMD_TYPE_EVAL=Auswerten
PARSERFUNCS_LISTCMD_TYPE_PLOTTING=Plotten
PARSERFUNCS_LISTCMD_TYPE_FLOWCTRL=Kontrollfluss
PARSERFUNCS_LISTCMD_TYPE_PROC=Prozeduren
PARSERFUNCS_LISTCMD_TYPE_DATACREATION=Datenerzeugung
PARSERFUNCS_LISTCMD_TYPE_LOADSAVE=Laden und Speichern
PARSERFUNCS_LISTCMD_TYPE_DEF=Definitionen
PARSERFUNCS_LISTCMD_TYPE_DATACTRL=Datenkontrolle
PARSERFUNCS_LISTCMD_TYPE_MAINCTRL=Steuerung
PARSERFUNCS_LISTCMD_TYPE_MISC=Verschiedenes
PARSERFUNCS_LISTCMD_TYPE_GUI=Graphische Oberfläche
PARSERFUNCS_LISTCMD_TYPE_PLUGINS=Plugins
PARSERFUNCS_LISTCMD_TABLEHEAD=							Befehl:      Syntax und Ergebnis:       Funktion:
PARSERFUNCS_LISTCMD_CMD_ABORT_[FLOWCTRL]=				abort                                   - Bricht eine interaktive Schleifendefinition oder Plotkomposition in der Konsole ab, so dass die Konsole wieder normal verwendet werden kann
PARSERFUNCS_LISTCMD_CMD_ABOUT_[MAINCTRL]=				about                                   - Zeigt Lizenz- und Urheberinformationen zu NumeRe in der Konsole an
PARSERFUNCS_LISTCMD_CMD_APPEND_[LOADSAVE]=				append       NM [-PAR]  -> {VAL}        - Hängt die Daten aus der Datei NM an bereits vorhandene Daten im Speicher an. Der Parameter erlaubt das Anhängen mehrerer Dateien zugleich. Gibt die Indices der angehängten Daten in der Zieltabelle zurück
PARSERFUNCS_LISTCMD_CMD_ASSERT_[MAINCTRL]=				assert       EX  -> {ARG}               - Überprüft den übergebenen Ausdruck auf Wahrheit und gibt ihn zurück. Falls er nicht wahr ist wirft das Kommando einen Fehler. Dieses Kommando ist zur Verwendung in einem Softwaretest gedacht
PARSERFUNCS_LISTCMD_CMD_AUDIOREAD_[LOADSAVE]=			audioread    NM [-set PAR]  -> {VAL}    - Liest die Metadaten einer WAVE-Datei oder die gesamte Datei, wenn eine Zieltabelle angegeben wurde
PARSERFUNCS_LISTCMD_CMD_AUDIO_[LOADSAVE]=				audio        OB [-PAR]                  - Erzeugt eine WAVE-Datei aus dem Datensatz in OB. Mittels Parameter kann die Samplerate und der Zieldateiname vorgegeben werden
PARSERFUNCS_LISTCMD_CMD_BITMAP_[GUI]=					bitmap       EX [-set PAR]              - Fügt ein Bild, dessen Dateiname über EX angegeben wurde, in ein Window-Layout ein
PARSERFUNCS_LISTCMD_CMD_BREAK_[FLOWCTRL]=				break                                   - Bricht die aktuelle Schleife ab oder verlässt den aktuellen case eines switch-Blocks und springt im Programmfluss eine Ebene höher
PARSERFUNCS_LISTCMD_CMD_BUTTON_[GUI]=					button       EX [-set PAR]              - Fügt eine beschriftbare Schaltfläche ein. Das Eventhandling ist konfigurierbar
PARSERFUNCS_LISTCMD_CMD_CACHE_[DATACTRL]=				cache        -PAR  -> {VAL}             - Optionen auf dem Cache. Parameter ermöglichen viele Operationen, unter anderem auch die Anwendung von Multi-Argumentfunktionen
PARSERFUNCS_LISTCMD_CMD_CASE_[FLOWCTRL]=				case         EX:                        - Definiert einen Fall in einer Auswahlverzweigung. Der Ausdruck EX muss ein numerischer Wert oder eine Zeichenkette sein
PARSERFUNCS_LISTCMD_CMD_CATCH_[FLOWCTRL]=				catch        EX:                        - Beginnt die Fehlerbehandlung für den Fehlertyp EX
PARSERFUNCS_LISTCMD_CMD_CHECKBOX_[GUI]=					checkbox     EX [-set PAR]              - Fügt eine Checkbox in ein Window-Layout ein. Das Eventhandling und der Startwert sind konfigurierbar. Bei Verwendung in einem Menü wird dies in einen Menüeintrag mit einer Checkbox umgewandelt
PARSERFUNCS_LISTCMD_CMD_CLC_[MAINCTRL]=					clc                                     - Bereinigt das Terminal
PARSERFUNCS_LISTCMD_CMD_CLEAR_[DATACTRL]=				clear        OB [-PAR]                  - Entfernt alle Elemente im gewählten Objekt unwiderbringlich von diesem Rechner. Der Parameter kann genutzt werden, um die Bestätigung zu unterdrücken (-ignore) oder alle Tabellen zugleich zu löschen (-memory)
PARSERFUNCS_LISTCMD_CMD_CLOSE_[MAINCTRL]=				close        -PAR                       - Schließt zuvor geöffnete Fenster, die durch Parameter ausgewählt werden: -graphs schließt alle Graphen, -docs alle Hilfe-Fenster, -tables alle Tabellen, -images alle ImageViewer und -all alle Fenster aus dieser Liste
PARSERFUNCS_LISTCMD_CMD_COMBOBOX_[GUI]=					combobox     EX [-set PAR]              - Fügt eine Combo-Box in ein Window-Layout ein. Das Eventhandling und der Startwert sind konfigurierbar
PARSERFUNCS_LISTCMD_CMD_COMPOSE_[PLOTTING]=				compose                                 - Startet die Komposition mehrerer Plotstile, so dass ein kombinierter Plot aus den berechneten Plots dieser Umgebung erzeugt werden kann. Hiermit können auch mehrere Plots neben- oder übereinander in einem gemeinsamen Fenster angeordnet werden
PARSERFUNCS_LISTCMD_CMD_CONT3D_[PLOTTING]=				cont3d       EX [-set PAR]              - Erzeugt einen 3D-Konturlinien-Plot aus dem Ausdruck EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_CONTINUE_[FLOWCTRL]=			continue                                - Überspringt den Rest der aktuellen Schleife und fährt mit dem nächsten Schleifendurchlauf fort
PARSERFUNCS_LISTCMD_CMD_CONT_[PLOTTING]=				cont         EX [-set PAR]              - Erzeugt einen Konturlinien-Plot aus dem Ausdruck oder den Daten in EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_COPY_[MAINCTRL]=				copy         OB [-PAR]                  - Kopiert (je nach Ausdruck OB) Einträge/Spalten/Untertabellen zwischen Datenobjekten oder ganze Dateien. Durch Parameter können Zieltabelle oder -dateiname vorgegeben oder die Daten ggf. transponiert oder mehrere Dateien ausgewählt werden
PARSERFUNCS_LISTCMD_CMD_CST_[PROC]=						cst          EX                         - Definiert die lokalen Cluster in der Prozedur durch den Ausdruck EX
PARSERFUNCS_LISTCMD_CMD_DATAGRID_[DATACREATION]=		datagrid     EX -PAR                    - Erzeugt ein Datengitter aus dem Ausdruck oder den Daten in EX. Die x- und y-Werte sind als Parameter anzugeben. Außerdem kann die Zahl der samples und die Zieltabelle durch Parameter angegeben werden.
PARSERFUNCS_LISTCMD_CMD_DATA_[DATACTRL]=				data         -PAR  -> {VAL}             - Optionen auf Datensätzen. Parameter ermöglichen viele Operationen, unter anderem auch die Anwendung von Multi-Argumentfunktionen
PARSERFUNCS_LISTCMD_CMD_DATETIMEPICKER_[GUI]=			datetimepicker   [-set PAR]             - Fügt ein Feld zur Datums- und Zeitauswahl in ein Window-Layout ein. Das Eventhandling und der Startwert sind konfigurierbar
PARSERFUNCS_LISTCMD_CMD_DECLARE_[DEF_PROC]=				declare      EX                         - Deklariert eine Datei-spezifische Konstante in EX für die Verwendung in der aktuellen Datei, wobei die Konstante als NAME := AUSDRUCK angegeben werden muss. Die Konstante wird am Ende der aktuellen Datei automatisch entfernt
PARSERFUNCS_LISTCMD_CMD_DEFAULT_[FLOWCTRL]=				default:                                - Definiert den "sonst"-Fall in einer Auswahlverzweigung
PARSERFUNCS_LISTCMD_CMD_DEFINE_[DEF]=					define       EX [-set PAR]              - Definiert die Funktion in EX, wobei die Funktion als NAME(ARG) := AUSDRUCK(ARG) angegeben werden muss. Parameter erlauben ein Kommentieren der Funktion und das Ersetzen von Variablen durch ihre Werte
PARSERFUNCS_LISTCMD_CMD_DELETE_[DATACTRL_MAINCTRL]=		delete       OB [-PAR]                  - Entfernt Einträge aus der Tabelle/dem string()-Objekt in OB. Der Parameter kann genutzt werden, um die Bestätigung zu unterdrücken
PARSERFUNCS_LISTCMD_CMD_DENS3D_[PLOTTING]=				dens3d       EX [-set PAR]              - Erzeugt einen 3D-Dichte-Plot aus dem Ausdruck EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_DENS_[PLOTTING]=				dens         EX [-set PAR]              - Erzeugt einen Dichte-Plot aus dem Ausdruck oder den Daten in EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_DETECT_[EVAL]=					detect       OB [-set PAR]              - Erkennt Strukturen in einem 2D-Datengitter und speichert selbige in der Form (x,y) in der Zieltabelle, wobei unterschiedliche Strukturen durch Leerzeilen getrennt werden. Es ist möglich, eine Schwelle, eine minimale Länge und den maximalen Abstand von Punkten einer einzigen Struktur anzugeben.
PARSERFUNCS_LISTCMD_CMD_DIALOG_[MAINCTRL_GUI]=			dialog       STR -set PAR  -> {STR}     - Erzeugt ein Dialogfenster zur Interaktion mit dem Benutzer. Der Typ des Dialogs wird durch die Parameter angegeben. Außerdem können Titel, eine Nachricht, das Icon und Schaltflächen der Messagebox geändert werden. Die Auswahl des Nutzers oder der Wert der geklickten Schaltfläche wird als Zeichenkette zurückgegeben
PARSERFUNCS_LISTCMD_CMD_DIFF_[EVAL]=					diff         EX -set PAR  -> {VAL}      - Differenziert den Ausdruck oder die Daten in EX numerisch. Die Position bzw. das Intervall, die Genauigkeit sowie die Zahl der Stützstellen kann durch Parameter angegeben werden
PARSERFUNCS_LISTCMD_CMD_DRAW3D_[PLOTTING]=				draw3d       EX [-set PAR]              - Erzeugt eine 3D-Zeichnung aus den Zeichnungsfunktionen im Ausdruck EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_DRAW_[PLOTTING]=				draw         EX [-set PAR]              - Erzeugt eine Zeichnung aus den Zeichnungsfunktionen im Ausdruck EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_DROPDOWN_[GUI]=					dropdown     EX [-set PAR]              - Fügt eine Dropdown-Liste in ein Window-Layout ein. Das Eventhandling und der Startwert sind konfigurierbar
PARSERFUNCS_LISTCMD_CMD_EDIT_[MAINCTRL]=				edit         OB                         - Öffnet eine Tabelle, eine Datei oder ein Verzeichnis zum Bearbeiten
PARSERFUNCS_LISTCMD_CMD_ELSEIF_[FLOWCTRL]=				elseif       (EX)                       - Startet eine bedingte Definition, die beim gegenteiligen Fall von "if" bzw. "elseif", ausgeführt werden soll. Der Ausdruck EX muss logisch interpretierbar sein
PARSERFUNCS_LISTCMD_CMD_ELSE_[FLOWCTRL]=				else                                    - Startet die Definition, die beim gegenteiligen Fall von "if" bzw. "elseif", ausgeführt werden soll
PARSERFUNCS_LISTCMD_CMD_ENDCOMPOSE_[PLOTTING]=			endcompose                              - Beendet die Definition einer zuvor begonnenen Plotkomposition
PARSERFUNCS_LISTCMD_CMD_ENDFOR_[FLOWCTRL]=				endfor       [-PAR]                     - Beendet die Definition einer zuvor begonnenen Zählschleife. Der Parameter kann genutzt werden, um die Statusanzeige zu unterdrücken oder um die Schleife nach einer Zahl von Iterationen zwangsweise abzubrechen
PARSERFUNCS_LISTCMD_CMD_ENDGROUP_[GUI]=					endgroup                                - Beendet die Definition eines zuvor begonnenen Gruppierungsbox
PARSERFUNCS_LISTCMD_CMD_ENDIF_[FLOWCTRL]=				endif                                   - Beendet die Definition einer IF-Verzweigung
PARSERFUNCS_LISTCMD_CMD_ENDLAYOUT_[GUI]=				endlayout                               - Beendet die Definition eines zuvor begonnenen Window-Layouts
PARSERFUNCS_LISTCMD_CMD_ENDPROCEDURE_[FLOWCTRL_PROC]=	endprocedure                            - Beendet die Definition einer zuvor begonnenen NumeRe-Prozedur
PARSERFUNCS_LISTCMD_CMD_ENDSWITCH_[FLOWCTRL]=			endswitch                               - Beendet eine Auswahlverzweigung
PARSERFUNCS_LISTCMD_CMD_ENDTRY_[FLOWCTRL]=				endtry                                  - Beendet einen Try-Catch-Block
PARSERFUNCS_LISTCMD_CMD_ENDWHILE_[FLOWCTRL]=			endwhile     [-PAR]                     - Beendet die Definition einer zuvor begonnenen While-Schleife. Der Parameter kann genutzt werden, um die Statusanzeige zu unterdrücken oder um die Schleife nach einer Zahl von Iterationen zwangsweise abzubrechen
PARSERFUNCS_LISTCMD_CMD_EVAL_[DATACREATION]=			eval         EX -set PAR  -> {VAL}      - Berechnet Funktionswerte des Ausdrucks EX an festen Punkten (samples). Das Intervall ist über den Parameter anzugeben. Außerdem kann die Zahl der Stützstellen sowie eine logarithmische Verteilung derselben durch Parameter vorgegeben werden
PARSERFUNCS_LISTCMD_CMD_EXECUTE_[MAINCTRL]=				execute      STR [-set PAR]             - Führt das Kommando in STR mithilfe der Windows-Shell aus. Der Parameter kann genutzt werden, um Kommandozeilenparameter an das Kommando anzuhängen, darauf zu warten, dass die geöffnete Applikation geschlossen wird oder um das Arbeitsverzeichnis festzulegen
PARSERFUNCS_LISTCMD_CMD_EXPLICIT_[MAINCTRL]=			explicit     CMD                        - Deaktiviert alle Plugins für den Kommandoausdruck CMD
PARSERFUNCS_LISTCMD_CMD_EXPORT_[LOADSAVE]=				export       OB [-PAR]                  - Exportiert den Datensatz in OB in das durch die Dateiendung vorgegebene Dateiformat. Der Dateiname ist durch den Parameter anzugeben
PARSERFUNCS_LISTCMD_CMD_EXTREMA_[EVAL]=					extrema      EX -set PAR  -> {VAL}      - Bestimmt die Extremstellen des Ausdrucks oder der Daten in EX numerisch. Das Intervall ist über den Parameter anzugeben. Außerdem kann die Zahl der Stützstellen sowie die Einschränkung auf Minima und Maxima durch Parameter erreicht werden
PARSERFUNCS_LISTCMD_CMD_FFT2D_[EVAL]=					fft2d        OB [-PAR]                  - Berechnet die 2D-Fourier-Transformation des Datengitters OB. Durch den Parameter kann von reeller auf komplexe Darstellung oder auf inverse Transformation umgeschalten werden. Außerdem kann die Zieltabelle durch den Parameter vorgegeben werden
PARSERFUNCS_LISTCMD_CMD_FFT_[EVAL]=						fft          OB [-PAR]                  - Berechnet die Fourier-Transformation des Datensatzes OB. Durch den Parameter kann von reeller auf komplexe Darstellung oder auf inverse Transformation umgeschalten werden. Außerdem kann die Zieltabelle durch den Parameter vorgegeben werden
PARSERFUNCS_LISTCMD_CMD_FIND_[MAINCTRL]=				find         NM                         - Führt eine Stichwortsuche zu dem Begriff NM in NumeRe aus
PARSERFUNCS_LISTCMD_CMD_FITW_[EVAL]=					fitw         OB -PAR                    - Passt eine Funktion an die Daten in OB, deren Fehlerwerte (Gewichtungsfaktoren) berücksichtigt werden, über eine Parametervariation an. Durch Parameter können anzupassende Funktion und Fitparameter inklusiver ihrer Startwerte vorgegeben werden. Außerdem können Restriktionen für die Fitparameter gesetzt werden oder eine Chi-Map berechnet werden
PARSERFUNCS_LISTCMD_CMD_FIT_[EVAL]=						fit          OB -PAR                    - Passt eine Funktion an die Daten in OB über eine Parametervariation an. Durch Parameter können anzupassende Funktion und Fitparameter inklusiver ihrer Startwerte vorgegeben werden. Außerdem können Restriktionen für die Fitparameter gesetzt werden oder eine Chi-Map berechnet werden
PARSERFUNCS_LISTCMD_CMD_FOR_[FLOWCTRL]=					for          (EX)                       - Startet die Definition einer Zählschleife. Der Index der Schleife muss in der Form INDEX = START:ENDE im Ausdruck EX angegeben werden
PARSERFUNCS_LISTCMD_CMD_FWT_[EVAL]=						fwt          OB -PAR                    - Berechnet die Wavelet-Transformation des Datensatzes OB. Der Typ und der Grad des verwendeten Basis-Wavelets können durch Parameter vorgegeben werden. Außerdem kann auf inverse Transformation oder Erzeugung eines Datengitters umgeschalten werden. Die Zieltabelle kann ebenso vorgegeben werden
PARSERFUNCS_LISTCMD_CMD_GAUGE_[GUI]=					gauge        [-set PAR]                 - Fügt einen Fortschrittsbalken in ein Window-Layout ein. Der Startwert und die Ausrichtung sind konfigurierbar
PARSERFUNCS_LISTCMD_CMD_GET_[MAINCTRL]=					get          -PAR  -> {ARG}             - Gibt den Wert der angefragten Programmeinstellung zurück. Durch den Parameter kann der Typ der Rückgabe beeinflusst werden
PARSERFUNCS_LISTCMD_CMD_GLOBAL_[MISC]=					global       EX/CMD                     - Deklariert den Ausdruck EX oder das Kommando CMD als global
PARSERFUNCS_LISTCMD_CMD_GRAD3D_[PLOTTING]=				grad3d       EX [-set PAR]              - Erzeugt einen 3D-Gradienten-Plots aus dem Ausdruck EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_GRAD_[PLOTTING]=				grad         EX [-set PAR]              - Erzeugt einen Gradienten-Plot aus dem Ausdruck oder den Daten in EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_GRAPHER_[GUI]=					grapher      [-set PAR]                 - Fügt ein Graph-Objekt in ein Window-Layout ein. Das Eventhandling und die Größe des Objekts sind konfigurierbar. Das Befüllen dieses Objekts muss über ein Plotting-Kommando mit der "streamto={WINID,ITEMID}"-Option erfolgen
PARSERFUNCS_LISTCMD_CMD_GRIDROT_[EVAL]=					gridrot      OB -set PAR                - Rotiert das angegebene Datengitter um einen definierten Winkel und speichert das Ergebnis in der gewünschten Zieltabelle
PARSERFUNCS_LISTCMD_CMD_GROUP_[GUI]=					group        [-PAR]                     - Startet die Definition einer Gruppierungsbox für ein Window-Layout. Die Box kann beschriftet und definiert ausgerichtet werden. Mit den Parametern sind auch weitere Styles wie Registerkarten oder Menüs möglich
PARSERFUNCS_LISTCMD_CMD_HELP_[MAINCTRL]=				help         [NM]                       - Öffnet den Artikel der NumeRe-Hilfe zu dem Thema NM
PARSERFUNCS_LISTCMD_CMD_HIST2D_[EVAL]=					hist2d       OB [-set PAR]              - Erzeugt ein 2D-Histogramm eines (x,y,z)-Datensatzes. Erwartet entweder ein Datengitter oder (x,y,z)-Tupel in OB. Das Histogramm kann auf viele Arten modifiziert werden. Siehe hierzu "help hist"
PARSERFUNCS_LISTCMD_CMD_HIST_[EVAL]=					hist         OB [-set PAR]              - Erzeugt ein Histogramm der Daten in OB. Das Histogramm kann auf viele Arten modifiziert werden. Siehe hierzu "help hist"
PARSERFUNCS_LISTCMD_CMD_HLINE_[MISC]=					hline        [-PAR]                     - Zeichnet eine horizontale Doppellinie. Mit "-single" wird eine Einfachlinie gezeichnet
PARSERFUNCS_LISTCMD_CMD_IFNDEFINED_[DEF]=				ifndefined   EX [-set PAR]              - Prüft vor der Definition, ob die zu definierende Funktion in EX nicht schon bereits definiert wurde, wobei die Funktion als NAME(ARG) := AUSDRUCK(ARG) angegeben werden muss. Parameter erlauben ein Kommentieren der Funktion und das Ersetzen von Variablen durch ihre Werte
PARSERFUNCS_LISTCMD_CMD_IF_[FLOWCTRL]=					if           (EX)                       - Startet die Definition einer IF-Verzweigung. Der Ausdruck EX muss logisch interpretierbar sein
PARSERFUNCS_LISTCMD_CMD_IMPLOT_[PLOTTING]=				implot       EX [-set PAR]              - Erzeugt eine Darstellung des Ausdrucks oder Datensatzes als Bild, wobei automatisch ein Datenpunktintervall von [0,255] angenommen wird. Kann mit anderen Plotstilen kombiniert werden
PARSERFUNCS_LISTCMD_CMD_IMREAD_[LOADSAVE]=				imread       NM  -> {VAL}               - Liest die Bildatei NM als Datengitter in die Tabelle "image()". Die Zieltabelle kann mittels Optionen geändert werden. Gibt die Indices des Bildes in der Zieltabelle zurück
PARSERFUNCS_LISTCMD_CMD_IMROT_[EVAL]=					imrot        OB -set PAR                - Rotiert den angegebenen Bilddatensatz um einen definierten Winkel und speichert das Ergebnis in der gewünschten Zieltabelle
PARSERFUNCS_LISTCMD_CMD_INCLUDE_[MAINCTRL_FLOWCTRL]=	include      NM [:: ARGS]               - Bindet Informationen aus der Datei NM an dieser Stelle in die aktuelle ausführbare Datei ein. Informationen können globale Ausdrücke, Definitionen oder Deklarationen sein. Die Art der Informationen lassen sich auswählen
PARSERFUNCS_LISTCMD_CMD_INSTALL_[MAINCTRL]=				install      NM                         - Führt die Installationsroutinen im Script NM aus. Kann nur von der Konsole aus verwendet werden
PARSERFUNCS_LISTCMD_CMD_INTEGRATE_[EVAL]=				integrate    EX -set PAR  -> {VAL}      - Integriert den Ausdruck oder die Daten in EX numerisch. Ein Ausdruck kann dabei auch zweidimensional integriert werden. Die Integrationsintervalle müssen als Parameter übergeben werden. Außerdem kann die Genauigkeit und die Methode ausgewählt werden ebenso wie die Rückgabe der numerisch bestimmten Stammfunktion
PARSERFUNCS_LISTCMD_CMD_LAMP_[GUI]=						lamp         [-set PAR]                 - Fügt eine kleine Lampe in ein Window-Layout ein. Der Startwert ist konfigurierbar
PARSERFUNCS_LISTCMD_CMD_LAYOUT_[GUI]=					layout       [-PAR]                     - Startet die Definition eines Window-Layouts, das zur Erzeugung eines interaktiven Fensters verwendet werden kann
PARSERFUNCS_LISTCMD_CMD_LCLFUNC_[DEF]=					lclfunc      EX [-set PAR]              - Definiert die Funktion in EX für die Verwendung im aktuellen Script oder der aktuellen Prozedur, wobei die Funktion als NAME(ARG) := AUSDRUCK(ARG) angegeben werden muss. Parameter erlauben ein Kommentieren der Funktion und das Ersetzen von Variablen durch ihre Werte. Die Funktion wird am Ende des aktuellen Scopes automatisch entfernt
PARSERFUNCS_LISTCMD_CMD_LEAVE_[FLOWCTRL]=				leave                                   - Verlässt sämtliche ineinander verschachtelte Kontrollflussblöcke an dieser Stelle und der Code wird nach dem Ende des äußersten Blocks fortgesetzt
PARSERFUNCS_LISTCMD_CMD_LIST_[MAINCTRL]=				list         NM                         - Erzeugt eine Auflistung der Werte, die zum gewählten Argument NM vorhanden sind. Die möglichen Argumente sind unter "help list" aufgelistet
PARSERFUNCS_LISTCMD_CMD_LOAD_[LOADSAVE]=				load         NM [-PAR]  -> {VAL}        - Lädt die Daten aus der Datei NM in das data()-Objekt. Durch Parameter können mehrere Dateien zugleich geladen werden bzw. direkt in eine Zieltabelle geschrieben werden. Gibt die Indices der Daten in der Zieltabelle zurück
PARSERFUNCS_LISTCMD_CMD_MATOP_[EVAL]=					matop        EX                         - Wertet den Ausdruck EX mit dem Matrixmodus aus. ("mtrxop" ist ein Synonym)
PARSERFUNCS_LISTCMD_CMD_MENUITEM_[GUI]=					menuitem     EX [-set PAR]              - Definiert ein Eintrag in einem Menü für ein Window-Layout. Das Eventhandling und das Vorhandensein einer Checkbox sind konfigurierbar
PARSERFUNCS_LISTCMD_CMD_MESH3D_[PLOTTING]=				mesh3d       EX [-set PAR]              - Erzeugt ein 3D-Gitterplot aus dem Ausdruck EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_MESH_[PLOTTING]=				mesh         EX [-set PAR]              - Erzeugt ein Gitterplot aus dem Ausdruck oder den Daten in EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_MOVE_[MAINCTRL]=				move         OB -PAR                    - Verschiebt (je nach Ausdruck in OB) Einträge/ Spalten/ Untertabellen in Tabellen oder ganze Dateien. Durch Parameter können Zieltabelle oder -dateiname vorgegeben oder die Daten ggf. transponiert oder mehrere Dateien ausgewählt werden
PARSERFUNCS_LISTCMD_CMD_NAMESPACE_[PROC]=				namespace    [NM]                       - Wechselt den Namensraum in Prozeduren zum Namensraum NM
PARSERFUNCS_LISTCMD_CMD_NEW_[MAINCTRL]=					new          EX                         - Erzeugt abhängig vom Ausdruck EX neue Verzeichnisse, Scripte, Prozeduren, Dateien oder Tabellen
PARSERFUNCS_LISTCMD_CMD_ODESOLVE_[EVAL]=				odesolve     EX -set PAR                - Löst die als Ausdruck EX übergebenen Differentialgleichungen erster Ordnung numerisch. Das Integrationsintervall sowie die Startwerte müssen durch Parameter angegeben werden. Zusätzlich können die Methode, die Zahl der Integrationsschritte, die Zieltabelle, die Algorithmustoleranzen gesetzt werden und der Lyapunov-Exponent berechnet werden
PARSERFUNCS_LISTCMD_CMD_PACK_[MAINCTRL]=				pack         STR -set PAR               - Packt die referenzierten Dateien in STR in eine gemeinsame Archivdatei. Der Archivtyp (ZIP, TAR, GZIP) kann angegeben werden oder er wird aus dem Zieldateinamen bestimmt
PARSERFUNCS_LISTCMD_CMD_PLOT3D_[PLOTTING]=				plot3d       EX [-set PAR]              - Erzeugt einen 3D-Graphen des Ausdrucks oder der Daten in EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_PLOT_[PLOTTING]=				plot         EX [-set PAR]              - Erzeugt einen Graph des Ausdrucks oder der Daten in EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_PRINT_[MISC_MAINCTRL]=			print        STR                        - Gibt den übergebenen String STR ohne die umgebenden Anführungszeichen als Bildschirmmeldung aus
PARSERFUNCS_LISTCMD_CMD_PROCEDURE_[FLOWCTRL_PROC]=		procedure    \$NM(ARGS)                  - Definiert Name NM und Argumentliste ARGS der NumeRe-Prozedur
PARSERFUNCS_LISTCMD_CMD_PROGRESS_[MISC_FLOWCTRL]=		progress     EX [-set PAR]              - Gibt den Fortschittsstatus EX aus. Nur für Scripte und Prozeduren geeignet. Der erste und der letzte Wert sowie der Typ der Anzeige kann durch Parameter bestimmt werden
PARSERFUNCS_LISTCMD_CMD_PROP_[GUI]=						prop         EX                         - Generiert eine oder mehrere neue interne Variablen für das aktuelle Window-Layout, die mit Informationen befüllt werden können. Die Variablen sind intrinsisch typlos und können sowohl numerische Werte als auch Zeichenketten enthalten
PARSERFUNCS_LISTCMD_CMD_PSO_[EVAL]=						pso          EX [-set PAR]  -> {VAL}    - Verwendet einen Partikelschwarm-Optimierer, um das globale Minimum im Ausdruck zu finden. Der Ausdruck kann bis zu vierdimensional sein, sofern dafür Intervalle vorgegeben wurden
PARSERFUNCS_LISTCMD_CMD_PULSE_[EVAL]=					pulse        OB  -> {VAL}               - Bestimmt die Pulseigenschaften des übergebenen Datensatzes OB
PARSERFUNCS_LISTCMD_CMD_QRCODE_[MISC]=					qrcode       STR [-set PAR]             - Erzeugt einen QR-Code aus dem Inhalt der übergebenen Zeichenkette und speichert ihn als SVG am gewählten Ort
PARSERFUNCS_LISTCMD_CMD_QUIT_[MAINCTRL]=				quit         [-PAR]                     - Beendet NumeRe. Der Parameter hat Einfluss auf die Erzeugung eines Auto-Saves
PARSERFUNCS_LISTCMD_CMD_RADIO_[GUI]=					radio        EX [-set PAR]              - Fügt eine Radio-Group in ein Window-Layout ein. Das Eventhandling und der Startwert sind konfigurierbar
PARSERFUNCS_LISTCMD_CMD_RANDOM_[DATACREATION]=			random       -PAR                       - Generiert einen Satz an Zufallszahlen abhängig von der gewählten Verteilung und deren Parametersatz. Die Liste der Parameter ist unter "help random" verfügbar
PARSERFUNCS_LISTCMD_CMD_READLINE_[PROC]=				readline     [-PAR]  -> {ARG}           - Ermöglicht eine formatierte Wertabfrage und das direkte Konvertieren des Wertes in einen numerischen Wert oder eine Zeichenkette. Der Parametersatz umfasst das Ausgeben einer Nachricht, Angeben eines Standardwertes und Konversionsschalter
PARSERFUNCS_LISTCMD_CMD_READ_[LOADSAVE]=				read         NM [-PAR]  -> {STR}        - Liest den Inhalt der Datei NM zeilenweise als Zeichenketten ein. Durch einen Parameter kann ein Kommentarzeichen definiert werden. Binärdateien können hiermit nicht gelesen werden
PARSERFUNCS_LISTCMD_CMD_REDEFINE_[DEF]=					redefine     EX [-set PAR]              - Überschreibt die bisherige Funktionsdefinition mit dem Ausdruck EX, wobei die Funktion als NAME(ARG) := AUSDRUCK(ARG) angegeben werden muss. Parameter erlauben ein Kommentieren der Funktion, ein rekursives Definieren und das Ersetzen von Variablen durch ihre Werte
PARSERFUNCS_LISTCMD_CMD_REGULARIZE_[EVAL]=				regularize   OB [-PAR]                  - Regularisiert Datenreihen in OB. Unregelmäßig verteilte x-Werte werden dadurch regelmäßig verteilt. Durch den Parameter kann die Zahl der x-Werte geändert werden
PARSERFUNCS_LISTCMD_CMD_RELOAD_[LOADSAVE]=				reload       [NM -PAR]  -> {VAL}        - Aktualisiert die Daten im Speicher, wenn sie z.B. extern bearbeitet wurden. Es kann ein neuer Dateiname angegeben werden. Entspricht dem Kommando "load NM [-PAR] -ignore", wobei für NM ggf. der Name der bereits geladenen Datei verwendet wird
PARSERFUNCS_LISTCMD_CMD_REMOVE_[MAINCTRL]=				remove       OB [-PAR]                  - Entfernt die Tabelle oder die angegebene Datei in OB unwiderbringlich von diesem Computer. Durch den Parameter kann die eventuell nötige Bestätigung unterdrückt oder mehrere Dateien ausgewählt werden
PARSERFUNCS_LISTCMD_CMD_RENAME_[DATACTRL]=				rename       OB, NM                     - Benennt eine vorhandene Tabelle um
PARSERFUNCS_LISTCMD_CMD_RESAMPLE_[EVAL]=				resample     OB -PAR                    - Ändert die Samplefrequenz der Datenreihen in OB. Die neue Zahl der Stützstellen und die Anwendung des Kommandos auf nur spezifische Richtungen kann mittels Parameter eingestellt werden
PARSERFUNCS_LISTCMD_CMD_RETHROW_[FLOWCTRL_PROC]=		rethrow                                 - Reicht den Fehler, der im aktuellen catch-Block verarbeitet wird, an umgebende try-catch-Blöcke oder zuletzt an die Konsole weiter
PARSERFUNCS_LISTCMD_CMD_RETOUCH_[EVAL]=					retouch      OB [-PAR]                  - Entfernt ungültige Werte aus dem  Datensatz OB. Die Anwendung des Kommandos auf nur spezifische Richtungen kann mittels Parameter eingestellt werden
PARSERFUNCS_LISTCMD_CMD_RETURN_[FLOWCTRL_PROC]=			return       [EX]                       - Deklariert den Rückgabewert der Prozedur durch den Ausdruck EX. Kann auch verwendet werden, um ein Script in der aktuellen Zeile zu verlassen
PARSERFUNCS_LISTCMD_CMD_SAVE_[LOADSAVE]=				save         OB [-PAR]                  - Speichert die Daten im Objekt OB unter dem gewählten Dateinamen ab. Der Dateiname ist durch den Parameter anzugeben
PARSERFUNCS_LISTCMD_CMD_SCRIPT_[MISC_MAINCTRL]=			script       -PAR                       - Scripte laden und starten
PARSERFUNCS_LISTCMD_CMD_SEEK_[LOADSAVE]=				seek         EX -set PAR  -> VAL        - Liest ein Abschnitt einer WAVE-Datei, wobei die Startposition und die Zahl der Elemente durch den Ausdruck angegeben werden müssen
PARSERFUNCS_LISTCMD_CMD_SEPARATOR_[GUI]=				separator    EX [-set PAR]              - Fügt ein Separator-Objekt in ein Window-Layout ein. Der Separator kann entweder eine vertikale oder horizontale Linie oder ein Leerraum sein. Bei Verwendung in Menüs ist der Separator immer eine horizontale Linie
PARSERFUNCS_LISTCMD_CMD_SET_[MAINCTRL]=					set          -PAR                       - Ändert den Wert der gewählten Programmeinstellung oder leitet die Optionenliste zum aktuellen Kommando ein. Eine Liste aller Programmeinstellungen findet sich unter "help set"
PARSERFUNCS_LISTCMD_CMD_SHOW_[DATACTRL]=				show         OB                         - Zeigt den Inhalt des Datenobjekts OB an
PARSERFUNCS_LISTCMD_CMD_SLIDER_[GUI]=					slider       [-set PAR]                 - Fügt ein Schieberegler in ein Window-Layout ein. Das Eventhandling und der Startwert sind konfigurierbar
PARSERFUNCS_LISTCMD_CMD_SMOOTH_[EVAL]=					smooth       OB -PAR                    - Verringert das Rauschen auf Datenreihen in OB gemäß einer gewählten Ordnung der Linearisierung. Die Ordnung der Linearisierung und die Anwendung des Kommandos auf nur spezifische Richtungen kann mittels Parameter eingestellt werden
PARSERFUNCS_LISTCMD_CMD_SORT_[DATACTRL]=				sort         OB [-PAR]  -> {VAL}        - Sortiert den Datensatz OB. Die zu verwendenden Indexspalten, die Sortierrichtung und die Rückgabe eines Sortiervektors kann mittels Parameter ausgewählt werden
PARSERFUNCS_LISTCMD_CMD_SPINBUT_[GUI]=					spinbut      [-set PAR]                 - Fügt ein Spin-Button-Objekt in ein Window-Layout ein. Das Eventhandling und der Startwert sind konfigurierbar
PARSERFUNCS_LISTCMD_CMD_SPLINE_[EVAL]=					spline       OB                         - Berechnet kubische Splines für die gegebenen Datenpunkte OB und definiert sie als Funktion
PARSERFUNCS_LISTCMD_CMD_START_[MISC]=					start        NM                         - Startet das Script NM
PARSERFUNCS_LISTCMD_CMD_STATICTEXT_[GUI]=				statictext   EX [-set PAR]              - Fügt einen statischen Text in ein Window-Layout ein
PARSERFUNCS_LISTCMD_CMD_STATS_[EVAL]=					stats        OB [-PAR]  -> {STR}        - Berechnet die Statistiken des Datensatzes OB. Diese können in einer Tabelle gespeichert (das Kommando gibt in diesem Fall die Bezeichnung der Zeilen zurück) oder gleich in eine Datei exportiert werden, wenn der entsprechende Parameter übergeben wird
PARSERFUNCS_LISTCMD_CMD_STFA_[EVAL]=					stfa         OB [-PAR]                  - Bestimmt eine Kurzzeit-Fourieranalyse des übergebenen Datensatzes OB und speichert sie als neues Datengitter. Parameter erlauben die Änderung der Fensterbreite und die Anpassung der Zieltabelle
PARSERFUNCS_LISTCMD_CMD_STR_[PROC]=						str          EX                         - Definiert den lokalen Zeichenkettenvariablensatz in der Prozedur durch den Ausdruck EX
PARSERFUNCS_LISTCMD_CMD_SUBPLOT_[PLOTTING]=				subplot      [EX -set PAR]              - Startet einen neuen Unterplot im multiplot-Modus von compose. Parameter erlauben die Vergrößerung des Unterplots über mehrere Spalten und Zeilen des angelegten Gitters
PARSERFUNCS_LISTCMD_CMD_SURF3D_[PLOTTING]=				surf3d       EX [-set PAR]              - Erzeugt einen 3D-Oberflächen-Plot aus dem Ausdruck EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_SURF_[PLOTTING]=				surf         EX [-set PAR]              - Erzeugt einen Oberflächen-Plot aus dem Ausdruck oder den Daten in EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_SWAP_[DATACTRL]=				swap         OB1, OB2                   - Tauscht den Inhalt einer Tabelle mit dem Inhalt einer anderen aus
PARSERFUNCS_LISTCMD_CMD_SWITCH_[FLOWCTRL]=				switch      (EX)                        - Startet eine Auswahlverzweigung, die mindestens einen 'case' enthalten muss. Der Ausdruck EX muss numerisch oder eine Zeichenkettenausdruck sein
PARSERFUNCS_LISTCMD_CMD_TABLEGRID_[GUI]=				tablegrid    [-set PAR]                 - Fügt ein Tabellengitter in ein Window-Layout ein. Das Eventhandling und die Startgröße in Zeilen und Spalten sind konfigurierbar
PARSERFUNCS_LISTCMD_CMD_TABROT_[EVAL]=					tabrot       OB -set PAR                - Rotiert die angegebene Tabelle um einen definierten Winkel und speichert das Ergebnis in der gewünschten Zieltabelle
PARSERFUNCS_LISTCMD_CMD_TAB_[PROC]=						tab          EX                         - Definiert die lokalen Tabellen in der Prozedur durch den Ausdruck EX
PARSERFUNCS_LISTCMD_CMD_TAYLOR_[EVAL]=					taylor       EX -set PAR  -> {VAL}      - Entwickelt den Ausdruck EX in ein Taylorpolynom der Ordnung n, definert es als Funktion und gibt die entsprechenden Koeffizienten zurück. Die Variable und die Position der Entwicklung muss durch Parameter übergeben werden. Außerdem kann die Ordnung der Entwicklung geändert werden.
PARSERFUNCS_LISTCMD_CMD_TEXTFIELD_[GUI]=				textfield    EX [-set PAR]              - Fügt ein Textfeld in ein Window-Layout ein. Das Eventhandling, die Mehrzeiligkeit und der Startwert sind konfigurierbar
PARSERFUNCS_LISTCMD_CMD_THROW_[FLOWCTRL_PROC]=			throw        [STR]                      - Bricht die Auswertung der Prozedur im Fehlerfall ab und gibt die Fehlermeldung STR auf der Konsole aus
PARSERFUNCS_LISTCMD_CMD_TREELIST_[GUI]=					treelist     [-set PAR]                 - Fügt eine Treelist in ein Window-Layout ein. Das Eventhandling, die Zahl der Spalten und die Zahl der Elemente sind konfigurierbar
PARSERFUNCS_LISTCMD_CMD_TRY_[FLOWCTRL]=					try                                     - Beginnt einen Try-Catch-Block, in dem Fehler abgefangen und behandelt werden können
PARSERFUNCS_LISTCMD_CMD_UNDEFINE_[DEF]=					undefine     EX                         - Entfernt die Funktionsdefinition die dem Ausdruck EX entspricht
PARSERFUNCS_LISTCMD_CMD_UNINSTALL_[MAINCTRL]=			uninstall    NM                         - Entfernt das Plugin NM. Kann nur von der Konsole aus verwendet werden
PARSERFUNCS_LISTCMD_CMD_UNPACK_[MAINCTRL]=				unpack       STR [-set PAR]  -> {STR}   - Entpackt eine Archivdatei (ZIP, TAR, GZIP), erstellt die enthaltene Dateistruktur am Zielort und gibt die Liste der erzeugten Dateien zurück. Wenn kein Zielort vorgegeben wird, wird nur eine Liste der enthaltenen Dateien zurückgegeben
PARSERFUNCS_LISTCMD_CMD_URL_[MISC_LOADSAVE_MAINCTRL]=	url          STR [-PAR]  -> ARG         - Erlaubt Zugriff auf Online-Ressourcen über die HTTP(S)- und (S)FTP-Protokolle. JavaScript wird dabei nicht interpretiert. Es können auch Dateien heruntergeladen werden, wenn über den Parameter "file" eine Zieldatei vorgegeben wird. Hinweis: Zertifikate werden nicht validiert, daher eignet sich dieses Kommando nicht zum Austausch sensibler Informationen
PARSERFUNCS_LISTCMD_CMD_VAR_[PROC]=						var          EX                         - Definiert den lokalen Variablensatz in der Prozedur durch den Ausdruck EX
PARSERFUNCS_LISTCMD_CMD_VECT3D_[PLOTTING]=				vect3d       EX [-set PAR]              - Erzeugt einen 3D-Vektorfeldplot aus dem Ausdruckl EX. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_VECT_[PLOTTING]=				vect         EX [-set PAR]              - Erzeugt einen (2D-)Vektorfeldplot aus dem Ausdruck EX oder aus komplexwertigen Daten einer Tabelle. Der Plot kann auf viele Arten modifiziert werden. Siehe hierzu "help plotoptions"
PARSERFUNCS_LISTCMD_CMD_WARN_[MAINCTRL]=				warn         STR                        - Zeigt die Zeichenkette STR als Warnung in der Konsole an
PARSERFUNCS_LISTCMD_CMD_WHILE_[FLOWCTRL]=				while        (EX)                       - Startet die Definition einer While-Schleife. Der Ausdruck EX muss logisch interpretierbar sein
PARSERFUNCS_LISTCMD_CMD_WINDOW_[MAINCTRL_GUI]=			window       EX [-set PAR]  -> {ARG}    - Erlaubt die Erzeugung eines interaktiven Fensters und die Interaktion mit selbigem. Mit "window ID -get PAR" können Werte und Parameter des Fensters mit der ID gelesen und mit "window ID -set PAR=VAL" können diese auch modifiziert werden
PARSERFUNCS_LISTCMD_CMD_WORKPATH_[MISC_MAINCTRL]=		workpath     NM                         - Ändert das Arbeitsverzeichnis der aktuellen NumeRe-Sitzung zum Verzeichnis NM
PARSERFUNCS_LISTCMD_CMD_WRITE_[LOADSAVE]=				write        STR -set PAR               - Schreibt die Zeichenketten STR zeilenweise in die gewählte Datei. Der Dateiname ist durch den Parametersatz zu definieren. Außerdem können die umfassenden Anführungszeichen unterdrückt werden und der Schreibmodus vorgegeben werden
PARSERFUNCS_LISTCMD_CMD_ZEROES_[EVAL]=					zeroes       EX -set PAR  -> {VAL}      - Bestimmt die Nullstellen des Ausdrucks oder der Daten in EX numerisch. Das Intervall ist über den Parameter anzugeben. Außerdem kann die Zahl der Stützstellen sowie die Einschränkung auf Auf- oder Absteigende Nullstellen durch Parameter erreicht werden
# Ende der Kommandotabelle
PARSERFUNCS_LISTCMD_FOOTNOTE1=Die Syntax ist schematisch angegeben: EX = Ausdruck, PAR = Parameter, OB = (Daten-)Objekt, STR = Zeichenkette, CMD = Kommando und NM = Name. Syntaxelemente in eckigen Klammern sind optional.
PARSERFUNCS_LISTCMD_FOOTNOTE2=SIEHE AUCH: Zu jedem der gelisteten Befehle existiert ein Hilfeeintrag, der durch "help BEFEHL" aufgerufen werden kann.
# List units
PARSERFUNCS_LISTUNITS_HEADLINE=Einheitenumrechnungen
PARSERFUNCS_LISTUNITS_SYMBOL=Symbol
PARSERFUNCS_LISTUNITS_DESCRIPTION=Bezeichnung
PARSERFUNCS_LISTUNITS_DIMENSION=Dimension
PARSERFUNCS_LISTUNITS_UNIT=Umrechnung  Einheit
PARSERFUNCS_LISTUNITS_UNIT_ANGSTROEM=(Angstroem)
PARSERFUNCS_LISTUNITS_UNIT_ASTRO_UNIT=(Astro. Einheit)
PARSERFUNCS_LISTUNITS_UNIT_BARN=(barn)
PARSERFUNCS_LISTUNITS_UNIT_CALORY=(Kalorie)
PARSERFUNCS_LISTUNITS_UNIT_CURIE=(Curie)
PARSERFUNCS_LISTUNITS_UNIT_ELECTRONVOLT=(Elektronenvolt)
PARSERFUNCS_LISTUNITS_UNIT_FERMI=(Fermi)
PARSERFUNCS_LISTUNITS_UNIT_FOOT=(Foot)
PARSERFUNCS_LISTUNITS_UNIT_GAUSS=(Gauss)
PARSERFUNCS_LISTUNITS_UNIT_INCH=(inch)
PARSERFUNCS_LISTUNITS_UNIT_VELOCITY=(Geschwindigkeit)
PARSERFUNCS_LISTUNITS_UNIT_KNOTS=(Knoten)
PARSERFUNCS_LISTUNITS_UNIT_LITERS=(Liter)
PARSERFUNCS_LISTUNITS_UNIT_LIGHTYEAR=(Lichtjahr)
PARSERFUNCS_LISTUNITS_UNIT_MILE=(Meile)
PARSERFUNCS_LISTUNITS_UNIT_MOL=(Stoffmenge)
PARSERFUNCS_LISTUNITS_UNIT_POISE=(Poise)
PARSERFUNCS_LISTUNITS_UNIT_PARSEC=(Parsec)
PARSERFUNCS_LISTUNITS_UNIT_PSI=(Pounds/inch^2)
PARSERFUNCS_LISTUNITS_UNIT_CELSIUS=(Celsius)
PARSERFUNCS_LISTUNITS_UNIT_FAHRENHEIT=(Fahrenheit)
PARSERFUNCS_LISTUNITS_UNIT_TORR=(mmHg)
PARSERFUNCS_LISTUNITS_UNIT_YARD=(Yard)
PARSERFUNCS_LISTUNITS_FOOTNOTE=Die Dimensionen der Einheiten sind durch die Abkürzungen L, M, T, ... gegeben. Dabei steht L für "Länge", M für "Masse", T für "Zeit", N für "Menge" und Theta für "Temperatur".
# Tooltips
GUI_EDITOR_CALLTIP_PROC1=%%COMMON_FILETYPE_NPRC%%:
GUI_EDITOR_CALLTIP_PROC2=Klicke rechts, um die Definition zu suchen
GUI_EDITOR_CALLTIP_PROC_PARAMS=Parameter dieser Prozedur
GUI_EDITOR_CALLTIP_PROC_REMARK=Anmerkung
GUI_EDITOR_CALLTIP_...=			...            - Ermöglicht eine beliebige Zahl an Argumenten
GUI_EDITOR_CALLTIP_ANS=			ans            - Enthält das Ergebnis der letzten Berechnung
GUI_EDITOR_CALLTIP_TABLE=		table()  {}    - Standard-Tabellen-Objekt. Der Inhalt kann modifiziert werden
GUI_EDITOR_CALLTIP_DATA=		data()   {}    - Dediziertes Daten-Tabellen-Objekt. Enthält alle geladenen Daten
GUI_EDITOR_CALLTIP_FALSE=		false          - Konstante für 0
GUI_EDITOR_CALLTIP_I=			I              - Konstante für den imaginären Wert 1i
GUI_EDITOR_CALLTIP_INF=			inf            - Konstante für den symbolischen Wert Unendlich
GUI_EDITOR_CALLTIP_NAN=			nan            - Konstante für keinen (darstellbaren) Wert
GUI_EDITOR_CALLTIP_STRING=		string() {}    - String-Objekt. Kann beliebig viele Zeichenketten enthalten
GUI_EDITOR_CALLTIP_TRUE=		true           - Konstante für 1
GUI_EDITOR_CALLTIP_VOID=		void           - Konstante für den leeren Wert. Wird teilweise auch als 'nan' interpretiert
GUI_EDITOR_CALLTIP_NLINES=		nlines         - Enthält die Zahl der Zeilen des aktuellen Datenzugriffs (Alias für "nrows")
GUI_EDITOR_CALLTIP_NROWS=		nrows          - Enthält die Zahl der Zeilen des aktuellen Datenzugriffs
GUI_EDITOR_CALLTIP_NCOLS=		ncols          - Enthält die Zahl der Spalten des aktuellen Datenzugriffs
GUI_EDITOR_CALLTIP_NLEN=		nlen           - Enthält die Zahl der Elemente im aktuell zugriffenen Cluster
GUI_EDITOR_CALLTIP_THROWN=		thrown         - Fehlertyp, der durch "throw" generiert wird
GUI_EDITOR_CALLTIP_ERROR=		error          - Fehlertyp für Syntaxfehler
GUI_EDITOR_CALLTIP_ASSERTION=	assertion      - Fehlertyp für fehlgeschlagene Überprüfungen mittels "assert"
GUI_EDITOR_CALLTIP_EXPRESSION=	expression     - Fehlertyp für Fehler in mathematischen Ausdrücken
GUI_EDITOR_CALLTIP_ENUM=		enum -> {...}  - Deklariert in Kombination mit "declare" für die aktuelle Datei eine Enumeration der in geschweiften Klammern angegebenen Symbole. Es können ganzzahlige Konstanten als Werte vorgegeben oder es kann sich auf vorherige Werte bezogen werden, d.h. "enum -> {VAL1 = 1, VAL2 = VAL1, ...}"
# Argument types
GUI_EDITOR_ARGCALLTIP_STR=%%1%%: String
GUI_EDITOR_ARGCALLTIP_CHR=%%1%%: Char
GUI_EDITOR_ARGCALLTIP_MAT=%%1%%: Matrix
GUI_EDITOR_ARGCALLTIP_INTEGER=%%1%%: Integer
GUI_EDITOR_ARGCALLTIP_FLOAT=%%1%%: Value
GUI_EDITOR_ARGCALLTIP_TIME=%%1%%: Date-Time
GUI_EDITOR_ARGCALLTIP_BOOL=%%1%%: Logical
GUI_EDITOR_ARGCALLTIP_TABLE=%%1%%: Tabelle
GUI_EDITOR_ARGCALLTIP_CLUSTER=%%1%%: Cluster
GUI_EDITOR_ARGCALLTIP_ANY=%%1%%: Any
GUI_EDITOR_ARGCALLTIP_REPEATTYPE=Weitere mit gleichem Typ
GUI_EDITOR_ARGCALLTIP_REFERENCE=als Referenz
GUI_EDITOR_ARGCALLTIP_VECTOR=als Vektor
# Option tooltips
GUI_EDITOR_CALLTIP_COMMON_CONVERSION=Konversion
GUI_EDITOR_CALLTIP_COMMON_PLOTTING=Plotoption
GUI_EDITOR_CALLTIP_COMMON_GUI=Option für graphische Oberflächen
GUI_EDITOR_CALLTIP_COMMON_FONTTYPE=Schriftart
GUI_EDITOR_CALLTIP_COMMON_FILEWRITE=Dateischreibmodus
GUI_EDITOR_CALLTIP_COMMON_FILEREAD=Dateilesemodus
GUI_EDITOR_CALLTIP_COMMON_SETTING=Einstellung
GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR=Option für
GUI_EDITOR_CALLTIP_COMMON_METHODFOR=Methode für
GUI_EDITOR_CALLTIP_OPT_ACCUM=counts=accum [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% hist2d]
GUI_EDITOR_CALLTIP_OPT_ADDXAXIS=addxaxis=(MIN,MAX,[LABEL[,COLOR]]) [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ADDYAXIS=addyaxis=(MIN,MAX,[LABEL[,COLOR]]) [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ADVENTOR=adventor [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_ALIGN=align=ALIGNSTRING [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_ALL=all
GUI_EDITOR_CALLTIP_OPT_ALLMEDIUM=hires=allmedium [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ALPHA=alpha[=VAL]
GUI_EDITOR_CALLTIP_OPT_ALPHAMASK=alphamask [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ANIMATE=animate[=FRAMES] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_APP=mode=app [%%GUI_EDITOR_CALLTIP_COMMON_FILEWRITE%%]
GUI_EDITOR_CALLTIP_OPT_AREA=area [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ASAVG=counts=asavg [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% hist2d]
GUI_EDITOR_CALLTIP_OPT_ASGRID=asgrid [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% hist]
GUI_EDITOR_CALLTIP_OPT_ASPECT=aspect=VAL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ASSTR=asstr [%%GUI_EDITOR_CALLTIP_COMMON_CONVERSION%%]
GUI_EDITOR_CALLTIP_OPT_ASVAL=asval[={VARSET}] [%%GUI_EDITOR_CALLTIP_COMMON_CONVERSION%%]
GUI_EDITOR_CALLTIP_OPT_ATTRACT=attract={VAL,VAL} [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% detect]
GUI_EDITOR_CALLTIP_OPT_AUTOSAVE=autosave [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_AXIS=axis[=TYPE] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_AXISBIND=axisbind="rltb" [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_AXISSHIFT=axisshift [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fft]
GUI_EDITOR_CALLTIP_OPT_BACKGROUND=background=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_BAR=type=bar [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% progress]
GUI_EDITOR_CALLTIP_OPT_BARS=bars[=WIDTH] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_BCANCEL=type=bcancel [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% progress]
GUI_EDITOR_CALLTIP_OPT_BELL=method=bell [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% resample]
GUI_EDITOR_CALLTIP_OPT_BGCOLORSCHEME=bgcolorscheme=COLORSCHEME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_BINLABEL=binlabel=LABEL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% hist]
GUI_EDITOR_CALLTIP_OPT_BINOMIAL=distrib=binomial [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_BINS=bins=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% hist]
GUI_EDITOR_CALLTIP_OPT_BLACKMAN=method=blackman [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% resample]
GUI_EDITOR_CALLTIP_OPT_BONUM=bonum [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_BOTTOMLEFT=legend=bottomleft [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_BOTTOMRIGHT=legend=bottomright [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_BOX=box
GUI_EDITOR_CALLTIP_OPT_BOXPLOT=boxplot [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_BSPLINE=method=bspline [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fwt/resample]
GUI_EDITOR_CALLTIP_OPT_BUFFERSIZE=buffersize=VAL [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_BUTTONS=buttons=BUTTONS [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_CANCEL=type=cancel [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% progress]
GUI_EDITOR_CALLTIP_OPT_CANDLESTICK=candlestick [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CARTESIAN=coords=cartesian [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CATMULLROM=method=catmullrom [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% resample]
GUI_EDITOR_CALLTIP_OPT_CBSPLINE=method=cbspline [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fwt]
GUI_EDITOR_CALLTIP_OPT_CDAUBECHIES=method=cdaubechies [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fwt]
GUI_EDITOR_CALLTIP_OPT_CHAAR=method=chaar [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fwt]
GUI_EDITOR_CALLTIP_OPT_CHANNELS=channels=CHANNELS [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% imread]
GUI_EDITOR_CALLTIP_OPT_CHECKMARK=type=checkmark [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_CHIMAP=chimap=CHIMAP() [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fit]
GUI_EDITOR_CALLTIP_OPT_CHORUS=chorus [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_CLOG=clog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CLOUDPLOT=cloudplot [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CMD=cmd
GUI_EDITOR_CALLTIP_OPT_COARSE=grid=coarse [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COAST=colorscheme=coast [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COLD=colorscheme=cold [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COLOR=color[={R,G,B}]
GUI_EDITOR_CALLTIP_OPT_COLORBAR=colorbar [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COLORMASK=colormask [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COLORRANGE=colorrange=MIN:MAX [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COLORSCHEME=colorscheme=COLORSCHEME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COLORTHEME=colortheme [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_COLS=cols[=VAL]
GUI_EDITOR_CALLTIP_OPT_COMMENT=comment=COMMENT
GUI_EDITOR_CALLTIP_OPT_COMMENTS=comments=COMMENTCHARACTERSEQUENCE(S) [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% read]
GUI_EDITOR_CALLTIP_OPT_COMPACT=compact [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_COMPLETE=complete [%%GUI_EDITOR_CALLTIP_COMMON_FILEREAD%%]
GUI_EDITOR_CALLTIP_OPT_COMPLEX=complex [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fft]
GUI_EDITOR_CALLTIP_OPT_COMPLEXMODE=complexmode=MODE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CONNECT=connect [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CONST=const
GUI_EDITOR_CALLTIP_OPT_COOLWARM=colorscheme=coolwarm [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COORDS=coords=COORDINATESET [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COPPER=colorscheme=copper [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_COUNTLABEL=countlabel=LABEL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% hist]
GUI_EDITOR_CALLTIP_OPT_COUNTS=counts=COUNTMETHOD [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% hist/hist2d]
GUI_EDITOR_CALLTIP_OPT_CRUST=crust [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% plot3d]
GUI_EDITOR_CALLTIP_OPT_CSCALE=cscale=VAL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CTICKLABELS=cticklabels={LABELS} [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CTICKS=cticks=TICKSTYLE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_CURSOR=cursor [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_CUT=cut [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_DATEPICKER=type=datepicker [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_DAUBECHIES=method=daubechies [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fwt]
GUI_EDITOR_CALLTIP_OPT_DEBUGGER=debugger [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_DEFCONTROL=defcontrol [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_DESC=sort=desc [Sorting direction]
GUI_EDITOR_CALLTIP_OPT_DIALOGRESULT=dialogresult [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_DIR=dir[=DIRNAME]
GUI_EDITOR_CALLTIP_OPT_DIRDIALOG=type=dirdialog [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_DISABLED=state=disabled [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_DISPLAY=display=DISPLAYTYPE [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_DISTRIB=distrib=DISTRIBUTION [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_DOCS=docs [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% close]
GUI_EDITOR_CALLTIP_OPT_DOWN=down [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% zeroes]
GUI_EDITOR_CALLTIP_OPT_DRAFTMODE=draftmode [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_EDITOR=editor[=PATH/TO/EDITOR] [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_ENABLED=state=enabled [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_EPS=eps=PRECISION
GUI_EDITOR_CALLTIP_OPT_EQUAL=axis=equal [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ERRORBARS=errorbars [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ERRORICON=icon=erroricon [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_EXEPATH=exepath [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_EXPAND=expand [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_EXPRVAR=exprvar
GUI_EDITOR_CALLTIP_OPT_EXTENDEDFILEINFO=extendedfileinfo [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_EXTERNALDOCWINDOW=externaldocwindow [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_FASTSTART=faststart [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_FCONT=fcont[=NUM] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_FILE=file=FILENAME
GUI_EDITOR_CALLTIP_OPT_FILEDIALOG=type=filedialog [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_FILEFORMAT=fileformat=FORMAT [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% load/save]
GUI_EDITOR_CALLTIP_OPT_FILES=files[=FILEPATH]
GUI_EDITOR_CALLTIP_OPT_FINE=grid=fine [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_FIRST=first=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% progress]
GUI_EDITOR_CALLTIP_OPT_FLENGTH=flength [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_FLOW=flow [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_FOCUS=focus [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_FONT=font=FONTTYPE
GUI_EDITOR_CALLTIP_OPT_FREE=free [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% new]
GUI_EDITOR_CALLTIP_OPT_FREEDMAN=method=freedman [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% hist]
GUI_EDITOR_CALLTIP_OPT_FREEDOMS=freedoms=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_FROMLINE=fromline=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% start]
GUI_EDITOR_CALLTIP_OPT_FUNC=func[=TYPE]
GUI_EDITOR_CALLTIP_OPT_FX0=fx0=[STARTVALS] [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% odesolve]
GUI_EDITOR_CALLTIP_OPT_GAMMA=distrib=gamma [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_GAUSS=distrib=gauss [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_GAUSSIAN=method=gaussian [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% smooth/resample]
GUI_EDITOR_CALLTIP_OPT_GETITEMS=getitems=ITEMCOMMAND [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_GRAPHS=graphs [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% close]
GUI_EDITOR_CALLTIP_OPT_GREETING=greeting [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_GREY=colorscheme=grey [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_GRID=grid[=TYPE]
GUI_EDITOR_CALLTIP_OPT_GRIDSTYLE=gridstyle=STYLE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_GZARCHIVE=type=gzarchive [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% pack]
GUI_EDITOR_CALLTIP_OPT_HAAR=method=haar [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fwt]
GUI_EDITOR_CALLTIP_OPT_HBARS=hbars[=WIDTH] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_HEAD=head=LINENUMBER
GUI_EDITOR_CALLTIP_OPT_HEROS=heros [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_HEROSCN=heroscn [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_HIDDEN=state=hidden [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_HIDE=display=hide [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_HINTS=hints [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_HIRES=hires[=MODE] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_HLINES=hlines=(POS,STRING) [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_HORIZONTAL=type=horizontal [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_HOT=colorscheme=hot [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_HTML=html
GUI_EDITOR_CALLTIP_OPT_HUE=colorscheme=hue [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ICON=icon=ICON
GUI_EDITOR_CALLTIP_OPT_ICONIZE=display=iconize [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_ID=id=ID [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_IGNORE=ignore
GUI_EDITOR_CALLTIP_OPT_IGNORECASE=ignorecase [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% sort]
GUI_EDITOR_CALLTIP_OPT_IMAGES=images [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% close]
GUI_EDITOR_CALLTIP_OPT_INDEX=index [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% sort]
GUI_EDITOR_CALLTIP_OPT_INFOICON=icon=infoicon [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_INTERPOLATE=interpolate [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_INVERSE=inverse [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fft/fwt]
GUI_EDITOR_CALLTIP_OPT_ITEM=item=ITEMID [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_ITER=iter=VAL
GUI_EDITOR_CALLTIP_OPT_KAISER=method=kaiser [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% resample]
GUI_EDITOR_CALLTIP_OPT_KEEPDIM=keepdim [%%GUI_EDITOR_CALLTIP_COMMON_FILEREAD%%]
GUI_EDITOR_CALLTIP_OPT_LABEL=label[=LABELSTRING] [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_LANCZOS12=method=lanczos12 [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% resample]
GUI_EDITOR_CALLTIP_OPT_LANCZOS3=method=lanczos3 [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% resample]
GUI_EDITOR_CALLTIP_OPT_LANCZOS4=method=lanczos4 [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% resample]
GUI_EDITOR_CALLTIP_OPT_LANCZOS6=method=lanczos6 [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% resample]
GUI_EDITOR_CALLTIP_OPT_LAST=last=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% progress]
GUI_EDITOR_CALLTIP_OPT_LBORDER=lborder=(POS,STRING) [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_LCONT=lcont[=NUM] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_LEGEND=legend=POSITION [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_LEGENDSTYLE=legendstyle=LEGENDSTYLE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_LEVEL=level=LEVEL
GUI_EDITOR_CALLTIP_OPT_LIGHT=light[=MODE] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_LINES=lines[=VAL]
GUI_EDITOR_CALLTIP_OPT_LINESIZES=linesizes=VALS [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_LINESTYLES=linestyles=STYLES [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_LISTDIALOG=type=listdialog [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_LISTEDITOR=type=listeditor [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_LNUMCTRL=lnumctrl[=VAL]
GUI_EDITOR_CALLTIP_OPT_LOADEMPTYCOLS=loademptycols [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_LOADPATH=loadpath[=PATH] [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_LOGIC=logic
GUI_EDITOR_CALLTIP_OPT_LOGSCALE=logscale
GUI_EDITOR_CALLTIP_OPT_LYAPUNOV=lyapunov [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% odesolve]
GUI_EDITOR_CALLTIP_OPT_MAIN=main [Namespace]
GUI_EDITOR_CALLTIP_OPT_MAP=colorscheme=map [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_MARGIN=margin="<_^>" [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_MARKS=marks=SIZE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_MASK=mask
GUI_EDITOR_CALLTIP_OPT_MAX=max[=VAL]
GUI_EDITOR_CALLTIP_OPT_MAXIMIZE=display=maximize [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_MAXLINE=maxline=STRING [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_MEAN=mean=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_MEDIUM=hires=medium [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_MEMORY=memory [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% clear]
GUI_EDITOR_CALLTIP_OPT_MENU=style=menu [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_MESSAGEBOX=type=messagebox [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_METHOD=method=METHOD
GUI_EDITOR_CALLTIP_OPT_MIN=min[=VAL]
GUI_EDITOR_CALLTIP_OPT_MINLEN=minlen=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% detect]
GUI_EDITOR_CALLTIP_OPT_MINLINE=minline=STRING [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_MINVAL=minval=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% detect]
GUI_EDITOR_CALLTIP_OPT_MITCHELL=method=mitchell [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% resample]
GUI_EDITOR_CALLTIP_OPT_MODE=mode=MODE
GUI_EDITOR_CALLTIP_OPT_MOY=colorscheme=moy [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_MSG=msg=MESSAGE
GUI_EDITOR_CALLTIP_OPT_MULTILINE=type=multiline [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_MULTIPLOT=multiplot=ROWS,COLS
GUI_EDITOR_CALLTIP_OPT_NICE=axis=nice [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOALPHA=noalpha [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOALPHAMASK=noalphamask [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOANIMATE=noanimate [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOAREA=noarea [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOAXIS=noaxis [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOBACKGROUND=nobackground [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOBARS=nobars [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOBOX=nobox [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOBOXPLOT=noboxplot [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOCANDLESTICK=nocandlestick [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOCLOG=noclog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOCLOUDPLOT=nocloudplot [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOCOLORBAR=nocolorbar [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOCOLORMASK=nocolormask [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOCONNECT=noconnect [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOCRUST=nocrust [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% plot3d]
GUI_EDITOR_CALLTIP_OPT_NOCUT=nocut [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOERRORBARS=noerrorbars [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOFCONT=nofcont [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOFLENGTH=noflength [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOFLOW=noflow [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOGRID=nogrid [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOHBARS=nohbars [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOHIRES=nohires [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOINTERPOLATE=nointerpolate [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOLCONT=nolcont [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOLIGHT=nolight [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOLOGSCALE=nologscale [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOMARKS=nomarks [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NONE=complexmode=none [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOOHLC=noohlc [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOOPEN=noopen [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOORTHOPROJECT=noorthoproject [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOPCONT=nopcont [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOPIPE=nopipe [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOPOINTS=nopoints [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOQUOTES=noquotes
GUI_EDITOR_CALLTIP_OPT_NOREFRESH=norefresh [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% edit]
GUI_EDITOR_CALLTIP_OPT_NOREGION=noregion [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NORMAL=distrib=normal [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_NOSCHEMATIC=noschematic [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOSILENT=nosilent [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOSTEPS=nosteps [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOXLOG=noxlog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOYERRORBARS=noyerrorbars [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOYLOG=noylog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NOZLOG=nozlog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_NQ=nq
GUI_EDITOR_CALLTIP_OPT_OBPS=obps=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OEPS=oeps=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OGIF=ogif=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OHLC=ohlc [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OK=buttons=ok [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_OKCANCEL=buttons=okcancel [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_ONACTIVATE=onactivate=EVENTHANDLER [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_ONCHANGE=onchange=EVENTHANDLER [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_ONCLICK=onclick=EVENTHANDLER [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_ONLYCOLORS=legendstyle=onlycolors [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ONLYSTYLES=legendstyle=onlystyles [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ONOPEN=onopen=EVENTHANDLER [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_OPEN=open [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OPNG=opng=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ORDER=order=VAL
GUI_EDITOR_CALLTIP_OPT_ORIGIN=origin=TYPE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ORTHOPROJECT=orthoproject [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OSVG=osvg=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OTEX=otex=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OTIF=otif=FILENAME [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_OVERRIDE=mode=override [%%GUI_EDITOR_CALLTIP_COMMON_FILEWRITE%%]
GUI_EDITOR_CALLTIP_OPT_OVERWRITE=mode=overwrite [%%GUI_EDITOR_CALLTIP_COMMON_FILEWRITE%%]
GUI_EDITOR_CALLTIP_OPT_PAGELLA=pagella [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_PARAMETRIC=coords=parametric [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_PARAMS=params=[PARAMS]
GUI_EDITOR_CALLTIP_OPT_PARTICLES=particles=PARTICLES [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% pso]
GUI_EDITOR_CALLTIP_OPT_PATTERN=pattern=FILEPATTERN
GUI_EDITOR_CALLTIP_OPT_PCONT=pcont[=NUM] [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_PEEK=peek
GUI_EDITOR_CALLTIP_OPT_PERSPECTIVE=perspective=VAL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_PIPE=pipe [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_PLANE=complexmode=plane [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_PLASMA=colorscheme=plasma [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_PLOTCOLORS=plotcolors=COLORS [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_PLOTFONT=plotfont=FONTTYPE [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_PLOTPARAMS=plotparams
GUI_EDITOR_CALLTIP_OPT_PLOTPATH=plotpath[=PATH] [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_PLUGIN=plugin=PLUGINCOMMAND [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% new]
GUI_EDITOR_CALLTIP_OPT_PLUGINS=plugins
GUI_EDITOR_CALLTIP_OPT_POINTS=points[=VAL]
GUI_EDITOR_CALLTIP_OPT_POINTSTYLES=pointstyles=STYLES [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_POISSON=distrib=poisson [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_POLAR=coords=polar [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_POLARITY=colorscheme=polarity [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_POLAR_PZ=coords=polar_pz [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_POLAR_RP=coords=polar_rp [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_POLAR_RZ=coords=polar_rz [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_PRECISION=precision=VAL
GUI_EDITOR_CALLTIP_OPT_PROB=prob=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_PROC=proc=PROCNAME [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% new]
GUI_EDITOR_CALLTIP_OPT_PROCPATH=procpath[=PATH] [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_PWD=pwd=PASSWORD [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% url]
GUI_EDITOR_CALLTIP_OPT_QMARKS=qmarks=STRINGDELIMITER [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% read]
GUI_EDITOR_CALLTIP_OPT_QUESTIONICON=icon=questionicon [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_RAINBOW=colorscheme=rainbow [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_RBORDER=rborder=(POS,STRING) [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_READONLY=state=readonly [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_REAL=bgcolorscheme=real [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_RECURSIVE=recursive [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% define]
GUI_EDITOR_CALLTIP_OPT_REFRESH=refresh [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% edit]
GUI_EDITOR_CALLTIP_OPT_REGION=region [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_REIM=complexmode=reim [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_RELATIVE=counts=relative [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% hist]
GUI_EDITOR_CALLTIP_OPT_RELSCL=relscl=FACTOR [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_RESET=reset [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_RESTORE=display=restore [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_RESTRICT=restrict=[RESTRICTIONS] [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fit]
GUI_EDITOR_CALLTIP_OPT_RK2=method=rk2 [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% odesolve]
GUI_EDITOR_CALLTIP_OPT_RK4=method=rk4 [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% odesolve]
GUI_EDITOR_CALLTIP_OPT_RK8PD=method=rk8pd [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% odesolve]
GUI_EDITOR_CALLTIP_OPT_RKCK=method=rkck [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% odesolve]
GUI_EDITOR_CALLTIP_OPT_RKF45=method=rkf45 [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% odesolve]
GUI_EDITOR_CALLTIP_OPT_ROTATE=rotate=THETA,PHI [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_RYG=colorscheme=ryg [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SAMPLES=samples=VAL
GUI_EDITOR_CALLTIP_OPT_SAVEPATH=savepath[=PATH] [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_SAVERR=saverr [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fit]
GUI_EDITOR_CALLTIP_OPT_SAVITZKYGOLAY=method=savitzkygolay [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% smooth]
GUI_EDITOR_CALLTIP_OPT_SCALE=scale=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_SCHEMATIC=schematic [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SCHOLA=schola [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_SCOTT=method=scott [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% hist]
GUI_EDITOR_CALLTIP_OPT_SCRIPTPATH=scriptpath[=PATH] [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_SELECTION=selection[={POS}] [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_SELECTIONDIALOG=type=selectiondialog [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_SETTINGS=settings
GUI_EDITOR_CALLTIP_OPT_SHAPE=shape=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_SILENT=silent [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SIMPSON=method=simpson [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% integrate]
GUI_EDITOR_CALLTIP_OPT_SINGLE=single
GUI_EDITOR_CALLTIP_OPT_SIZE=size={x,y} [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%/%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SLICES=slices=SLICES
GUI_EDITOR_CALLTIP_OPT_SLIDING=origin=sliding [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SP=sp [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% for, while]
GUI_EDITOR_CALLTIP_OPT_SPACE=type=space [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_SPECTRAL=colorscheme=spectral [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SPHERICAL=coords=spherical [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SPHERICAL_PT=coords=spherical_pt [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SPHERICAL_RP=coords=spherical_rp [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SPHERICAL_RT=coords=spherical_rt [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_STACKED=stacked [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_STATE=state[=STATE] [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_STATUSTEXT=statustext[=TEXT] [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_STD=std
GUI_EDITOR_CALLTIP_OPT_STEPS=steps[=VAL]
GUI_EDITOR_CALLTIP_OPT_STOREGRID=storegrid [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% hist2d]
GUI_EDITOR_CALLTIP_OPT_STREAMTO=streamto={WINID,ITEMID} [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_STUDENT=distrib=student [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_STYLE=style=STYLE [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_STYLES=styles=STYLES [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_SV=sv [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% for, while]
GUI_EDITOR_CALLTIP_OPT_TABLES=tables [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% close]
GUI_EDITOR_CALLTIP_OPT_TABS=style=tabs [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_TARCHIVE=type=tarchive [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% pack]
GUI_EDITOR_CALLTIP_OPT_TARGET=target=TARGET
GUI_EDITOR_CALLTIP_OPT_TENT=method=tent [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% resample]
GUI_EDITOR_CALLTIP_OPT_TERMES=termes [%%GUI_EDITOR_CALLTIP_COMMON_FONTTYPE%%]
GUI_EDITOR_CALLTIP_OPT_TEXTENTRY=type=textentry [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_TEXTSIZE=textsize=VAL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_THIS=this [Namespace]
GUI_EDITOR_CALLTIP_OPT_THISFILE=thisfile [Namespace]
GUI_EDITOR_CALLTIP_OPT_TIMEAXES=timeaxes=(AXES,FORMAT) [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_TIMEPICKER=type=timepicker [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_TITLE=title=TITLE
GUI_EDITOR_CALLTIP_OPT_TOL=tol=VAL
GUI_EDITOR_CALLTIP_OPT_TOPLEFT=legend=topleft [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_TOPRIGHT=legend=topright [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_TOTABLE=totable[=TABLE()]
GUI_EDITOR_CALLTIP_OPT_TRANSPOSE=transpose
GUI_EDITOR_CALLTIP_OPT_TRAPEZOIDAL=method=trapezoidal [%%GUI_EDITOR_CALLTIP_COMMON_METHODFOR%% integrate]
GUI_EDITOR_CALLTIP_OPT_TRUNC=mode=trunc [%%GUI_EDITOR_CALLTIP_COMMON_FILEWRITE%%]
GUI_EDITOR_CALLTIP_OPT_TYPE=type=TYPE
GUI_EDITOR_CALLTIP_OPT_UBOUND=ubound=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_UNHIDE=display=unhide [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_UNIFORM=distrib=uniform [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random]
GUI_EDITOR_CALLTIP_OPT_UNIQUE=unique
GUI_EDITOR_CALLTIP_OPT_UNITS=units
GUI_EDITOR_CALLTIP_OPT_UP=up [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% zeroes, url]
GUI_EDITOR_CALLTIP_OPT_USECUSTOMLANG=usecustomlang [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_USEESCINSCRIPTS=useescinscripts [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_USR=usr=USERNAME [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% url]
GUI_EDITOR_CALLTIP_OPT_VALUE=value[=VALUE] [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_VAR=var
GUI_EDITOR_CALLTIP_OPT_VERTICAL=type=vertical [%%GUI_EDITOR_CALLTIP_COMMON_GUI%%]
GUI_EDITOR_CALLTIP_OPT_VIEWER=viewer[=PATH/TO/VIEWER] [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_VIRIDIS=colorscheme=viridis [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_VLINES=vlines=(POS,STRING) [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_WAIT=wait [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% execute]
GUI_EDITOR_CALLTIP_OPT_WARNICON=icon=warnicon [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_WEIGHTEDLINEAR=method=weightedlinear [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% smooth]
GUI_EDITOR_CALLTIP_OPT_WIDTH=width=VAL [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% random/hist/hist2d]
GUI_EDITOR_CALLTIP_OPT_WINDOWSIZE=windowsize [%%GUI_EDITOR_CALLTIP_COMMON_SETTING%%]
GUI_EDITOR_CALLTIP_OPT_WITH=with=FUNCTION(x,PARAMS) [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% fit]
GUI_EDITOR_CALLTIP_OPT_WP=wp=PATH [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% execute]
GUI_EDITOR_CALLTIP_OPT_XERRORBARS=xerrorbars [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_XLABEL=xlabel=LABEL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_XLOG=xlog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_XSCALE=xscale=VAL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_XTICKLABELS=xticklabels={LABELS} [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_XTICKS=xticks=TICKSTYLE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_XVALS=xvals
GUI_EDITOR_CALLTIP_OPT_XY=slices=xy [%%GUI_EDITOR_CALLTIP_COMMON_FILEREAD%%]
GUI_EDITOR_CALLTIP_OPT_XZ=slices=xz [%%GUI_EDITOR_CALLTIP_COMMON_FILEREAD%%]
GUI_EDITOR_CALLTIP_OPT_YERRORBARS=yerrorbars [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_YESNO=buttons=yesno [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% dialog]
GUI_EDITOR_CALLTIP_OPT_YLABEL=ylabel=LABEL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_YLOG=ylog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_YSCALE=yscale=VAL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_YTICKLABELS=yticklabels={LABELS} [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_YTICKS=yticks=TICKSTYLE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ZIPARCHIVE=type=ziparchive [%%GUI_EDITOR_CALLTIP_COMMON_OPTIONFOR%% pack]
GUI_EDITOR_CALLTIP_OPT_ZLABEL=zlabel=LABEL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ZLOG=zlog [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ZSCALE=zscale=VAL [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ZTICKLABELS=zticklabels={LABELS} [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
GUI_EDITOR_CALLTIP_OPT_ZTICKS=zticks=TICKSTYLE [%%GUI_EDITOR_CALLTIP_COMMON_PLOTTING%%]
# Constants tooltips
GUI_EDITOR_CALLTIP_CONST_G_[ASTRO]=_g = 9.80665 [m/s^2]
GUI_EDITOR_CALLTIP_CONST_C_[FIELDTHEORY]=_c = 299792458 [m/s]
GUI_EDITOR_CALLTIP_CONST_ELECTRIC_CONST_[FIELDTHEORY]=_electric_const = 8.8541878e-12 [A s/(V m)]
GUI_EDITOR_CALLTIP_CONST_ELEK_FELDKONST_[FIELDTHEORY]=_elek_feldkonst = _electric_const
GUI_EDITOR_CALLTIP_CONST_N_AVOGADRO_[CHEMICAL]=_n_avogadro = 6.02214129e23 [1/mol]
GUI_EDITOR_CALLTIP_CONST_K_BOLTZ_[THERMO]=_k_boltz = 1.3806488e-23 [J/K]
GUI_EDITOR_CALLTIP_CONST_ELEM_CHARGE_[FIELDTHEORY]=_elem_charge = 1.602176565e-19 [A s]
GUI_EDITOR_CALLTIP_CONST_ELEM_LADUNG_[FIELDTHEORY]=_elem_ladung = _elem_charge
GUI_EDITOR_CALLTIP_CONST_H_[ATOMIC]=_h = 6.62606957e-34 [J s]
GUI_EDITOR_CALLTIP_CONST_HBAR_[ATOMIC]=_hbar = 1.05457173e-34 [J s]
GUI_EDITOR_CALLTIP_CONST_M_ELECTRON_[PARTICLE]=_m_electron = 9.10938291e-31 [kg]
GUI_EDITOR_CALLTIP_CONST_M_ELEKTRON_[PARTICLE]=_m_elektron = _m_electron
GUI_EDITOR_CALLTIP_CONST_M_PROTON_[PARTICLE]=_m_proton = 1.67262178e-27 [kg]
GUI_EDITOR_CALLTIP_CONST_M_NEUTRON_[PARTICLE]=_m_neutron = 1.67492735e-27 [kg]
GUI_EDITOR_CALLTIP_CONST_M_MUON_[PARTICLE]=_m_muon = 1.88353148e-28 [kg]
GUI_EDITOR_CALLTIP_CONST_M_TAU_[PARTICLE]=_m_tau = 3.16747e-27 [kg]
GUI_EDITOR_CALLTIP_CONST_MAGNETIC_CONST_[FIELDTHEORY]=_magnetic_const = 1.25663706e-6 [V s/(A m)]
GUI_EDITOR_CALLTIP_CONST_MAGN_FELDKONST_[FIELDTHEORY]=_magn_feldkonst = _magnetic_const
GUI_EDITOR_CALLTIP_CONST_M_EARTH_[ASTRO]=_m_earth = 5.9726e24 [kg]
GUI_EDITOR_CALLTIP_CONST_M_ERDE_[ASTRO]=_m_erde = _m_earth
GUI_EDITOR_CALLTIP_CONST_M_SUN_[ASTRO]=_m_sun = 1.9885e30 [kg]
GUI_EDITOR_CALLTIP_CONST_M_SONNE_[ASTRO]=_m_sonne = _m_sun
GUI_EDITOR_CALLTIP_CONST_R_EARTH_[ASTRO]=_r_earth = 6.378137e6 [m]
GUI_EDITOR_CALLTIP_CONST_R_ERDE_[ASTRO]=_r_erde = _r_earth
GUI_EDITOR_CALLTIP_CONST_R_SUN_[ASTRO]=_r_sun = 6.9551e8 [m]
GUI_EDITOR_CALLTIP_CONST_R_SONNE_[ASTRO]=_r_sonne = _r_sun
GUI_EDITOR_CALLTIP_CONST_THETA_WEINBERG_[PARTICLE]=_theta_weinberg = 0.490976214
GUI_EDITOR_CALLTIP_CONST_2PI_[MATHEMATICAL]=_2pi = 6.28318531
GUI_EDITOR_CALLTIP_CONST_PI_[MATHEMATICAL]=_pi = 3.14159265
GUI_EDITOR_CALLTIP_CONST_R_[THERMO]=_R = 8.3144622 [J/(mol K)]
GUI_EDITOR_CALLTIP_CONST_ALPHA_FS_[ATOMIC]=_alpha_fs = 7.29735257e-3
GUI_EDITOR_CALLTIP_CONST_MU_BOHR_[ATOMIC]=_mu_bohr = 9.27400968e-24 [J/T]
GUI_EDITOR_CALLTIP_CONST_MU_NUCLEAR_[ATOMIC]=_mu_nuclear = 5.05078353e-27 [J/T]
GUI_EDITOR_CALLTIP_CONST_MU_KERN_[ATOMIC]=_mu_kern = _mu_nuclear
GUI_EDITOR_CALLTIP_CONST_M_AMU_[CHEMICAL]=_m_amu = 1.66053892e-27 [kg]
GUI_EDITOR_CALLTIP_CONST_R_BOHR_[ATOMIC]=_r_bohr = 5.29177211e-11 [m]
GUI_EDITOR_CALLTIP_CONST_GRAV_[ASTRO]=_G = 6.67384e-11 [m^3/(kg s^2)]
GUI_EDITOR_CALLTIP_CONST_COUL_NORM_[FIELDTHEORY]=_coul_norm = 8.98755179e9 [V m/(A s)]
GUI_EDITOR_CALLTIP_CONST_MU_E_[PARTICLE]=_mu_e = -9.284764620e-24 [J/T]
GUI_EDITOR_CALLTIP_CONST_MU_P_[PARTICLE]=_mu_p = 1.4106067873e8 [J/T]
GUI_EDITOR_CALLTIP_CONST_MU_N_[PARTICLE]=_mu_n = -9.662365e-27 [J/T]
GUI_EDITOR_CALLTIP_CONST_STEFAN_BOLTZMANN_[THERMO]=_stefan_boltzmann = 5.670367e-8 [J/(m^2 s K^4)]
GUI_EDITOR_CALLTIP_CONST_WIEN_[THERMO]=_wien = 2.8977729e-3 [m K]
GUI_EDITOR_CALLTIP_CONST_RYDBERG_[ATOMIC]=_rydberg = 1.0973731568508e7 [1/m]
GUI_EDITOR_CALLTIP_CONST_HARTREE_[ATOMIC]=_hartree = 4.35974465e-18 [J]
GUI_EDITOR_CALLTIP_CONST_GAMMA_P_[PARTICLE]=_gamma_p = 2.6752219e8 [1/(T s)]
GUI_EDITOR_CALLTIP_CONST_GAMMA_N_[PARTICLE]=_gamma_n = 1.83247172e8 [1/(T s)]
GUI_EDITOR_CALLTIP_CONST_GAMMA_E_[PARTICLE]=_gamma_e = 1.760859644e11 [1/(T s)]
GUI_EDITOR_CALLTIP_CONST_LANDE_E_[PARTICLE]=_lande_e = -2.00231930436182
GUI_EDITOR_CALLTIP_CONST_FEIGENBAUM_DELTA_[MATHEMATICAL]=_feigenbaum_delta = 4.6692016091
GUI_EDITOR_CALLTIP_CONST_FEIGENBAUM_ALPHA_[MATHEMATICAL]=_feigenbaum_alpha = 2.5029078751
GUI_EDITOR_CALLTIP_CONST_UI8_MAX_[INTERNAL]=ui8_max = 255
GUI_EDITOR_CALLTIP_CONST_I8_MAX_[INTERNAL]=i8_max = 127
GUI_EDITOR_CALLTIP_CONST_I8_MIN_[INTERNAL]=i8_min = -128
GUI_EDITOR_CALLTIP_CONST_UI16_MAX_[INTERNAL]=ui16_max = 65535
GUI_EDITOR_CALLTIP_CONST_I16_MAX_[INTERNAL]=i16_max = 32767
GUI_EDITOR_CALLTIP_CONST_I16_MIN_[INTERNAL]=i16_min = -32768
GUI_EDITOR_CALLTIP_CONST_UI32_MAX_[INTERNAL]=ui32_max = 4294967295
GUI_EDITOR_CALLTIP_CONST_I32_MAX_[INTERNAL]=i32_max = 2147483647
GUI_EDITOR_CALLTIP_CONST_I32_MIN_[INTERNAL]=i32_min = -2147483648
GUI_EDITOR_CALLTIP_CONST_UI64_MAX_[INTERNAL]=ui64_max = 18446744073709551615
GUI_EDITOR_CALLTIP_CONST_I64_MAX_[INTERNAL]=i64_max = 9223372036854775807
GUI_EDITOR_CALLTIP_CONST_I64_MIN_[INTERNAL]=i64_min = -9223372036854775808
GUI_EDITOR_CALLTIP_CONST_F64_MAX_[INTERNAL]=f64_max = 1.797693e+308
GUI_EDITOR_CALLTIP_CONST_F64_MIN_[INTERNAL]=f64_min = 2.225074e-308
GUI_EDITOR_CALLTIP_CONST_F64_EPS_[INTERNAL]=f64_eps = 2.220446e-16
GUI_EDITOR_CALLTIP_CONST_F32_MAX_[INTERNAL]=f32_max = 3.402823e+38
GUI_EDITOR_CALLTIP_CONST_F32_MIN_[INTERNAL]=f32_min = 1.175494e-38
GUI_EDITOR_CALLTIP_CONST_F32_EPS_[INTERNAL]=f32_eps = 1.192093e-07
GUI_EDITOR_CALLTIP_CONST_CF64_MAX_[INTERNAL]=cf64_max = f64_max+I*f64_max
GUI_EDITOR_CALLTIP_CONST_CF64_MIN_[INTERNAL]=cf64_min = f64_min+I*f64_min
GUI_EDITOR_CALLTIP_CONST_CF64_EPS_[INTERNAL]=cf64_eps = f64_eps+I*f64_eps
GUI_EDITOR_CALLTIP_CONST_CF32_MAX_[INTERNAL]=cf32_max = f32_max+I*f32_max
GUI_EDITOR_CALLTIP_CONST_CF32_MIN_[INTERNAL]=cf32_min = f32_min+I*f32_min
GUI_EDITOR_CALLTIP_CONST_CF32_EPS_[INTERNAL]=cf32_eps = f32_eps+I*f32_eps